"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["11905"],{5091:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>l,default:()=>m,assets:()=>u,toc:()=>d,frontMatter:()=>c});var i=JSON.parse('{"id":"testing","title":"Writing tests","description":"React Navigation components can be tested in a similar way to other React components. This guide will cover how to write tests for components using React Navigation using Jest.","source":"@site/versioned_docs/version-7.x/testing.md","sourceDirName":".","slug":"/testing","permalink":"/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/testing.md","tags":[],"version":"7.x","frontMatter":{"id":"testing","title":"Writing tests","sidebar_label":"Writing tests"},"sidebar":"docs","previous":{"title":"Static and dynamic APIs","permalink":"/docs/combine-static-with-dynamic"},"next":{"title":"Configuring TypeScript","permalink":"/docs/typescript"}}'),s=n("85893"),a=n("50065"),r=n("47902"),o=n("5525");let c={id:"testing",title:"Writing tests",sidebar_label:"Writing tests"},l=void 0,u={},d=[{value:"Guiding principles",id:"guiding-principles",level:2},{value:"Mocking native dependencies",id:"mocking-native-dependencies",level:2},{value:"Fake timers",id:"fake-timers",level:2},{value:"Navigation and visibility",id:"navigation-and-visibility",level:2},{value:"Example tests",id:"example-tests",level:2},{value:"Navigation between tabs",id:"navigation-between-tabs",level:3},{value:"Reacting to a navigation event",id:"reacting-to-a-navigation-event",level:3},{value:"Fetching data with <code>useFocusEffect</code>",id:"fetching-data-with-usefocuseffect",level:3}];function h(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{Details:n}=t;return!n&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["React Navigation components can be tested in a similar way to other React components. This guide will cover how to write tests for components using React Navigation using ",(0,s.jsx)(t.a,{href:"https://jestjs.io",children:"Jest"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"guiding-principles",children:"Guiding principles"}),"\n",(0,s.jsx)(t.p,{children:"When writing tests, it's encouraged to write tests that closely resemble how users interact with your app. Keeping this in mind, here are some guiding principles to follow:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Test the result, not the action"}),": Instead of checking if a specific navigation action was called, check if the expected components are rendered after navigation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Avoid mocking React Navigation"}),": Mocking React Navigation components can lead to tests that don't match the actual logic. Instead, use a real navigator in your tests."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Following these principles will help you write tests that are more reliable and easier to maintain by avoiding testing implementation details."}),"\n",(0,s.jsx)(t.h2,{id:"mocking-native-dependencies",children:"Mocking native dependencies"}),"\n",(0,s.jsx)(t.p,{children:"To be able to test React Navigation components, certain dependencies will need to be mocked depending on which components are being used."}),"\n",(0,s.jsxs)(t.p,{children:["If you're using ",(0,s.jsx)(t.code,{children:"@react-navigation/stack"}),", you will need to mock:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"react-native-gesture-handler"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If you're using ",(0,s.jsx)(t.code,{children:"@react-navigation/drawer"}),", you will need to mock:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"react-native-reanimated"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"react-native-gesture-handler"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["To add the mocks, create a file ",(0,s.jsx)(t.code,{children:"jest/setup.js"})," (or any other file name of your choice) and paste the following code in it:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// Include this line for mocking react-native-gesture-handler\nimport 'react-native-gesture-handler/jestSetup';\n\n// Include this section for mocking react-native-reanimated\nimport { setUpTests } from 'react-native-reanimated';\n\nsetUpTests();\n\n// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing\nimport { jest } from '@jest/globals';\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then we need to use this setup file in our jest config. You can add it under ",(0,s.jsx)(t.code,{children:"setupFilesAfterEnv"})," option in a ",(0,s.jsx)(t.code,{children:"jest.config.js"})," file or the ",(0,s.jsx)(t.code,{children:"jest"})," key in ",(0,s.jsx)(t.code,{children:"package.json"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "preset": "react-native",\n  "setupFilesAfterEnv": ["<rootDir>/jest/setup.js"]\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Make sure that the path to the file in ",(0,s.jsx)(t.code,{children:"setupFilesAfterEnv"})," is correct. Jest will run these files before running your tests, so it's the best place to put your global mocks."]}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsxs)("summary",{children:["Mocking ",(0,s.jsx)(t.code,{children:"react-native-screens"})]}),(0,s.jsxs)(t.p,{children:["This shouldn't be necessary in most cases. However, if you find yourself in a need to mock ",(0,s.jsx)(t.code,{children:"react-native-screens"})," component for some reason, you should do it by adding following code in ",(0,s.jsx)(t.code,{children:"jest/setup.js"})," file:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// Include this section for mocking react-native-screens\njest.mock('react-native-screens', () => {\n  // Require actual module instead of a mock\n  let screens = jest.requireActual('react-native-screens');\n\n  // All exports in react-native-screens are getters\n  // We cannot use spread for cloning as it will call the getters\n  // So we need to clone it with Object.create\n  screens = Object.create(\n    Object.getPrototypeOf(screens),\n    Object.getOwnPropertyDescriptors(screens)\n  );\n\n  // Add mock of the component you need\n  // Here is the example of mocking the Screen component as a View\n  Object.defineProperty(screens, 'Screen', {\n    value: require('react-native').View,\n  });\n\n  return screens;\n});\n"})})]}),"\n",(0,s.jsx)(t.p,{children:"If you're not using Jest, then you'll need to mock these modules according to the test framework you are using."}),"\n",(0,s.jsx)(t.h2,{id:"fake-timers",children:"Fake timers"}),"\n",(0,s.jsxs)(t.p,{children:["When writing tests containing navigation with animations, you need to wait until the animations finish. In such cases, we recommend using ",(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/timer-mocks",children:(0,s.jsx)(t.code,{children:"Fake Timers"})})," to simulate the passage of time in your tests. This can be done by adding the following line at the beginning of your test file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"jest.useFakeTimers();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Fake timers replace real implementation of the native timer functions (e.g. ",(0,s.jsx)(t.code,{children:"setTimeout()"}),", ",(0,s.jsx)(t.code,{children:"setInterval()"})," etc,) with a custom implementation that uses a fake clock. This lets you instantly skip animations and reduce the time needed to run your tests by calling methods such as ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Often, component state is updated after an animation completes. To avoid getting an error in such cases, wrap ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"})," in ",(0,s.jsx)(t.code,{children:"act"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { act } from 'react-test-renderer';\n\n// ...\n\nact(() => jest.runAllTimers());\n"})}),"\n",(0,s.jsx)(t.p,{children:"See the examples below for more details on how to use fake timers in tests involving navigation."}),"\n",(0,s.jsx)(t.h2,{id:"navigation-and-visibility",children:"Navigation and visibility"}),"\n",(0,s.jsx)(t.p,{children:"In React Navigation, the previous screen is not unmounted when navigating to a new screen. This means that the previous screen is still present in the component tree, but it's not visible."}),"\n",(0,s.jsxs)(t.p,{children:["When writing tests, you should assert that the expected component is visible or hidden instead of checking if it's rendered or not. React Native Testing Library provides a ",(0,s.jsx)(t.code,{children:"toBeVisible"})," matcher that can be used to check if an element is visible to the user."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"expect(screen.getByText('Settings screen')).toBeVisible();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This is in contrast to the ",(0,s.jsx)(t.code,{children:"toBeOnTheScreen"})," matcher, which checks if the element is rendered in the component tree. This matcher is not recommended when writing tests involving navigation."]}),"\n",(0,s.jsxs)(t.p,{children:["By default, the queries from React Native Testing Library (e.g. ",(0,s.jsx)(t.code,{children:"getByRole"}),", ",(0,s.jsx)(t.code,{children:"getByText"}),", ",(0,s.jsx)(t.code,{children:"getByLabelText"})," etc.) ",(0,s.jsx)(t.a,{href:"https://callstack.github.io/react-native-testing-library/docs/api/queries#includehiddenelements-option",children:"only return visible elements"}),". So you don't need to do anything special. However, if you're using a different library for your tests, you'll need to account for this behavior."]}),"\n",(0,s.jsx)(t.h2,{id:"example-tests",children:"Example tests"}),"\n",(0,s.jsxs)(t.p,{children:["We recommend using ",(0,s.jsx)(t.a,{href:"https://callstack.github.io/react-native-testing-library/",children:"React Native Testing Library"})," to write your tests."]}),"\n",(0,s.jsx)(t.p,{children:"In this guide, we will go through some example scenarios and show you how to write tests for them using Jest and React Native Testing Library:"}),"\n",(0,s.jsx)(t.h3,{id:"navigation-between-tabs",children:"Navigation between tabs"}),"\n",(0,s.jsx)(t.p,{children:"In this example, we have a bottom tab navigator with two tabs: Home and Settings. We will write a test that asserts that we can navigate between these tabs by pressing the tab bar buttons."}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.js"',children:"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n};\n\nconst SettingsScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n    </View>\n  );\n};\n\nexport const MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.js"',children:"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n};\n\nconst SettingsScreen = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings screen</Text>\n    </View>\n  );\n};\n\nconst Tab = createBottomTabNavigator();\n\nexport const MyTabs = () => {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n};\n"})})})]}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.test.js"',children:"import { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('navigates to settings by tab bar button press', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyTabs);\n\n  render(<Navigation />);\n\n  const button = screen.getByRole('button', { name: 'Settings, tab, 2 of 2' });\n\n  await user.press(button);\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Settings screen')).toBeVisible();\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.test.js"',children:"import { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('navigates to settings by tab bar button press', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n\n  const button = screen.getByLabelText('Settings, tab, 2 of 2');\n\n  await user.press(button);\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Settings screen')).toBeVisible();\n});\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"In the above test, we:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Render the ",(0,s.jsx)(t.code,{children:"MyTabs"})," navigator within a ",(0,s.jsx)(t.a,{href:"/docs/navigation-container",children:"NavigationContainer"})," in our test."]}),"\n",(0,s.jsxs)(t.li,{children:["Get the tab bar button using the ",(0,s.jsx)(t.code,{children:"getByLabelText"})," query that matches its accessibility label."]}),"\n",(0,s.jsxs)(t.li,{children:["Press the button using ",(0,s.jsx)(t.code,{children:"userEvent.press(button)"})," to simulate a user interaction."]}),"\n",(0,s.jsxs)(t.li,{children:["Run all timers using ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"})," to skip animations (e.g. animations in the ",(0,s.jsx)(t.code,{children:"Pressable"})," for the button)."]}),"\n",(0,s.jsxs)(t.li,{children:["Assert that the ",(0,s.jsx)(t.code,{children:"Settings screen"})," is visible after the navigation."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"reacting-to-a-navigation-event",children:"Reacting to a navigation event"}),"\n",(0,s.jsx)(t.p,{children:'In this example, we have a stack navigator with two screens: Home and Surprise. We will write a test that asserts that the text "Surprise!" is displayed after navigating to the Surprise screen.'}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyStack.js"',children:"import { useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Button, Text, View } from 'react-native';\nimport { useEffect, useState } from 'react';\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        onPress={() => navigation.navigate('Surprise')}\n        title=\"Click here!\"\n      />\n    </View>\n  );\n};\n\nconst SurpriseScreen = () => {\n  const navigation = useNavigation();\n\n  const [textVisible, setTextVisible] = useState(false);\n\n  useEffect(() => {\n    navigation.addListener('transitionEnd', () => setTextVisible(true));\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {textVisible ? <Text>Surprise!</Text> : ''}\n    </View>\n  );\n};\n\nexport const MyStack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Surprise: SurpriseScreen,\n  },\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyStack.js"',children:"import { useNavigation } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useEffect, useState } from 'react';\nimport { Button, Text, View } from 'react-native';\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n      <Button\n        onPress={() => navigation.navigate('Surprise')}\n        title=\"Click here!\"\n      />\n    </View>\n  );\n};\n\nconst SurpriseScreen = () => {\n  const navigation = useNavigation();\n\n  const [textVisible, setTextVisible] = useState(false);\n\n  useEffect(() => {\n    navigation.addListener('transitionEnd', () => setTextVisible(true));\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {textVisible ? <Text>Surprise!</Text> : ''}\n    </View>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nexport const MyStack = () => {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Surprise\" component={SurpriseScreen} />\n    </Stack.Navigator>\n  );\n};\n"})})})]}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyStack.test.js"',children:"import { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyStack } from './MyStack';\n\njest.useFakeTimers();\n\ntest('shows surprise text after navigating to surprise screen', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyStack);\n\n  render(<Navigation />);\n\n  await user.press(screen.getByLabelText('Click here!'));\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Surprise!')).toBeVisible();\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyStack.test.js"',children:"import { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyStack } from './MyStack';\n\njest.useFakeTimers();\n\ntest('shows surprise text after navigating to surprise screen', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyStack />\n    </NavigationContainer>\n  );\n\n  await user.press(screen.getByLabelText('Click here!'));\n\n  act(() => jest.runAllTimers());\n\n  expect(screen.getByText('Surprise!')).toBeVisible();\n});\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"In the above test, we:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Render the ",(0,s.jsx)(t.code,{children:"MyStack"})," navigator within a ",(0,s.jsx)(t.a,{href:"/docs/navigation-container",children:"NavigationContainer"})," in our test."]}),"\n",(0,s.jsxs)(t.li,{children:["Get the button using the ",(0,s.jsx)(t.code,{children:"getByLabelText"})," query that matches its title."]}),"\n",(0,s.jsxs)(t.li,{children:["Press the button using ",(0,s.jsx)(t.code,{children:"userEvent.press(button)"})," to simulate a user interaction."]}),"\n",(0,s.jsxs)(t.li,{children:["Run all timers using ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"})," to skip animations (e.g. navigation animation between screens)."]}),"\n",(0,s.jsxs)(t.li,{children:["Assert that the ",(0,s.jsx)(t.code,{children:"Surprise!"})," text is visible after the transition to the Surprise screen is complete."]}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"fetching-data-with-usefocuseffect",children:["Fetching data with ",(0,s.jsx)(t.code,{children:"useFocusEffect"})]}),"\n",(0,s.jsx)(t.p,{children:"In this example, we have a bottom tab navigator with two tabs: Home and Pokemon. We will write a test that asserts the data fetching logic on focus in the Pokemon screen."}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.js"',children:"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useCallback, useState } from 'react';\nimport { Text, View } from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n}\n\nconst url = 'https://pokeapi.co/api/v2/pokemon/ditto';\n\nfunction PokemonScreen() {\n  const [profileData, setProfileData] = useState({ status: 'loading' });\n\n  useFocusEffect(\n    useCallback(() => {\n      if (profileData.status === 'success') {\n        return;\n      }\n\n      setProfileData({ status: 'loading' });\n\n      const controller = new AbortController();\n\n      const fetchUser = async () => {\n        try {\n          const response = await fetch(url, { signal: controller.signal });\n          const data = await response.json();\n\n          setProfileData({ status: 'success', data: data });\n        } catch (error) {\n          setProfileData({ status: 'error' });\n        }\n      };\n\n      fetchUser();\n\n      return () => {\n        controller.abort();\n      };\n    }, [profileData.status])\n  );\n\n  if (profileData.status === 'loading') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (profileData.status === 'error') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>An error occurred!</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>{profileData.data.name}</Text>\n    </View>\n  );\n}\n\nexport const MyTabs = createBottomTabNavigator({\n  screens: {\n    Home: HomeScreen,\n    Pokemon: PokemonScreen,\n  },\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.js"',children:"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { useCallback, useState } from 'react';\nimport { Text, View } from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home screen</Text>\n    </View>\n  );\n}\n\nconst url = 'https://pokeapi.co/api/v2/pokemon/ditto';\n\nfunction PokemonInfoScreen() {\n  const [profileData, setProfileData] = useState({ status: 'loading' });\n\n  useFocusEffect(\n    useCallback(() => {\n      if (profileData.status === 'success') {\n        return;\n      }\n\n      setProfileData({ status: 'loading' });\n\n      const controller = new AbortController();\n\n      const fetchUser = async () => {\n        try {\n          const response = await fetch(url, { signal: controller.signal });\n          const data = await response.json();\n\n          setProfileData({ status: 'success', data: data });\n        } catch (error) {\n          setProfileData({ status: 'error' });\n        }\n      };\n\n      fetchUser();\n\n      return () => {\n        controller.abort();\n      };\n    }, [profileData.status])\n  );\n\n  if (profileData.status === 'loading') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (profileData.status === 'error') {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>An error occurred!</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>{profileData.data.name}</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport function MyTabs() {\n  return (\n    <Tab.Navigator screenOptions={{ headerShown: false }}>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Pokemon\" component={PokemonScreen} />\n    </Tab.Navigator>\n  );\n}\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["To make the test deterministic and isolate it from the real backend, you can mock the network requests with a library such as ",(0,s.jsx)(t.a,{href:"https://mswjs.io/",children:"Mock Service Worker"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="msw-handlers.js"',children:"import { delay, http, HttpResponse } from 'msw';\n\nexport const handlers = [\n  http.get('https://pokeapi.co/api/v2/pokemon/ditto', async () => {\n    await delay(1000);\n\n    return HttpResponse.json({\n      id: 132,\n      name: 'ditto',\n    });\n  }),\n];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here we setup a handler that mocks responses from the API (for this example we're using ",(0,s.jsx)(t.a,{href:"https://pokeapi.co/",children:"Pok\xe9API"}),"). Additionally, we ",(0,s.jsx)(t.code,{children:"delay"})," the response by 1000ms to simulate a network request delay."]}),"\n",(0,s.jsx)(t.p,{children:"Then, we write a Node.js integration module to use the Mock Service Worker in our tests:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="msw-node.js"',children:"import { setupServer } from 'msw/node';\nimport { handlers } from './msw-handlers';\n\nconst server = setupServer(...handlers);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Refer to the documentation of the library to learn more about setting it up in your project - ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started",children:"Getting started"}),", ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/integrations/react-native",children:"React Native integration"}),"."]}),"\n",(0,s.jsxs)(r.Z,{groupId:"example",queryString:"example",children:[(0,s.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.test.js"',children:"import './msw-node';\n\nimport { expect, jest, test } from '@jest/globals';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('loads data on Pokemon info screen after focus', async () => {\n  const user = userEvent.setup();\n\n  const Navigation = createStaticNavigation(MyTabs);\n\n  render(<Navigation />);\n\n  const homeTabButton = screen.getByLabelText('Home, tab, 1 of 2');\n  const profileTabButton = screen.getByLabelText('Profile, tab, 2 of 2');\n\n  await user.press(profileTabButton);\n\n  expect(screen.getByText('Loading...')).toBeVisible();\n\n  await act(() => jest.runAllTimers());\n\n  expect(screen.getByText('ditto')).toBeVisible();\n\n  await user.press(homeTabButton);\n\n  await act(() => jest.runAllTimers());\n\n  await user.press(profileTabButton);\n\n  expect(screen.queryByText('Loading...')).not.toBeVisible();\n  expect(screen.getByText('ditto')).toBeVisible();\n});\n"})})}),(0,s.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="MyTabs.test.js"',children:"import './msw-node';\n\nimport { expect, jest, test } from '@jest/globals';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { act, render, screen, userEvent } from '@testing-library/react-native';\n\nimport { MyTabs } from './MyTabs';\n\njest.useFakeTimers();\n\ntest('loads data on Pokemon info screen after focus', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <NavigationContainer>\n      <MyTabs />\n    </NavigationContainer>\n  );\n\n  const homeTabButton = screen.getByLabelText('Home, tab, 1 of 2');\n  const profileTabButton = screen.getByLabelText('Profile, tab, 2 of 2');\n\n  await user.press(profileTabButton);\n\n  expect(screen.getByText('Loading...')).toBeVisible();\n\n  await act(() => jest.runAllTimers());\n\n  expect(screen.getByText('ditto')).toBeVisible();\n\n  await user.press(homeTabButton);\n\n  await act(() => jest.runAllTimers());\n\n  await user.press(profileTabButton);\n\n  expect(screen.queryByText('Loading...')).not.toBeVisible();\n  expect(screen.getByText('ditto')).toBeVisible();\n});\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"In the above test, we:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Assert that the ",(0,s.jsx)(t.code,{children:"Loading..."})," text is visible while the data is being fetched."]}),"\n",(0,s.jsxs)(t.li,{children:["Run all timers using ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"})," to skip delays in the network request."]}),"\n",(0,s.jsxs)(t.li,{children:["Assert that the ",(0,s.jsx)(t.code,{children:"ditto"})," text is visible after the data is fetched."]}),"\n",(0,s.jsx)(t.li,{children:"Press the home tab button to navigate to the home screen."}),"\n",(0,s.jsxs)(t.li,{children:["Run all timers using ",(0,s.jsx)(t.code,{children:"jest.runAllTimers()"})," to skip animations (e.g. animations in the ",(0,s.jsx)(t.code,{children:"Pressable"})," for the button)."]}),"\n",(0,s.jsx)(t.li,{children:"Press the profile tab button to navigate back to the Pokemon screen."}),"\n",(0,s.jsxs)(t.li,{children:["Ensure that cached data is shown by asserting that the ",(0,s.jsx)(t.code,{children:"Loading..."})," text is not visible and the ",(0,s.jsx)(t.code,{children:"ditto"})," text is visible."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["In a production app, we recommend using a library like ",(0,s.jsx)(t.a,{href:"https://react-query.tanstack.com/",children:"React Query"})," to handle data fetching and caching. The above example is for demonstration purposes only."]})})]})}function m(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5525:function(e,t,n){n.d(t,{Z:()=>r});var i=n("85893");n("67294");var s=n("67026");let a="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.Z)(a,r),hidden:n,children:t})}},47902:function(e,t,n){n.d(t,{Z:()=>b});var i=n("85893"),s=n("67294"),a=n("67026"),r=n("69599"),o=n("16550"),c=n("32000"),l=n("4520"),u=n("38341"),d=n("76009");function h(e){var t,n;return null!==(n=null===(t=s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function m(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var g=n("7227");let p="tabList__CuJ",x="tabItem_LNqP";function f(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:c}=e,l=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.o5)(),d=e=>{let t=e.currentTarget,n=c[l.indexOf(t)].value;n!==s&&(u(t),o(n))},h=e=>{var t,n;let i=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let n=l.indexOf(e.currentTarget)+1;i=null!==(t=l[n])&&void 0!==t?t:l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;i=null!==(n=l[t])&&void 0!==n?n:l[l.length-1]}}null==i||i.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:c.map(e=>{let{value:t,label:n,attributes:r}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>l.push(e),onKeyDown:h,onClick:d,...r,className:(0,a.Z)("tabs__item",x,null==r?void 0:r.className,{"tabs__item--active":s===t}),children:null!=n?n:t},t)})})}function v(e){let{lazy:t,children:n,selectedValue:r}=e,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=o.find(e=>e.props.value===r);return e?(0,s.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:o.map((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r}))})}function j(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:i}=e,a=function(e){let{values:t,children:n}=e;return(0,s.useMemo)(()=>{let e=null!=t?t:h(n).map(e=>{let{props:{value:t,label:n,attributes:i,default:s}}=e;return{value:t,label:n,attributes:i,default:s}});return!function(e){let t=(0,u.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(t.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[t,n])}(e),[r,g]=(0,s.useState)(()=>(function(e){var t;let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:i}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(n,'" but none of its children has the corresponding value. Available values are: ').concat(i.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return n}let s=null!==(t=i.find(e=>e.default))&&void 0!==t?t:i[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:t,tabValues:a})),[p,x]=function(e){let{queryString:t=!1,groupId:n}=e,i=(0,o.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n}),r=(0,l._X)(a);return[r,(0,s.useCallback)(e=>{if(!a)return;let t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})},[a,i])]}({queryString:n,groupId:i}),[f,v]=function(e){var t;let{groupId:n}=e;let i=(t=n)?"docusaurus.tab.".concat(t):null,[a,r]=(0,d.Nk)(i);return[a,(0,s.useCallback)(e=>{if(!!i)r.set(e)},[i,r])]}({groupId:i}),j=(()=>{let e=null!=p?p:f;return m({value:e,tabValues:a})?e:null})();return(0,c.Z)(()=>{j&&g(j)},[j]),{selectedValue:r,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:a}))throw Error("Can't select invalid tab value=".concat(e));g(e),x(e),v(e)},[x,v,a]),tabValues:a}}(e);return(0,i.jsxs)("div",{className:(0,a.Z)("tabs-container",p),children:[(0,i.jsx)(f,{...t,...e}),(0,i.jsx)(v,{...t,...e})]})}function b(e){let t=(0,g.Z)();return(0,i.jsx)(j,{...e,children:h(e.children)},String(t))}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return r}});var i=n(67294);let s={},a=i.createContext(s);function r(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);