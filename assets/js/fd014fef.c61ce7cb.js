"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["21817"],{44664:function(n,e,t){t.r(e),t.d(e,{metadata:()=>a,contentTitle:()=>l,default:()=>h,assets:()=>u,toc:()=>p,frontMatter:()=>s});var a=JSON.parse('{"id":"stack-actions","title":"StackActions reference","description":"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in CommonActions.","source":"@site/versioned_docs/version-7.x/stack-actions.md","sourceDirName":".","slug":"/stack-actions","permalink":"/docs/stack-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/stack-actions.md","tags":[],"version":"7.x","frontMatter":{"id":"stack-actions","title":"StackActions reference","sidebar_label":"StackActions"},"sidebar":"docs","previous":{"title":"CommonActions","permalink":"/docs/navigation-actions"},"next":{"title":"DrawerActions","permalink":"/docs/drawer-actions"}}'),o=t("85893"),i=t("50065"),r=t("47902"),c=t("5525");let s={id:"stack-actions",title:"StackActions reference",sidebar_label:"StackActions"},l=void 0,u={},p=[{value:"replace",id:"replace",level:3},{value:"push",id:"push",level:3},{value:"pop",id:"pop",level:3},{value:"popTo",id:"popto",level:3},{value:"popToTop",id:"poptotop",level:3}];function d(n){let e={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"StackActions"})," is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in ",(0,o.jsx)(e.a,{href:"/docs/navigation-actions",children:(0,o.jsx)(e.code,{children:"CommonActions"})}),"."]}),"\n",(0,o.jsx)(e.p,{children:"The following actions are supported:"}),"\n",(0,o.jsx)(e.h3,{id:"replace",children:"replace"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"replace"})," action allows to replace a route in the ",(0,o.jsx)(e.a,{href:"/docs/navigation-state",children:"navigation state"}),". It takes the following arguments:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"name"})," - ",(0,o.jsx)(e.em,{children:"string"})," - A destination name of the route that has been registered somewhere."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"params"})," - ",(0,o.jsx)(e.em,{children:"object"})," - Params to pass to the destination route."]}),"\n"]}),"\n",(0,o.jsxs)(r.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(c.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(e.pre,{"data-name":"Stack actions replace","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions replace" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  StackActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(c.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(e.pre,{"data-name":"Stack actions replace","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions replace" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  StackActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n          // codeblock-focus-end\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ navigation, route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["If you want to replace a particular route, you can add a ",(0,o.jsx)(e.code,{children:"source"})," property referring to the route key and ",(0,o.jsx)(e.code,{children:"target"})," property referring to the navigation state key:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...StackActions.replace('Profile', {\n    user: 'jane',\n  }),\n  source: route.key,\n  target: navigation.getState().key,\n});\n"})}),"\n",(0,o.jsxs)(e.p,{children:["If the ",(0,o.jsx)(e.code,{children:"source"})," property is explicitly set to ",(0,o.jsx)(e.code,{children:"undefined"}),", it'll replace the focused route."]}),"\n",(0,o.jsx)(e.h3,{id:"push",children:"push"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"push"})," action adds a route on top of the stack and navigates forward to it. This differs from ",(0,o.jsx)(e.code,{children:"navigate"})," in that ",(0,o.jsx)(e.code,{children:"navigate"})," will pop back to earlier in the stack if a route of the given name is already present there. ",(0,o.jsx)(e.code,{children:"push"})," will always add on top, so a route can be present multiple times."]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"name"})," - ",(0,o.jsx)(e.em,{children:"string"})," - Name of the route to push onto the stack."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"params"})," - ",(0,o.jsx)(e.em,{children:"object"})," - Screen params to pass to the destination route."]}),"\n"]}),"\n",(0,o.jsxs)(r.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(c.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(e.pre,{"data-name":"Stack actions push","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions push" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  StackActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n          // codeblock-focus-end\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(c.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(e.pre,{"data-name":"Stack actions push","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions push" snack',children:"import * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  StackActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n          // codeblock-focus-end\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ navigation, route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,o.jsx)(e.h3,{id:"pop",children:"pop"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"pop"})," action takes you back to a previous screen in the stack. It takes one optional argument (",(0,o.jsx)(e.code,{children:"count"}),"), which allows you to specify how many screens to pop back by."]}),"\n",(0,o.jsxs)(r.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(c.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(e.pre,{"data-name":"Stack actions pop","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions pop" snack',children:"import * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  StackActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.pop(1));\n          // codeblock-focus-end\n        }}\n      >\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(c.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(e.pre,{"data-name":"Stack actions pop","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions pop" snack',children:"import * as React from 'react';\nimport { Button } from '@react-navigation/elements';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  StackActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ navigation, route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.pop(1));\n          // codeblock-focus-end\n        }}\n      >\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button onPress={() => navigation.dispatch(StackActions.popToTop())}>\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,o.jsx)(e.h3,{id:"popto",children:"popTo"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"popTo"})," action takes you back to a previous screen in the stack by the name. It also allows you to pass params to the route."]}),"\n",(0,o.jsxs)(e.p,{children:["If a matching screen is not found in the stack, this will pop the current screen and add a new screen with the specified name and params - essentially behaving like a ",(0,o.jsx)(e.a,{href:"#replace",children:(0,o.jsx)(e.code,{children:"replace"})}),". This ensures that the app doesn't break if a previous screen with the name did not exist - which can happen when the screen was opened from a deep link or push notification, or when used on the web etc."]}),"\n",(0,o.jsx)(e.p,{children:"The method accepts the following arguments:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"name"})," - ",(0,o.jsx)(e.em,{children:"string"})," - Name of the route to navigate to."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"params"})," - ",(0,o.jsx)(e.em,{children:"object"})," - Screen params to pass to the destination route."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"options"})," - Options object containing the following properties:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"merge"})," - ",(0,o.jsx)(e.em,{children:"boolean"})," - Whether params should be merged with the existing route params, or replace them (when navigating to an existing screen). Defaults to ",(0,o.jsx)(e.code,{children:"false"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { StackActions } from '@react-navigation/native';\n\nconst popToAction = StackActions.popTo('Profile', { user: 'jane' });\n\nnavigation.dispatch(popToAction);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"poptotop",children:"popToTop"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"popToTop"})," action takes you back to the first screen in the stack, dismissing all the others. It's functionally identical to ",(0,o.jsx)(e.code,{children:"StackActions.pop({n: currentIndex})"}),"."]}),"\n",(0,o.jsxs)(r.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(c.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(e.pre,{"data-name":"Stack actions popToTop","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions popToTop" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  StackActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  const navigation = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.popToTop());\n          // codeblock-focus-end\n        }}\n      >\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator({\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Stack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(c.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(e.pre,{"data-name":"Stack actions pop","data-snack":"true",children:(0,o.jsx)(e.code,{className:"language-js",metastring:'name="Stack actions pop" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  StackActions,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push Profile on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(\n            StackActions.replace('Profile', { user: 'Wojtek' })\n          );\n        }}\n      >\n        Replace with Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ navigation, route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route.params.user}'s profile</Text>\n      <Button onPress={() => navigation.dispatch(StackActions.pop(1))}>\n        Pop one screen from stack\n      </Button>\n      <Button\n        onPress={() => {\n          navigation.dispatch(StackActions.push('Profile', { user: 'Wojtek' }));\n        }}\n      >\n        Push same screen on the stack\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(StackActions.popToTop());\n          // codeblock-focus-end\n        }}\n      >\n        Pop to top\n      </Button>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]})]})}function h(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},5525:function(n,e,t){t.d(e,{Z:()=>r});var a=t("85893");t("67294");var o=t("67026");let i="tabItem_Ymn6";function r(n){let{children:e,hidden:t,className:r}=n;return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:t,children:e})}},47902:function(n,e,t){t.d(e,{Z:()=>S});var a=t("85893"),o=t("67294"),i=t("67026"),r=t("69599"),c=t("16550"),s=t("32000"),l=t("4520"),u=t("38341"),p=t("76009");function d(n){var e,t;return null!==(t=null===(e=o.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,o.isValidElement)(n)&&function(n){let{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof n.type?n.type:n.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===e?void 0:e.filter(Boolean))&&void 0!==t?t:[]}function h(n){let{value:e,tabValues:t}=n;return t.some(n=>n.value===e)}var f=t("7227");let m="tabList__CuJ",g="tabItem_LNqP";function v(n){let{className:e,block:t,selectedValue:o,selectValue:c,tabValues:s}=n,l=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.o5)(),p=n=>{let e=n.currentTarget,t=s[l.indexOf(e)].value;t!==o&&(u(e),c(t))},d=n=>{var e,t;let a=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{let t=l.indexOf(n.currentTarget)+1;a=null!==(e=l[t])&&void 0!==e?e:l[0];break}case"ArrowLeft":{let e=l.indexOf(n.currentTarget)-1;a=null!==(t=l[e])&&void 0!==t?t:l[l.length-1]}}null==a||a.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},e),children:s.map(n=>{let{value:e,label:t,attributes:r}=n;return(0,a.jsx)("li",{role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,ref:n=>l.push(n),onKeyDown:d,onClick:p,...r,className:(0,i.Z)("tabs__item",g,null==r?void 0:r.className,{"tabs__item--active":o===e}),children:null!=t?t:e},e)})})}function k(n){let{lazy:e,children:t,selectedValue:r}=n,c=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){let n=c.find(n=>n.props.value===r);return n?(0,o.cloneElement)(n,{className:(0,i.Z)("margin-top--md",n.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:c.map((n,e)=>(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==r}))})}function x(n){let e=function(n){let{defaultValue:e,queryString:t=!1,groupId:a}=n,i=function(n){let{values:e,children:t}=n;return(0,o.useMemo)(()=>{let n=null!=e?e:d(t).map(n=>{let{props:{value:e,label:t,attributes:a,default:o}}=n;return{value:e,label:t,attributes:a,default:o}});return!function(n){let e=(0,u.lx)(n,(n,e)=>n.value===e.value);if(e.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(e.map(n=>n.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(n),n},[e,t])}(n),[r,f]=(0,o.useState)(()=>(function(n){var e;let{defaultValue:t,tabValues:a}=n;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:a}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(a.map(n=>n.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let o=null!==(e=a.find(n=>n.default))&&void 0!==e?e:a[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:e,tabValues:i})),[m,g]=function(n){let{queryString:e=!1,groupId:t}=n,a=(0,c.k6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:e,groupId:t}),r=(0,l._X)(i);return[r,(0,o.useCallback)(n=>{if(!i)return;let e=new URLSearchParams(a.location.search);e.set(i,n),a.replace({...a.location,search:e.toString()})},[i,a])]}({queryString:t,groupId:a}),[v,k]=function(n){var e;let{groupId:t}=n;let a=(e=t)?"docusaurus.tab.".concat(e):null,[i,r]=(0,p.Nk)(a);return[i,(0,o.useCallback)(n=>{if(!!a)r.set(n)},[a,r])]}({groupId:a}),x=(()=>{let n=null!=m?m:v;return h({value:n,tabValues:i})?n:null})();return(0,s.Z)(()=>{x&&f(x)},[x]),{selectedValue:r,selectValue:(0,o.useCallback)(n=>{if(!h({value:n,tabValues:i}))throw Error("Can't select invalid tab value=".concat(n));f(n),g(n),k(n)},[g,k,i]),tabValues:i}}(n);return(0,a.jsxs)("div",{className:(0,i.Z)("tabs-container",m),children:[(0,a.jsx)(v,{...e,...n}),(0,a.jsx)(k,{...e,...n})]})}function S(n){let e=(0,f.Z)();return(0,a.jsx)(x,{...n,children:d(n.children)},String(e))}},50065:function(n,e,t){t.d(e,{Z:function(){return c},a:function(){return r}});var a=t(67294);let o={},i=a.createContext(o);function r(n){let e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);