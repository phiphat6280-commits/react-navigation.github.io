"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["73291"],{294:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>c,default:()=>p,assets:()=>d,toc:()=>u,frontMatter:()=>l});var r=JSON.parse('{"id":"server-rendering","title":"Server rendering","description":"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We\'ll cover the following cases:","source":"@site/versioned_docs/version-7.x/server-rendering.md","sourceDirName":".","slug":"/server-rendering","permalink":"/docs/server-rendering","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/server-rendering.md","tags":[],"version":"7.x","frontMatter":{"id":"server-rendering","title":"Server rendering","sidebar_label":"Server rendering"},"sidebar":"docs","previous":{"title":"Web support","permalink":"/docs/web-support"},"next":{"title":"Screen tracking","permalink":"/docs/screen-tracking"}}'),o=t("85893"),i=t("50065"),a=t("47902"),s=t("5525");let l={id:"server-rendering",title:"Server rendering",sidebar_label:"Server rendering"},c=void 0,d={},u=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Rendering the app",id:"rendering-the-app",level:2},{value:"Handling 404 or other status codes",id:"handling-404-or-other-status-codes",level:2},{value:"Summary",id:"summary",level:2}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We'll cover the following cases:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Rendering the correct layout depending on the request URL"}),"\n",(0,o.jsx)(n.li,{children:"Setting appropriate page metadata based on the focused screen"}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Server rendering support is currently limited. It's not possible to provide a seamless SSR experience due to a lack of APIs such as media queries. In addition, many third-party libraries often don't work well with server rendering."})}),"\n",(0,o.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,o.jsx)(n.p,{children:"Before you follow the guide, make sure that your app already renders fine on server. To do that, you will need to ensure the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["All of the dependencies that you use are ",(0,o.jsx)(n.a,{href:"https://github.com/react-native-community/bob",children:"compiled before publishing"})," to npm, so that you don't get syntax errors on Node."]}),"\n",(0,o.jsxs)(n.li,{children:["Node is configured to be able to ",(0,o.jsx)(n.code,{children:"require"})," asset files such as images and fonts. You can try ",(0,o.jsx)(n.a,{href:"https://github.com/catamphetamine/webpack-isomorphic-tools",children:"webpack-isomorphic-tools"})," to do that."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"react-native"})," is aliased to ",(0,o.jsx)(n.code,{children:"react-native-web"}),". You can do it with ",(0,o.jsx)(n.a,{href:"https://github.com/tleunen/babel-plugin-module-resolver",children:"babel-plugin-module-resolver"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"rendering-the-app",children:"Rendering the app"}),"\n",(0,o.jsxs)(n.p,{children:["First, let's take a look at an example of how you'd do ",(0,o.jsx)(n.a,{href:"http://necolas.github.io/react-native-web/docs/?path=/docs/guides-server-side--page",children:"server rendering with React Native Web"})," without involving React Navigation:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { AppRegistry } from \'react-native-web\';\nimport ReactDOMServer from \'react-dom/server\';\nimport App from \'./src/App\';\n\nconst { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\nconst html = ReactDOMServer.renderToString(element);\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\nconst document = `\n  <!DOCTYPE html>\n  <html style="height: 100%">\n  <meta charset="utf-8">\n  <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n  <meta\n    name="viewport"\n    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n  >\n  ${css}\n  <body style="min-height: 100%">\n  <div id="root" style="display: flex; min-height: 100vh">\n  ${html}\n  </div>\n`;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"./src/App"})," is the file where you have ",(0,o.jsx)(n.code,{children:"AppRegistry.registerComponent('App', () => App)"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you're using React Navigation in your app, this will render the screens rendered by your home page. However, if you have ",(0,o.jsx)(n.a,{href:"/docs/configuring-links",children:"configured links"})," in your app, you'd want to render the correct screens for the request URL on server so that it matches what'll be rendered on the client."]}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.a,{href:"/docs/server-container",children:(0,o.jsx)(n.code,{children:"ServerContainer"})})," to do that by passing this info in the ",(0,o.jsx)(n.code,{children:"location"})," prop. For example, with Koa, you can use the ",(0,o.jsx)(n.code,{children:"path"})," and ",(0,o.jsx)(n.code,{children:"search"})," properties from the context argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={location}>{element}</ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You may also want to set the correct document title and descriptions for search engines, open graph etc. To do that, you can pass a ",(0,o.jsx)(n.code,{children:"ref"})," to the container which will give you the current screen's options."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer\n      ref={ref}\n      location={location}\n    >\n      {element}\n    </ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const options = ref.current?.getCurrentOptions();\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <title>${options.title}</title>\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Make sure that you have specified a ",(0,o.jsx)(n.code,{children:"title"})," option for your screens:"]}),"\n",(0,o.jsxs)(a.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(s.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const Stack = createNativeStackNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // highlight-next-line\n        title: 'My App',\n      },\n    },\n    Profile: {\n      screen: ProfileScreen,\n      options: ({ route }) => ({\n        // highlight-next-line\n        title: `${route.params.name}'s Profile`,\n      }),\n    },\n  },\n});\n"})})}),(0,o.jsx)(s.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'<Stack.Navigator>\n  <Stack.Screen\n    name="Home"\n    component={HomeScreen}\n    options={{\n      // highlight-next-line\n      title: \'My App\',\n    }}\n  />\n  <Stack.Screen\n    name="Profile"\n    component={ProfileScreen}\n    options={({ route }) => ({\n      // highlight-next-line\n      title: `${route.params.name}\'s Profile`,\n    })}\n  />\n</Stack.Navigator>\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"handling-404-or-other-status-codes",children:"Handling 404 or other status codes"}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.a,{href:"/docs/configuring-links#handling-unmatched-routes-or-404",children:"rendering a screen for an invalid URL"}),", we should also return a ",(0,o.jsx)(n.code,{children:"404"})," status code from the server."]}),"\n",(0,o.jsx)(n.p,{children:"First, we need to create a context where we'll attach the status code. To do this, place the following code in a separate file that we will be importing on both the server and client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\n\nconst StatusCodeContext = React.createContext();\n\nexport default StatusCodeContext;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, we need to use the context in our ",(0,o.jsx)(n.code,{children:"NotFound"})," screen. Here, we add a ",(0,o.jsx)(n.code,{children:"code"})," property with the value of ",(0,o.jsx)(n.code,{children:"404"})," to signal that the screen was not found:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"function NotFound() {\n  const status = React.useContext(StatusCodeContext);\n\n  if (status) {\n    staus.code = 404;\n  }\n\n  return (\n    <View>\n      <Text>Oops! This URL doesn't exist.</Text>\n    </View>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You could also attach additional information in this object if you need to."}),"\n",(0,o.jsxs)(n.p,{children:["Next, we need to create a status object to pass in the context on our server. By default, we'll set the ",(0,o.jsx)(n.code,{children:"code"})," to ",(0,o.jsx)(n.code,{children:"200"}),". Then pass the object in ",(0,o.jsx)(n.code,{children:"StatusCodeContext.Provider"})," which should wrap the element with ",(0,o.jsx)(n.code,{children:"ServerContainer"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// Create a status object\nconst status = { code: 200 };\n\nconst html = ReactDOMServer.renderToString(\n  // Pass the status object via context\n  <StatusCodeContext.Provider value={status}>\n    <ServerContainer ref={ref} location={location}>\n      {element}\n    </ServerContainer>\n  </StatusCodeContext.Provider>\n);\n\n// After rendering, get the status code and use it for server's response\nctx.status = status.code;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After we render the app with ",(0,o.jsx)(n.code,{children:"ReactDOMServer.renderToString"}),", the ",(0,o.jsx)(n.code,{children:"code"})," property of the ",(0,o.jsx)(n.code,{children:"status"})," object will be updated to be ",(0,o.jsx)(n.code,{children:"404"})," if the ",(0,o.jsx)(n.code,{children:"NotFound"})," screen was rendered."]}),"\n",(0,o.jsxs)(n.p,{children:["You can follow a similar approach for other status codes too, for example, ",(0,o.jsx)(n.code,{children:"401"})," for unauthorized etc."]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.code,{children:"location"})," prop on ",(0,o.jsx)(n.code,{children:"ServerContainer"})," to render correct screens based on the incoming request."]}),"\n",(0,o.jsxs)(n.li,{children:["Attach a ",(0,o.jsx)(n.code,{children:"ref"})," to the ",(0,o.jsx)(n.code,{children:"ServerContainer"})," get options for the current screen."]}),"\n",(0,o.jsx)(n.li,{children:"Use context to attach more information such as status code."}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},5525:function(e,n,t){t.d(n,{Z:()=>a});var r=t("85893");t("67294");var o=t("67026");let i="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.Z)(i,a),hidden:t,children:n})}},47902:function(e,n,t){t.d(n,{Z:()=>b});var r=t("85893"),o=t("67294"),i=t("67026"),a=t("69599"),s=t("16550"),l=t("32000"),c=t("4520"),d=t("38341"),u=t("76009");function h(e){var n,t;return null!==(t=null===(n=o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===n?void 0:n.filter(Boolean))&&void 0!==t?t:[]}function p(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var m=t("7227");let v="tabList__CuJ",g="tabItem_LNqP";function f(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:l}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),u=e=>{let n=e.currentTarget,t=l[c.indexOf(n)].value;t!==o&&(d(n),s(t))},h=e=>{var n,t;let r=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;r=null!==(n=c[t])&&void 0!==n?n:c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;r=null!==(t=c[n])&&void 0!==t?t:c[c.length-1]}}null==r||r.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:l.map(e=>{let{value:n,label:t,attributes:a}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>c.push(e),onKeyDown:h,onClick:u,...a,className:(0,i.Z)("tabs__item",g,null==a?void 0:a.className,{"tabs__item--active":o===n}),children:null!=t?t:n},n)})})}function x(e){let{lazy:n,children:t,selectedValue:a}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===a);return e?(0,o.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,i=function(e){let{values:n,children:t}=e;return(0,o.useMemo)(()=>{let e=null!=n?n:h(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(n.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[n,t])}(e),[a,m]=(0,o.useState)(()=>(function(e){var n;let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(r.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let o=null!==(n=r.find(e=>e.default))&&void 0!==n?n:r[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:n,tabValues:i})),[v,g]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t}),a=(0,c._X)(i);return[a,(0,o.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})},[i,r])]}({queryString:t,groupId:r}),[f,x]=function(e){var n;let{groupId:t}=e;let r=(n=t)?"docusaurus.tab.".concat(n):null,[i,a]=(0,u.Nk)(r);return[i,(0,o.useCallback)(e=>{if(!!r)a.set(e)},[r,a])]}({groupId:r}),j=(()=>{let e=null!=v?v:f;return p({value:e,tabValues:i})?e:null})();return(0,l.Z)(()=>{j&&m(j)},[j]),{selectedValue:a,selectValue:(0,o.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw Error("Can't select invalid tab value=".concat(e));m(e),g(e),x(e)},[g,x,i]),tabValues:i}}(e);return(0,r.jsxs)("div",{className:(0,i.Z)("tabs-container",v),children:[(0,r.jsx)(f,{...n,...e}),(0,r.jsx)(x,{...n,...e})]})}function b(e){let n=(0,m.Z)();return(0,r.jsx)(j,{...e,children:h(e.children)},String(n))}},50065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return a}});var r=t(67294);let o={},i=r.createContext(o);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);