"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["82650"],{10467:function(e,t,n){n.r(t),n.d(t,{metadata:()=>a,contentTitle:()=>l,default:()=>g,assets:()=>u,toc:()=>d,frontMatter:()=>c});var a=JSON.parse('{"id":"state-persistence","title":"State persistence","description":"You might want to save the user\'s location in the app, so that they are immediately returned to the same location after the app is restarted.","source":"@site/versioned_docs/version-7.x/state-persistence.md","sourceDirName":".","slug":"/state-persistence","permalink":"/docs/state-persistence","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/state-persistence.md","tags":[],"version":"7.x","frontMatter":{"id":"state-persistence","title":"State persistence","sidebar_label":"State persistence"},"sidebar":"docs","previous":{"title":"Themes","permalink":"/docs/themes"},"next":{"title":"Static and dynamic APIs","permalink":"/docs/combine-static-with-dynamic"}}'),i=n("85893"),r=n("50065"),s=n("47902"),o=n("5525");let c={id:"state-persistence",title:"State persistence",sidebar_label:"State persistence"},l=void 0,u={},d=[{value:"Usage",id:"usage",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Loading View",id:"loading-view",level:3},{value:"Warning: Serializable State",id:"warning-serializable-state",level:2}];function h(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"You might want to save the user's location in the app, so that they are immediately returned to the same location after the app is restarted."}),"\n",(0,i.jsx)(t.p,{children:"This is especially valuable during development because it allows the developer to stay on the same screen when they refresh the app."}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["To be able to persist the ",(0,i.jsx)(t.a,{href:"/docs/navigation-state",children:"navigation state"}),", we can use the ",(0,i.jsx)(t.code,{children:"onStateChange"})," and ",(0,i.jsx)(t.code,{children:"initialState"})," props of the container."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"onStateChange"})," - This prop notifies us of any state changes. We can persist the state in this callback."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"initialState"})," - This prop allows us to pass an initial state to use for ",(0,i.jsx)(t.a,{href:"/docs/navigation-state",children:"navigation state"}),". We can pass the restored state in this prop."]}),"\n"]}),"\n",(0,i.jsxs)(s.Z,{groupId:"config",queryString:"config",children:[(0,i.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,i.jsx)(t.pre,{"data-name":"Persisting the navigation state","data-snack":"true","data-dependencies":"@react-native-async-storage/async-storage",children:(0,i.jsx)(t.code,{className:"language-js",metastring:'name="Persisting the navigation state" snack dependencies=@react-native-async-storage/async-storage',children:"import * as React from 'react';\n// codeblock-focus-start\nimport { Platform, View, Linking } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\n// codeblock-focus-end\nimport { Button } from '@react-navigation/elements';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nfunction A() {\n  return <View />;\n}\n\nfunction B() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('C')}>Go to C</Button>\n    </View>\n  );\n}\n\nfunction C() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('D')}>Go to D</Button>\n    </View>\n  );\n}\n\nfunction D() {\n  return <View />;\n}\n\nconst HomeStackScreen = createNativeStackNavigator({\n  screens: {\n    A: A,\n  },\n});\n\nconst SettingsStackScreen = createNativeStackNavigator({\n  screens: {\n    B: B,\n    C: C,\n    D: D,\n  },\n});\n\nconst Tab = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeStackScreen,\n      options: {\n        headerShown: false,\n        tabBarLabel: 'Home!',\n      },\n    },\n    Settings: {\n      screen: SettingsStackScreen,\n      options: {\n        headerShown: false,\n        tabBarLabel: 'Settings!',\n      },\n    },\n  },\n});\n\nconst Navigation = createStaticNavigation(Tab);\n\n// codeblock-focus-start\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' && initialUrl == null) {\n          const savedState = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <Navigation\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    />\n  );\n}\n// codeblock-focus-end\n"})})}),(0,i.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,i.jsx)(t.pre,{"data-name":"Persisting the navigation state","data-snack":"true","data-dependencies":"@react-native-async-storage/async-storage",children:(0,i.jsx)(t.code,{className:"language-js",metastring:'name="Persisting the navigation state" snack dependencies=@react-native-async-storage/async-storage',children:"import * as React from 'react';\n// codeblock-focus-start\nimport { Platform, View, Linking } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\n// codeblock-focus-end\nimport { Button } from '@react-navigation/elements';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Tab = createBottomTabNavigator();\nconst HomeStack = createNativeStackNavigator();\nconst SettingsStack = createNativeStackNavigator();\n\nfunction A() {\n  return <View />;\n}\n\nfunction B() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('C')}>Go to C</Button>\n    </View>\n  );\n}\n\nfunction C() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('D')}>Go to D</Button>\n    </View>\n  );\n}\n\nfunction D() {\n  return <View />;\n}\n\nfunction HomeStackScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"A\" component={A} />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction SettingsStackScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen name=\"B\" component={B} />\n      <SettingsStack.Screen name=\"C\" component={C} />\n      <SettingsStack.Screen name=\"D\" component={D} />\n    </SettingsStack.Navigator>\n  );\n}\n\nfunction RootTabs() {\n  return (\n    <Tab.Navigator screenOptions={{ headerShown: false }}>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeStackScreen}\n        options={{ tabBarLabel: 'Home!' }}\n      />\n      <Tab.Screen\n        name=\"Settings\"\n        component={SettingsStackScreen}\n        options={{ tabBarLabel: 'Settings!' }}\n      />\n    </Tab.Navigator>\n  );\n}\n\n// codeblock-focus-start\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (initialUrl == null) {\n          // Only restore state if there's no deep link\n          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedStateString\n            ? JSON.parse(savedStateString)\n            : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer\n      initialState={initialState}\n      onStateChange={(state) =>\n        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\n      }\n    >\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n// codeblock-focus-end\n"})})})]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["It is recommended to use an ",(0,i.jsx)(t.a,{href:"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary",children:"error boundary"})," in your app and clear the persisted state if an error occurs. This will ensure that the app doesn't get stuck in an error state if a screen crashes."]})}),"\n",(0,i.jsx)(t.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,i.jsx)(t.p,{children:"This feature is particularly useful in development mode. You can enable it selectively using the following approach:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const [isReady, setIsReady] = React.useState(__DEV__ ? false : true);\n"})}),"\n",(0,i.jsx)(t.p,{children:"While it can be used for production as well, use it with caution as it can make the app unusable if the app is crashing on a particular screen - as the user will still be on the same screen after restarting. So if you are using it in production, make sure to clear the persisted state if an error occurs."}),"\n",(0,i.jsx)(t.h3,{id:"loading-view",children:"Loading View"}),"\n",(0,i.jsxs)(t.p,{children:["Because the state is restored asynchronously, the app must render an empty/loading view for a moment before we have the initial state. To handle this, we can return a loading view when ",(0,i.jsx)(t.code,{children:"isReady"})," is ",(0,i.jsx)(t.code,{children:"false"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"if (!isReady) {\n  return <ActivityIndicator />;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"warning-serializable-state",children:"Warning: Serializable State"}),"\n",(0,i.jsxs)(t.p,{children:["Each param, route, and navigation state must be fully serializable for this feature to work. Typically, you would serialize the state as a JSON string. This means that your routes and params must contain no functions, class instances, or recursive data structures. React Navigation already ",(0,i.jsx)(t.a,{href:"/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state",children:"warns you during development"})," if it encounters non-serializable data, so watch out for the warning if you plan to persist navigation state."]}),"\n",(0,i.jsxs)(t.p,{children:["You can modify the initial state object before passing it to container, but note that if your ",(0,i.jsx)(t.code,{children:"initialState"})," isn't a ",(0,i.jsx)(t.a,{href:"/docs/navigation-state#partial-state-objects",children:"valid navigation state"}),", React Navigation may not be able to handle the situation gracefully."]})]})}function g(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5525:function(e,t,n){n.d(t,{Z:()=>s});var a=n("85893");n("67294");var i=n("67026");let r="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.Z)(r,s),hidden:n,children:t})}},47902:function(e,t,n){n.d(t,{Z:()=>y});var a=n("85893"),i=n("67294"),r=n("67026"),s=n("69599"),o=n("16550"),c=n("32000"),l=n("4520"),u=n("38341"),d=n("76009");function h(e){var t,n;return null!==(n=null===(t=i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function g(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var f=n("7227");let p="tabList__CuJ",m="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:c}=e,l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{let t=e.currentTarget,n=c[l.indexOf(t)].value;n!==i&&(u(t),o(n))},h=e=>{var t,n;let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let n=l.indexOf(e.currentTarget)+1;a=null!==(t=l[n])&&void 0!==t?t:l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;a=null!==(n=l[t])&&void 0!==n?n:l[l.length-1]}}null==a||a.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:c.map(e=>{let{value:t,label:n,attributes:s}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>l.push(e),onKeyDown:h,onClick:d,...s,className:(0,r.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":i===t}),children:null!=n?n:t},t)})})}function S(e){let{lazy:t,children:n,selectedValue:s}=e,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=o.find(e=>e.props.value===s);return e?(0,i.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:o.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function b(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:a}=e,r=function(e){let{values:t,children:n}=e;return(0,i.useMemo)(()=>{let e=null!=t?t:h(n).map(e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}});return!function(e){let t=(0,u.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(t.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[t,n])}(e),[s,f]=(0,i.useState)(()=>(function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(n,'" but none of its children has the corresponding value. Available values are: ').concat(a.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return n}let i=null!==(t=a.find(e=>e.default))&&void 0!==t?t:a[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:t,tabValues:r})),[p,m]=function(e){let{queryString:t=!1,groupId:n}=e,a=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n}),s=(0,l._X)(r);return[s,(0,i.useCallback)(e=>{if(!r)return;let t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})},[r,a])]}({queryString:n,groupId:a}),[v,S]=function(e){var t;let{groupId:n}=e;let a=(t=n)?"docusaurus.tab.".concat(t):null,[r,s]=(0,d.Nk)(a);return[r,(0,i.useCallback)(e=>{if(!!a)s.set(e)},[a,s])]}({groupId:a}),b=(()=>{let e=null!=p?p:v;return g({value:e,tabValues:r})?e:null})();return(0,c.Z)(()=>{b&&f(b)},[b]),{selectedValue:s,selectValue:(0,i.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error("Can't select invalid tab value=".concat(e));f(e),m(e),S(e)},[m,S,r]),tabValues:r}}(e);return(0,a.jsxs)("div",{className:(0,r.Z)("tabs-container",p),children:[(0,a.jsx)(v,{...t,...e}),(0,a.jsx)(S,{...t,...e})]})}function y(e){let t=(0,f.Z)();return(0,a.jsx)(b,{...e,children:h(e.children)},String(t))}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var a=n(67294);let i={},r=a.createContext(i);function s(e){let t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);