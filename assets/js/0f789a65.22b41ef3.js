"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["96345"],{44216:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"1.x","label":"1.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-1.x","isLast":false,"docsSidebars":{"docs":[{"type":"category","label":"Fundamentals","items":[{"type":"link","label":"Getting started","href":"/docs/1.x/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Hello React Navigation","href":"/docs/1.x/hello-react-navigation","docId":"hello-react-navigation","unlisted":false},{"type":"link","label":"Supported React Native versions","href":"/docs/1.x/supported-react-native-versions","docId":"supported-react-native-versions","unlisted":false},{"type":"link","label":"Moving between screens","href":"/docs/1.x/navigating","docId":"navigating","unlisted":false},{"type":"link","label":"Passing parameters to routes","href":"/docs/1.x/params","docId":"params","unlisted":false},{"type":"link","label":"Configuring the header bar","href":"/docs/1.x/headers","docId":"headers","unlisted":false},{"type":"link","label":"Header buttons","href":"/docs/1.x/header-buttons","docId":"header-buttons","unlisted":false},{"type":"link","label":"Opening a full-screen modal","href":"/docs/1.x/modal","docId":"modal","unlisted":false},{"type":"link","label":"Next steps","href":"/docs/1.x/next-steps","docId":"next-steps","unlisted":false},{"type":"link","label":"Glossary of terms","href":"/docs/1.x/glossary-of-terms","docId":"glossary-of-terms","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"How do I do ...?","items":[{"type":"link","label":"Tab navigation","href":"/docs/1.x/tab-based-navigation","docId":"tab-based-navigation","unlisted":false},{"type":"link","label":"Drawer navigation","href":"/docs/1.x/drawer-based-navigation","docId":"drawer-based-navigation","unlisted":false},{"type":"link","label":"Authentication flows","href":"/docs/1.x/auth-flow","docId":"auth-flow","unlisted":false},{"type":"link","label":"iPhone X support","href":"/docs/1.x/handling-iphonex","docId":"handling-iphonex","unlisted":false},{"type":"link","label":"Different status bar configuration based on route","href":"/docs/1.x/status-bar","docId":"status-bar","unlisted":false},{"type":"link","label":"Custom Android back button behavior","href":"/docs/1.x/custom-android-back-button-handling","docId":"custom-android-back-button-handling","unlisted":false},{"type":"link","label":"Access the navigation prop from any component","href":"/docs/1.x/connecting-navigation-prop","docId":"connecting-navigation-prop","unlisted":false},{"type":"link","label":"Navigating without the navigation prop","href":"/docs/1.x/navigating-without-navigation-prop","docId":"navigating-without-navigation-prop","unlisted":false},{"type":"link","label":"Deep linking","href":"/docs/1.x/deep-linking","docId":"deep-linking","unlisted":false},{"type":"link","label":"Screen tracking","href":"/docs/1.x/screen-tracking","docId":"screen-tracking","unlisted":false},{"type":"link","label":"Redux integration","href":"/docs/1.x/redux-integration","docId":"redux-integration","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Build your own Navigator","items":[{"type":"link","label":"Overview","href":"/docs/1.x/custom-navigator-overview","docId":"custom-navigator-overview","unlisted":false},{"type":"link","label":"Routers","href":"/docs/1.x/routers","docId":"routers","unlisted":false},{"type":"link","label":"Custom navigators","href":"/docs/1.x/custom-navigators","docId":"custom-navigators","unlisted":false},{"type":"link","label":"Custom routers","href":"/docs/1.x/custom-routers","docId":"custom-routers","unlisted":false},{"type":"link","label":"Navigation views","href":"/docs/1.x/navigation-views","docId":"navigation-views","unlisted":false},{"type":"link","label":"Transitioner","href":"/docs/1.x/transitioner","docId":"transitioner","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Meta","items":[{"type":"link","label":"Pitch & anti-pitch","href":"/docs/1.x/pitch","docId":"pitch","unlisted":false},{"type":"link","label":"Alternative libraries","href":"/docs/1.x/alternatives","docId":"alternatives","unlisted":false},{"type":"link","label":"Contributing","href":"/docs/1.x/contributing","docId":"contributing","unlisted":false}],"collapsed":false,"collapsible":true}],"api":[{"type":"category","label":"API reference","items":[{"type":"link","label":"Overview","href":"/docs/1.x/api-reference","docId":"api-reference","unlisted":false},{"type":"link","label":"Navigation prop","href":"/docs/1.x/navigation-prop","docId":"navigation-prop","unlisted":false},{"type":"link","label":"NavigationActions","href":"/docs/1.x/navigation-actions","docId":"navigation-actions","unlisted":false},{"type":"link","label":"StackNavigator","href":"/docs/1.x/stack-navigator","docId":"stack-navigator","unlisted":false},{"type":"link","label":"SwitchNavigator","href":"/docs/1.x/switch-navigator","docId":"switch-navigator","unlisted":false},{"type":"link","label":"TabNavigator","href":"/docs/1.x/tab-navigator","docId":"tab-navigator","unlisted":false},{"type":"link","label":"DrawerNavigator","href":"/docs/1.x/drawer-navigator","docId":"drawer-navigator","unlisted":false},{"type":"link","label":"withNavigation","href":"/docs/1.x/with-navigation","docId":"with-navigation","unlisted":false},{"type":"link","label":"withNavigationFocus","href":"/docs/1.x/with-navigation-focus","docId":"with-navigation-focus","unlisted":false}],"collapsed":false,"collapsible":true}]},"docs":{"alternatives":{"id":"alternatives","title":"Alternative libraries","description":"React Navigation isn\'t your only option for routing and navigation in React Native. If the pitch & anti-pitch or the API design leave you wanting to explore other options, here are a few to consider.","sidebar":"docs"},"api-reference":{"id":"api-reference","title":"API Reference","description":"This section of the documentation describes the public API of React Navigation. It always refers to the latest version of the library.","sidebar":"api"},"auth-flow":{"id":"auth-flow","title":"Authentication flows","description":"Most apps require that a user authenticate in some way to have access to data associated with a user or other private content. Typically the flow will look like this:","sidebar":"docs"},"connecting-navigation-prop":{"id":"connecting-navigation-prop","title":"Access the navigation prop from any component","description":"withNavigation is a higher order component which passes the navigation prop into a wrapped Component. It\'s useful when you cannot pass the navigation prop into the component directly, or don\'t want to pass it in case of a deeply nested child.","sidebar":"docs"},"contributing":{"id":"contributing","title":"React Navigation contributor guide","description":"Want to help improve React Navigation? Your help would be greatly appreciated!","sidebar":"docs"},"custom-android-back-button-handling":{"id":"custom-android-back-button-handling","title":"Custom Android back button behavior","description":"By default, when user presses the Android hardware back button, react-navigation will pop a screen or exit the app if there are no screens to pop. This is a sensible default behavior, but there are situations when you might want to implement custom handling.","sidebar":"docs"},"custom-navigator-overview":{"id":"custom-navigator-overview","title":"Overview","description":"Navigators allow you to define your application\'s navigation structure. Navigators also render common elements such as headers and tab bars which you can configure.","sidebar":"docs"},"custom-navigators":{"id":"custom-navigators","title":"Custom navigators","description":"A navigator is any React component that has a router on it. Here is a basic one, which uses the router\'s API to get the active component to render:","sidebar":"docs"},"custom-routers":{"id":"custom-routers","title":"Custom routers","description":"You can make your own router by building an object with the following functions:","sidebar":"docs"},"customize-styles":{"id":"customize-styles","title":"Custom styles","description":"- talk about cardstyle"},"deep-linking":{"id":"deep-linking","title":"Deep linking","description":"In this guide we will set up our app to handle external URIs. Let\'s suppose that we want a URI like example://chat/Eric to open our app and link straight into a chat screen for some user named \\"Eric\\".","sidebar":"docs"},"drawer-based-navigation":{"id":"drawer-based-navigation","title":"Drawer navigation","description":"&rarr; Run this code","sidebar":"docs"},"drawer-navigator":{"id":"drawer-navigator","title":"DrawerNavigator reference","description":"RouteConfigs","sidebar":"api"},"getting-started":{"id":"getting-started","title":"Getting started","description":"React Navigation is born from the React Native community\'s need for an extensible yet easy-to-use navigation solution written entirely in JavaScript (so you can read and understand all of the source), on top of powerful native primitives.","sidebar":"docs"},"glossary-of-terms":{"id":"glossary-of-terms","title":"Glossary of terms","description":"This is a new section of the documentation and it\'s missing a lot of terms! Please submit a pull request or an issue with a term that you think should be explained here.","sidebar":"docs"},"handling-iphonex":{"id":"handling-iphonex","title":"iPhone X support","description":"By default React Navigation aids in ensuring your application displays correctly on the iPhoneX. It does so by using SafeAreaView inside of UI elements that may interact with the sensor cluster (\\"the notch\\") or the home activity indicator.","sidebar":"docs"},"header-buttons":{"id":"header-buttons","title":"Header buttons","description":"Now that we know how to customize the look of our headers, let\'s make them sentient! Actually perhaps that\'s ambitious, let\'s just make them able to respond to our touches in very well defined ways.","sidebar":"docs"},"headers":{"id":"headers","title":"Configuring the header bar","description":"By now you\'re probably tired of seeing a blank grey bar on the top of your screen &mdash; you\'re ready for some flair. So let\'s jump in to configuring the header bar.","sidebar":"docs"},"hello-react-navigation":{"id":"hello-react-navigation","title":"Hello React Navigation","description":"In a web browser, you can link to different pages using an anchor (``) tag. When the user clicks on a link, the URL is pushed to the browser history stack. When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page. React Native doesn\'t have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.","sidebar":"docs"},"listen-lifecycle-events":{"id":"listen-lifecycle-events","title":"Know when a screen is focused and blurred","description":"TODO: this"},"modal":{"id":"modal","title":"Opening a full-screen modal","description":"Dictionary.com provides no satisfactory definition of modal as it relates to user interfaces, but semantic UI describes it as follows:","sidebar":"docs"},"navigating":{"id":"navigating","title":"Moving between screens","description":"In the previous section, \\"Hello React Navigation\\", we defined a StackNavigator with two routes (Home and Details), but we didn\'t learn how to let a user navigate from Home to Details (although we did learn how to change the initial route in our code, but forcing our users to clone our repository and change the route in our code in order to see another screen is arguably among the worst user experiences one could imagine).","sidebar":"docs"},"navigating-without-navigation-prop":{"id":"navigating-without-navigation-prop","title":"Navigating without the navigation prop","description":"Calling functions such as navigate or popToTop on the navigation prop is not the only way to navigate around your app. As an alternative, you can dispatch navigation actions on your top-level navigator, provided you aren\'t passing your own navigation prop as you would with a redux integration. The presented approach is useful in situations when you want to trigger a navigation action from places where you do not have access to the navigation prop, or if you\'re looking for an alternative to using the navigation prop.","sidebar":"docs"},"navigation-actions":{"id":"navigation-actions","title":"NavigationActions reference","description":"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.","sidebar":"api"},"navigation-options":{"id":"navigation-options","title":"navigation-options","description":"Each screen can configure various aspects about how it gets presented in parent navigators. You can configure"},"navigation-prop":{"id":"navigation-prop","title":"Navigation prop reference","description":"Each screen component in your app is provided with the navigation prop automatically. It looks like this:","sidebar":"api"},"navigation-views":{"id":"navigation-views","title":"Navigation views","description":"Navigation views are presentation components that take a router and a navigation prop, and can display several screens, as specified by the navigation.state.","sidebar":"docs"},"next-steps":{"id":"next-steps","title":"Next steps","description":"You are now familiar with how to create a StackNavigator, configure it on your screen components, navigate between routes, and display full-screen modals. StackNavigator and its related APIs will be the most frequently used tools in your React Navigation toolbelt, but there are problems that they don\'t solve. For example, you can\'t build tab-based navigation using a StackNavigator &mdash; for that, you need to use a TabNavigator.","sidebar":"docs"},"params":{"id":"params","title":"Passing parameters to routes","description":"Now that we know how to create a StackNavigator with some routes and navigate between those routes, let\'s look at how we can pass data to routes when we navigate to them.","sidebar":"docs"},"partial-overlay":{"id":"partial-overlay","title":"Partial overlays","description":"like a tooltip, menu from navbar, etc."},"pitch":{"id":"pitch","title":"Pitch & anti-pitch","description":"It\'s useful when considering whether or not to use a project to understand the tradeoffs that the developers of the project made when building it. What problems does it explicitly try to solve for you, and which ones does it ignore? What are the current limitations of the project and common problems that people encounter? These are the kinds of questions that we believe you should have answers to when making an important technology decision for your project, and so we have documented answers to these questions as best we can here, in the form of a \\"pitch\\" (why you should use it) and \\"anti-pitch\\" (why you should not use it). Please submit a pull request if you believe we have omitted important information!","sidebar":"docs"},"redux-integration":{"id":"redux-integration","title":"Redux integration","description":"Some folks like to have their navigation state stored in the same place as the rest of their application state. Using Redux to store your state enables you to write custom actions that manipulate the navigation state directly, to be able to dispatch navigation actions from anywhere (sometimes in a \\"thunk\\" or \\"saga\\") and to persist the navigation state in the same way you would other Redux state (your mileage may vary on this). You can read more about other use cases in the replies to this tweet.","sidebar":"docs"},"routers":{"id":"routers","title":"Routers","description":"Routers define a component\'s navigation state, and they allow the developer to define paths and actions that can be handled.","sidebar":"docs"},"screen-tracking":{"id":"screen-tracking","title":"Screen tracking","description":"This example shows how to do screen tracking and send to Google Analytics. The approach can be adapted to any other analytics SDK.","sidebar":"docs"},"set-params-on-back":{"id":"set-params-on-back","title":"Update params when navigating back","description":""},"stack-navigator":{"id":"stack-navigator","title":"StackNavigator reference","description":"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.","sidebar":"api"},"status-bar":{"id":"status-bar","title":"Different status bar configuration based on route","description":"If you don\'t have a navigation header, or your navigation header changes color based on the route, you\'ll want to ensure that the correct color is used for the content.","sidebar":"docs"},"supported-react-native-versions":{"id":"supported-react-native-versions","title":"Supported React Native versions","description":"Currently at the time of writing, react-navigation@1.x will work on most of previous react-native versions.","sidebar":"docs"},"switch-navigator":{"id":"switch-navigator","title":"SwitchNavigator reference","description":"RouteConfigs","sidebar":"api"},"tab-based-navigation":{"id":"tab-based-navigation","title":"Tab navigation","description":"Possibly the most common style of navigation in mobile apps is tab-based navigation. This can be tabs on the bottom of the screen or on the top, below the header (or in place of the header).","sidebar":"docs"},"tab-navigator":{"id":"tab-navigator","title":"TabNavigator reference","description":"RouteConfigs","sidebar":"api"},"transitioner":{"id":"transitioner","title":"Transitioner","description":"Transitioner is a React component that helps manage transitions for complex animated components. It manages the timing of animations and keeps track of various screens as they enter and leave, but it doesn\'t know what anything looks like, because rendering is entirely deferred to the developer.","sidebar":"docs"},"with-navigation":{"id":"with-navigation","title":"withNavigation","description":"withNavigation is a higher order component which passes the navigation prop into a wrapped component. It\'s useful when you cannot pass the navigation prop into the component directly, or don\'t want to pass it in case of a deeply nested child.","sidebar":"api"},"with-navigation-focus":{"id":"with-navigation-focus","title":"withNavigationFocus","description":"withNavigationFocus is a higher order component which passes the isFocused prop into a wrapped component. It\'s useful if you need to use the focus state in the render function of your screen component or another component rendered somewhere inside of a screen.","sidebar":"api"}}}}')}}]);