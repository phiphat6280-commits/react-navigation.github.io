"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["35524"],{5865:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/01/29/using-react-navigation-with-native-bottom-tabs","metadata":{"permalink":"/blog/2025/01/29/using-react-navigation-with-native-bottom-tabs","source":"@site/blog/2025-01-29-using-react-navigation-with-native-bottom-tabs.md","title":"Bottom Tabs meet Native","description":"This is a guest post by Oskar Kwa\u015Bniewski, creator of react-native-bottom-tabs, a library exposing native tab primitives that integrates with React Navigation. If you like this guide, check out the react-native-bottom-tabs documentation for more!","date":"2025-01-29T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"react-native-paper","permalink":"/blog/tags/react-native-paper"}],"readingTime":4.005,"hasTruncateMarker":false,"authors":[{"name":"Oskar Kwa\u015Bniewski","title":"Callstack","socials":{"x":"https://x.com/o_kwasniewski","github":"https://github.com/okwasniewsk"},"imageURL":"https://avatars.githubusercontent.com/u/52801365","key":"oskar","page":null}],"frontMatter":{"title":"Bottom Tabs meet Native","authors":"oskar","tags":["tutorial","react-native-paper"]},"unlisted":false,"nextItem":{"title":"React Navigation 7.0","permalink":"/blog/2024/11/06/react-navigation-7.0"}},"content":"This is a guest post by Oskar Kwa\u015Bniewski, creator of `react-native-bottom-tabs`, a library exposing native tab primitives that integrates with React Navigation. If you like this guide, check out the `react-native-bottom-tabs` [documentation](https://callstackincubator.github.io/react-native-bottom-tabs/) for more!\\n\\nThis blog post will explain the differences between the JavaScript Bottom Tabs navigator and provide a step-by-step guide for integrating React Navigation with the Native Bottom Tabs Navigator.\\n\\n## Introduction\\n\\nReact Navigation comes with many navigators out of the box. We\'ve got Stack, Native Stack, Drawer, and Bottom Tabs, but there were no Native Bottom Tabs until today!\\n\\nBoth Android and iOS have predefined native components for handling bottom navigation. For iOS it\'s SwiftUI\'s `TabView` component and for Android it\'s `BottomNavigationView`. The native approach gives us an appropriate appearance no matter the platform we are running on. Native Bottom Tabs is a navigator that wraps the native `TabView` and `BottomNavigationView` - so you can use them with React Navigation.\\n\\nLet\'s dive into the details of this navigator.\\n\\nNote: Native Bottom Tabs navigator is a standalone package, not released as part of React Navigation.\\n\\n## Overview\\n\\nYou still might be wondering the difference between `@react-navigation/bottom-tabs` and `react-native-bottom-tabs`.\\n\\nLet\'s go over the main differences:\\n\\n- JS Bottom Tabs recreate the UI as closely as possible while **Native Bottom Tabs use native platform primitives** to create the tabs. This makes your tab navigation indistinguishable from Native Apps as they use the same components under the hood.\\n- Native Bottom Tabs **adapt to interfaces of a given platform** for example: tvOS and visionOS show tabs as a sidebar on iPadOS they appear at the top, while JS Bottom Tabs are always at the bottom.\\n\\n### Distinctive features of Native Bottom Tabs\\n\\n#### Multi-platform support\\n\\nNative Bottom tabs adapt to the appearance of multiple platforms. You always get natively-looking tabs!\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/ios.png\\" alt=\\"Native Tabs on iOS\\" />\\n\\nBottom Navigation on iOS, with native blur.\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/android.png\\" alt=\\"Native Tabs on Android\\" />\\n\\nBottom Navigation on Android, following Material Design 3 styling.\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/ipados.png\\" alt=\\"Native Tabs on iPadOS\\" />\\n\\nOn iPadOS tabs appear at the top with a button allowing you to go into the sidebar mode.\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/visionos.png\\" alt=\\"Native Tabs on visionOS\\" />\\n\\nOn visionOS, the tabs appear on the left side, attached outside of the window.\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/tvos.png\\" alt=\\"Native Tabs on tvOS\\" />\\n\\nOn tvOS tabs appear on the top, making navigation with the TV remote a breeze.\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/macos.png\\" alt=\\"Native Tabs on macOS\\" />\\n\\nOn macOS, tabs appear on the left side, following the design of the Finder app.\\n\\n#### Automatic scroll to the top\\n\\niOS TabView automatically scrolls to the top when ScrollView is embedded inside of it.\\n\\n#### Automatic PiP avoidance\\n\\nThe operating system recognizes navigation in your app making the Picture in Picture window automatically avoid bottom navigation.\\n\\n#### Platform-specific styling\\n\\nFor iOS bottom navigation has a built-in blur making your app stand out. For Android, you can choose between Material 2 and Material 3 and leverage Material You system styling.\\n\\n#### Sidebar\\n\\nTabView can turn in to a side bar on tvOS, iPadOS and macOS. The `sidebarAdaptable` prop controls this.\\n\\n## Getting started\\n\\nTo get started follow the installation instructions in the `react-native-bottom-tabs` [documentation](https://callstackincubator.github.io/react-native-bottom-tabs/docs/getting-started/quick-start.html).\\n\\nNative Bottom Tabs Navigation resembles JavaScript Tabs API as closely as possible. Making your migration straightforward.\\n\\nAs mentioned before, Native Bottom Tabs use native primitives to create the tabs. This approach also has some downsides: Native components enforce certain constraints that we need to follow.\\n\\nThere are a few differences between the APIs worth noting. One of the biggest is how native tabs handle images. In JavaScript tabs, you can render React components as icons, in native tabs unfortunately it\u2019s not possible. Instead, you have to provide one of the following options:\\n\\n```tsx\\n<Tab.Screen\\n  name=\\"Albums\\"\\n  component={Albums}\\n  options={{\\n    tabBarIcon: () => require(\'person.png\'),\\n    // SVG is also supported\\n    tabBarIcon: () => require(\'person.svg\'),\\n    // or\\n    tabBarIcon: () => ({ sfSymbol: \'person\' }),\\n    // You can also pass a URL\\n    tabBarIcon: () => ({ uri: \'https://example.com/icon.png\' }),\\n  }}\\n/>\\n```\\n\\nSo if you need full customizability like providing custom tab bar icons, and advanced styling that goes beyond what\u2019s possible with native components you should use JavaScript bottom tabs.\\n\\nOn top of that, the scope of this library doesn\u2019t include the web so for that platform, you should use JavaScript Tabs.\\n\\nTo get started you can import `createNativeBottomTabNavigator` from `@bottom-tabs/react-navigation` and use it the same way as JavaScript Bottom Tabs.\\n\\n### Example usage\\n\\n```tsx\\nimport { createNativeBottomTabNavigator } from \'@bottom-tabs/react-navigation\';\\n\\nconst Tabs = createNativeBottomTabNavigator();\\n\\nfunction NativeBottomTabs() {\\n  return (\\n    <Tabs.Navigator>\\n      <Tabs.Screen\\n        name=\\"index\\"\\n        options={{\\n          title: \'Home\',\\n          tabBarIcon: () => ({ uri: \'https://example.com/icon.png\' }),\\n        }}\\n      />\\n      <Tabs.Screen\\n        name=\\"explore\\"\\n        options={{\\n          title: \'Explore\',\\n          tabBarIcon: () => ({ uri: \'https://example.com/icon.png\' }),\\n        }}\\n      />\\n    </Tabs.Navigator>\\n  );\\n}\\n```\\n\\n<img src=\\"/assets/blog/native-bottom-tabs/result.png\\" alt=\\"Native Tabs\\" />\\n\\nYou can check out the project [here](https://github.com/callstackincubator/react-native-bottom-tabs).\\n\\nThanks for reading!"},{"id":"/2024/11/06/react-navigation-7.0","metadata":{"permalink":"/blog/2024/11/06/react-navigation-7.0","source":"@site/blog/2024-11-06-react-navigation-7.0.md","title":"React Navigation 7.0","description":"The documentation is now live at reactnavigation.org, and v6 lives here.","date":"2024-11-06T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.66,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"React Navigation 7.0","authors":"satya","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Bottom Tabs meet Native","permalink":"/blog/2025/01/29/using-react-navigation-with-native-bottom-tabs"},"nextItem":{"title":"React Navigation 7.0 Release Candidate","permalink":"/blog/2024/06/27/react-navigation-7.0-rc"}},"content":"The documentation is now live at [reactnavigation.org](/docs/getting-started), and v6 lives [here](/docs/6.x/getting-started).\\n\\nReact Navigation 7 aims to improve the developer experience with a new static API as well as bring many new features and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights\\n\\n- [**Static API**](/docs/hello-react-navigation?config=static): The new static API is an optional API that simplifies the configuration of navigators and makes it easier to work with TypeScript and deep linking.\\n- [**Preloading screens**](/docs/navigation-object/#preload): Many navigators now support preloading screens prior to navigating to them. This can be useful to improve the perceived performance of the app by preloading the screens that the user is likely to navigate to next.\\n- [**Layout props**](/docs/navigator#layout): Navigators and screens now support `layout` props to augment the navigators with additional UI and behavior.\\n- [**Improved Web integration**](/docs/web-support): The built in navigators now have better web-support such rendering anchor tags for more elements. The `Link` and `useLinkProps` APIs have also been revamped to use screen names instead of paths.\\n- [**Searchbar support in all navigators with header**](/docs/elements#headersearchbaroptions): All navigators with header now support a searchbar in the header. You can customize the searchbar using the `headerSearchBarOptions` option.\\n- [**New `useLogger` devtool to replace flipper plugin**](/docs/devtools#uselogger): The `use logger` hook can show navigation actions and state in the console for debugging.\\n- [**Sidebar support in Bottom Tab Navigator**](/docs/bottom-tab-navigator#tabbarposition): The Bottom Tab Navigator now supports showing tabs on the side by specifying `tabBarPosition` option as `\'left\'` or `\'right\'`.\\n- [**Animation support in Bottom Tab Navigator**](/docs/bottom-tab-navigator#animations): The Bottom Tab Navigator now supports animations when switching between tabs. You can customize the animation using the `animation` option.\\n- [**`react-native-drawer-layout` package**](/docs/drawer-layout): The drawer implementation used in `@react-navigation/drawer` is now available as a standalone package called `react-native-drawer-layout`.\\n- Many other improvements and bug fixes.\\n\\nSee our [blog post for the release candidate](/blog/2024-06-27-react-navigation-7.0-rc.md) for a more detailed list of highlights.\\n\\nTo see the full list of changes, check out the [upgrade guide](/docs/upgrading-from-6.x).\\n\\n## Upgrading\\n\\nIn addition to the new features and improvements, React Navigation 7 also includes a number of breaking changes. We\'ve put together a [detailed upgrade guide](/docs/upgrading-from-6.x) to help you migrate your app to the latest version.\\n\\n## Special thanks\\n\\nI\'d like to extend a big thank you to all the contributors who helped with this release. Your contributions are what make React Navigation great.\\n\\nI want to give a special shoutout to [Micha\u0142 Osadnik](https://x.com/mosdnk) for working through many of the features and improvements in this release as well as providing much-needed motivation.\\n\\nMany thanks to [Patrycja Kali\u0144ska](https://x.com/patkalinska) and [Ania Cichocka](https://github.com/AnCichocka) from [Software Mansion](https://swmansion.com/) for helping with the documentation.\\n\\nI\'d also like to thank [Tymoteusz Boba](https://x.com/tboba_), [Maciej Stosio](https://x.com/maciekstosio) and [Kacper Kafara](https://x.com/kafara_kacper) from the [React Native Screens](https://github.com/software-mansion/react-native-screens). React Navigation wouldn\'t be where it is today without React Native Screens.\\n\\nLast but not least, without dedicated time from [Callstack](https://callstack.com/), it would be impossible to maintain and improve React Navigation.\\n\\n## Sponsor us\\n\\nIf React Navigation helps you to deliver value to your customers, it\'d mean a lot if you could sponsor us. Sponsorships will help us to move more quickly towards our goal of building the best cross-platform navigation library and continue to provide timely support for bug reports in our GitHub issues.\\n\\n\uD83D\uDC49 [Visit our GitHub Sponsors page](https://github.com/sponsors/react-navigation) \uD83D\uDC48"},{"id":"/2024/06/27/react-navigation-7.0-rc","metadata":{"permalink":"/blog/2024/06/27/react-navigation-7.0-rc","source":"@site/blog/2024-06-27-react-navigation-7.0-rc.md","title":"React Navigation 7.0 Release Candidate","description":"We\'re excited to announce the release candidate of React Navigation 7.0.","date":"2024-06-27T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":3.145,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"React Navigation 7.0 Release Candidate","authors":"satya","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 7.0","permalink":"/blog/2024/11/06/react-navigation-7.0"},"nextItem":{"title":"Introducing Static API","permalink":"/blog/2024/03/25/introducing-static-api"}},"content":"We\'re excited to announce the release candidate of React Navigation 7.0.\\n\\nThis release includes a new static API that simplifies the configuration of navigators and improves TypeScript and deep linking support. As well as various other improvements and new features.\\n\\n\x3c!--truncate--\x3e\\n\\nYou can read the full list of changes in the [upgrade guide](/docs/upgrading-from-6.x). Here are some highlights:\\n\\n## Highlights\\n\\n### Static API\\n\\nThe new static API is an optional API that simplifies the configuration of navigators and makes it easier to work with TypeScript and deep linking.\\n\\nIt follows the same principles as the dynamic API, but instead of defining screens using functions, you define them using a configuration object, similar to React Navigation 4:\\n\\n```js\\nconst Stack = createStackNavigator({\\n  screens: {\\n    Home: {\\n      screen: Home,\\n    },\\n    Profile: {\\n      screen: Profile,\\n    },\\n    Settings: {\\n      screen: Settings,\\n    },\\n  },\\n});\\n```\\n\\nFor more details and examples, check out the [introduction to the static API](/blog/2024-03-25-introducing-static-api.md) blog post.\\n\\n### Preloading screens\\n\\nMany navigators now support preloading screens prior to navigating to them. This can be useful to improve the perceived performance of the app by preloading the screens that the user is likely to navigate to next. Preloading a screen will render it off-screen and execute its side-effects such as data fetching.\\n\\nTo preload a screen, you can use the `preload` method on the navigation object:\\n\\n```js\\nnavigation.preload(\'Details\', { id: 42 });\\n```\\n\\n### Sidebar support in Bottom Tab Navigator\\n\\nThe Bottom Tab Navigator now supports showing tabs on the side by specifying `tabBarPosition` option as `\'left\'` or `\'right\'`. This will make it easier to build responsive UIs for where you want to show tabs on the bottom on smaller screens and switch to a sidebar on larger screens.\\n\\n![Sidebar support in Bottom Tab Navigator](/assets/blog/7.x/bottom-tabs-sidebar.png)\\n\\n### Animation support in Bottom Tab Navigator\\n\\nThe Bottom Tab Navigator now supports animations when switching between tabs. You can customize the animation using the `animation` option.\\n\\n<video playsInline autoPlay muted loop>\\n  <source src=\\"/assets/7.x/bottom-tabs-shift.mp4\\" />\\n</video>\\n\\n### `react-native-drawer-layout` package\\n\\nThe drawer implementation used in `@react-navigation/drawer` is now available as a standalone package called `react-native-drawer-layout`. This makes it easier to use the drawer implementation even if you\'re not using React Navigation, or if you want to use it without a navigator.\\n\\nYou can install it with:\\n\\n```bash npm2yarn\\nnpm install react-native-drawer-layout@next\\n```\\n\\nSee [`react-native-drawer-layout`](/docs/drawer-layout) for usage.\\n\\n## Try it out\\n\\nIf you\'d like to try it out, add `@next` to the package, you\'re installing. For example:\\n\\n```sh npm2yarn\\nnpm install @react-navigation/native@next @react-navigation/bottom-tabs@next\\n```\\n\\nThis is the best time to try it out and provide feedback before the final release. If you encounter any issues or have any feedback or suggestions, please let us know on [GitHub issues](https://github.com/react-navigation/react-navigation/issues) or our [GitHub Discussions forum](https://github.com/react-navigation/react-navigation/discussions).\\n\\n## Special thanks\\n\\nI\'d like to extend a big thank you to all the contributors who helped with this release. Your contributions are what make React Navigation great.\\n\\nI want to give a special shoutout to [Micha\u0142 Osadnik](https://x.com/mosdnk) for working through many of the features and improvements in this release as well as providing much-needed motivation.\\n\\nMany thanks to [Patrycja Kali\u0144ska](https://x.com/patkalinska) from [Software Mansion](https://swmansion.com/) for helping with the documentation.\\n\\nI\'d also like to thank [Tymoteusz Boba](https://x.com/tboba_) and [Kacper Kafara](https://x.com/kafara_kacper) from the [React Native Screens](https://github.com/software-mansion/react-native-screens). React Navigation wouldn\'t be where it is today without React Native Screens.\\n\\nLast but not least, without dedicated time from [Callstack](https://callstack.com/), it would be impossible to maintain and improve React Navigation.\\n\\n## Sponsor us\\n\\nIf React Navigation helps you to deliver value to your customers, it\'d mean a lot if you could sponsor us. Sponsorships will help us to move more quickly towards our goal of building the best cross-platform navigation library and continue to provide timely support for bug reports in our GitHub issues.\\n\\n\uD83D\uDC49 [Visit our GitHub Sponsors page](https://github.com/sponsors/react-navigation) \uD83D\uDC48"},{"id":"/2024/03/25/introducing-static-api","metadata":{"permalink":"/blog/2024/03/25/introducing-static-api","source":"@site/blog/2024-03-25-introducing-static-api.md","title":"Introducing Static API","description":"Two of the major pain points of using React Navigation have been TypeScript and deep linking configuration. Due to the dynamic nature of the navigators, it is necessary to manually maintain the TypeScript and deep linking configuration to match the navigation structure. This can be error-prone and time-consuming.","date":"2024-03-25T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.445,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"Introducing Static API","authors":"satya","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 7.0 Release Candidate","permalink":"/blog/2024/06/27/react-navigation-7.0-rc"},"nextItem":{"title":"React Navigation 6.0","permalink":"/blog/2021/08/14/react-navigation-6.0"}},"content":"Two of the major pain points of using React Navigation have been TypeScript and deep linking configuration. Due to the dynamic nature of the navigators, it is necessary to manually maintain the TypeScript and deep linking configuration to match the navigation structure. This can be error-prone and time-consuming.\\n\\nTo solve this, we\u2019re adding a new static API to React Navigation 7. It\u2019s not the same API as React Navigation 4, but it\u2019s similar. Many apps don\u2019t need the features that the dynamic API provides, and they can use the simpler static API instead to simplify their codebase.\\n\\n\x3c!--truncate--\x3e\\n\\n:::note\\n\\nThe static API it\u2019s an additional optional API. The dynamic API isn\u2019t going away and will remain a first-class API of React Navigation. In fact, the static API is written entirely on top of the dynamic API.\\n\\n:::\\n\\n## Overview\\n\\nWith the dynamic API, first, we import a function such as `createStackNavigator`, and then we use it to define screens - each screen has a `name` and a `component`:\\n\\n```js\\nconst Stack = createStackNavigator();\\n\\nfunction RootStack() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Screen name=\\"Home\\" component={Home} />\\n      <Stack.Screen name=\\"Profile\\" component={Profile} />\\n      <Stack.Screen name=\\"Settings\\" component={Settings} />\\n    </Stack.Navigator>\\n  );\\n}\\n```\\n\\nThe static API follows the same principles. Here we are specifying screens in a property called `screens`, the name of the screen is a key in the configuration object and the value contains the component to render:\\n\\n```js\\nconst RootStack = createStackNavigator({\\n  screens: {\\n    Home: {\\n      screen: Home,\\n    },\\n    Profile: {\\n      screen: Profile,\\n    },\\n    Settings: {\\n      screen: Settings,\\n    },\\n  },\\n});\\n```\\n\\nThen after writing our navigation config, we call `createStaticNavigation` and render the returned component:\\n\\n```js\\nconst Navigation = createStaticNavigation(RootStack);\\n\\nfunction App() {\\n  return <Navigation />;\\n}\\n```\\n\\nThis component is similar to `NavigationContainer` and accepts most of the props accepted by `NavigationContainer`. So this is the place where you can do things like track for screen changes, persist navigation state etc.\\n\\nSee [Static API reference](/docs/static-configuration?config=static) for more details.\\n\\n## TypeScript\\n\\nThe typescript types can be inferred from the root navigator with the `StaticParamList` type and then they will be available anywhere you use `useNavigation`.\\n\\nThe only additional code we need to add is the code for the `RootParamList` interface:\\n\\n```js\\ndeclare global {\\n  namespace ReactNavigation {\\n    // highlight-next-line\\n    interface RootParamList extends StaticParamList<typeof RootStack> {}\\n  }\\n}\\n```\\n\\nSee [Type checking with TypeScript](/docs/typescript?config=static) for more details.\\n\\n## Deep Linking\\n\\nThere are 2 improvements to deep linking API:\\n\\n1. The linking configuration is now a part of the navigation configuration and can be specified next to the screen. This makes it easier to keep the linking configuration in sync with the navigation structure:\\n\\n   ```js\\n   const RootStack = createStackNavigator({\\n     screens: {\\n       Profile: {\\n         screen: ProfileScreen,\\n         // highlight-start\\n         linking: {\\n           path: \'user/:id\',\\n         },\\n         // highlight-end\\n       },\\n       Settings: {\\n         screen: SettingsScreen,\\n         // highlight-start\\n         linking: {\\n           path: \'settings\',\\n         },\\n         // highlight-end\\n       },\\n     },\\n   });\\n   ```\\n\\n2. Paths can be generated automatically from the screen names by specifying `enabled: \'auto\'`. This avoids the need to specify a path for every screen manually:\\n\\n   ```js\\n   const RootStack = createStackNavigator({\\n     screens: {\\n       // Generated path: \'\'\\n       Home: {\\n         screen: HomeScreen,\\n       },\\n       // Generated path: \'profile\'\\n       Profile: {\\n         screen: ProfileScreen,\\n       },\\n       // Generated path: \'news-feed\'\\n       NewsFeed: {\\n         screen: NewsFeedScreen,\\n       },\\n     },\\n   });\\n\\n   const Navigation = createStaticNavigation(RootStack);\\n\\n   function App() {\\n     return (\\n       <Navigation\\n         linking={{\\n           prefixes: [\'https://mychat.com\', \'mychat://\'],\\n           // highlight-next-line\\n           enabled: \'auto\',\\n         }}\\n       >\\n         <Navigation />\\n       </Navigation>\\n     );\\n   }\\n   ```\\n\\nSee [Configuring links](/docs/configuring-links?config=static) for more details.\\n\\n## Authentication Flow\\n\\nOne of the nice things about the dynamic APIs is the declarative authentication flow. You declaratively define which screens are available for logged-in and guest users, and React Navigation would handle showing the appropriate screens automatically. To keep a similar experience, we added some dynamism to the new static API with the if property:\\n\\n```js\\nconst RootStack = createNativeStackNavigator({\\n  screens: {\\n    Home: {\\n      if: useIsSignedIn,\\n      screen: HomeScreen,\\n    },\\n    SignIn: {\\n      if: useIsSignedOut,\\n      screen: SignInScreen,\\n    },\\n  },\\n});\\n```\\n\\nThe if property takes a hook that returns a boolean. When the hook returns true, the screen will be included in the navigation tree, and when it returns false, it won\u2019t be included.\\n\\nSee [Authentication flows](/docs/auth-flow?config=static) for more details.\\n\\n## Interoperability\\n\\nSince we have 2 different APIs in the same library, it\'s important that they both work together. This way you could start an app with the static API, but if you need flexibility for a specific navigator, you could use the dynamic API for that part. Or you may want to migrate to the static API to reduce the complexity, and with the interoperability, you can do that incrementally.\\n\\nSee [Combining static and dynamic APIs](/docs/combine-static-with-dynamic) for more details.\\n\\n## Help us test\\n\\nThe Static API is currently available in React Navigation 7 alpha. You can try it out by installing the `next` tag of the React Navigation packages:\\n\\n```sh\\nyarn add @react-navigation/native@next @react-navigation/native-stack@next\\n```\\n\\nIn addition to the static API, React Navigation 7 also includes a lot of other improvements and new features. Make sure to go through the [upgrade guide](/docs/upgrading-from-6.x) to see all the changes.\\n\\nWe would love to get feedback from the community on how it works for you and catch any issues before the stable release. If you have any feedback or suggestions, please let us know on our [GitHub Discussions forum](https://github.com/react-navigation/react-navigation/discussions). If you find any issues, please report them on our [GitHub issues](https://github.com/react-navigation/react-navigation/issues)."},{"id":"/2021/08/14/react-navigation-6.0","metadata":{"permalink":"/blog/2021/08/14/react-navigation-6.0","source":"@site/blog/2021-08-14-react-navigation-6.0.md","title":"React Navigation 6.0","description":"The documentation is now live at reactnavigation.org, and v5 lives here.","date":"2021-08-14T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":5.65,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"React Navigation 6.0","authors":"satya","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"Introducing Static API","permalink":"/blog/2024/03/25/introducing-static-api"},"nextItem":{"title":"On the way to React Navigation 6.0","permalink":"/blog/2021/03/12/react-navigation-6.0-next"}},"content":"The documentation is now live at [reactnavigation.org](https://reactnavigation.org/6.x/getting-started), and v5 lives [here](/docs/5.x/getting-started).\\n\\nReact Navigation 6 keeps mostly the same core API as React Navigation 5, and you can think of it as further polishing what was in React Navigation 5. Let\'s talk about the highlights of this release in this blog post.\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights\\n\\n### More flexible navigators\\n\\nNavigators accept many of their customization options as props, which means we can\u2019t customize them based on the active screen. To make this level of control possible, we needed to move these props to options that you can configure per screen.\\n\\nIn React Navigation 6, many of these props are now screen options. The most significant changes are `tabBarOptions` and `drawerContentOptions`, which now all live on `options` instead. For example:\\n\\n```js\\n// Before (v5)\\n<Tab.Navigator\\n  tabBarOptions={{\\n    inactiveTintColor: \'rgba(255, 255, 255, 0.5)\',\\n    activeTintColor: \'#fff\',\\n    style: {\\n      position: \'absolute\',\\n      borderTopColor: \'rgba(0, 0, 0, .2)\',\\n    },\\n  }}\\n>\\n```\\n\\n```js\\n// After (v6)\\n<Tab.Navigator\\n  screenOptions={{\\n    tabBarInactiveTintColor: \'rgba(255, 255, 255, 0.5)\',\\n    tabBarActiveTintColor: \'#fff\',\\n    tabBarStyle: {\\n      position: \'absolute\',\\n      borderTopColor: \'rgba(0, 0, 0, .2)\',\\n    },\\n  }}\\n>\\n```\\n\\nSee [deprecations](/docs/6.x/upgrading-from-5.x#deprecations) for more details.\\n\\n### Elements library\\n\\nWe extracted some of the components and helpers used across various navigators in React Navigation and published them under a new package called [`@react-navigation/elements`](/docs/6.x/elements). It can be useful if you\'re building your own navigator, or just want to reuse some of the components in your app.\\n\\nCurrently only a small set of components are exported, but there are more to come.\\n\\n### Simplified APIs for existing functionality\\n\\nWe simplified many APIs with React Navigation 6 to address common use cases. For example:\\n\\n- Single option to use a modal presentation style and transparent modal with [`presentation`](/docs/6.x/stack-navigator#presentation)\\n- Custom header doesn\'t require setting `headerMode=\\"screen\\"` manually anymore\\n- The `useHeaderHeight` hook now ignores hidden headers and returns the height of the closest visible header in parent\\n- New option to set a [custom background](/docs/6.x/bottom-tab-navigator#tabbarbackground) (such as `BlurView`) for tab bar without having to use a custom tab bar\\n- New API to manage ref on the container [(`createNavigationContainerRef` and `useNavigationContainerRef`)](/docs/6.x/navigating-without-navigation-prop)\\n\\n### New `Group` component for organization\\n\\nThe [`Group`](/docs/6.x/group) component helps you organize screens inside your navigators and share common `screenOptions` between the `Group`s. Passing `screenOptions` to a group configures all the screens inside that group to use these options. You can override `Group` options by passing `options` to each Screen component, similar to how you can with `screenOptions` on Navigator. You can also nest `Group` components inside other `Group` components. They are lightweight and don\u2019t render anything - like fragments, so they won\u2019t affect performance.\\n\\nIn this code snippet, you can see that we group regular screens under one group and modal screens under another group:\\n\\n```js\\nfunction App() {\\n  return (\\n    <Stack.Navigator>\\n      <Stack.Group>\\n        <Stack.Screen name=\\"Home\\" component={HomeScreen} />\\n        <Stack.Screen name=\\"Details\\" component={DetailsScreen} />\\n      </Stack.Group>\\n      <Stack.Group screenOptions={{ presentation: \'modal\' }}>\\n        <Stack.Screen name=\\"CreatePost\\" component={CreatePostScreen} />\\n      </Stack.Group>\\n    </Stack.Navigator>\\n  );\\n}\\n```\\n\\n### Headers by default in Bottom Tabs & Drawer\\n\\nDevelopers often want to show a header for screens inside of drawers and bottom tabs. To do this, we had to nest a stack navigator which provides a header, even if it was a navigator with just one screen. So we now show headers by default in screens of drawer and bottom tabs. No nesting necessary.\\n\\nWe also export a [`Header`](/docs/6.x/elements#header) component in the new elements library to use anywhere in your components.\\n\\n### Native navigation by default\\n\\nHistorically, React Navigation has been mostly JS based, with animations and gestures written in JavaScript on top of `react-native-gesture-handler`, and `react-native-reanimated` or `Animated`. While this works for a lot of apps, apps with heavy screens can suffer from poor performance, and some native features are difficult to re-create exactly (such as the large header on iOS). So, we wanted to address this by using native primitives for navigation.\\n\\nWith React Navigation 5, we introduced [`@react-navigation/native-stack`](/docs/6.x/native-stack-navigator) package powered by [`react-native-screens`](https://github.com/software-mansion/react-native-screens), as well as a native backend for [`@react-navigation/material-top-tabs`](/docs/6.x/material-top-tab-navigator) powered by [`react-native-pager-view`](https://github.com/callstack/react-native-pager-view).\\n\\nIn React Navigation 6, we made `@react-navigation/native-stack` the default choice for setting up Stack navigation. It uses `UINavigationController` on iOS and Fragments on Android to implement navigation natively. We also focused a lot on aligning the API of `@react-navigation/native-stack` with `@react-navigation/stack` so that it\u2019ll be easier to switch between them.\\n\\n> While `@react-navigation/native-stack` is now used as the default choice in the documentation, it doesn\'t replace `@react-navigation/stack`. Both packages are maintained and are valid options for your projects. If you\'re currently using `@react-navigation/stack`, you can keep using it. You don\'t need to move to `@react-navigation/native-stack` unless you really want to.\\n\\nSimilarly, we switched `@react-navigation/material-top-tabs` to use `react-native-pager-view` by default.\\n\\n### Better type-safety\\n\\nReact Navigation 5\u2019s TypeScript support was much better than React Navigation 4; but, some things such as `useNavigation` were still untyped by default.\\n\\nIn React Navigation 6, you don\u2019t need to annotate `useNavigation` to get autocompletion and type checking. This is possible by defining a type for the screens globally using declaration merging:\\n\\n```js\\ndeclare global {\\n  namespace ReactNavigation {\\n    interface RootParamList {\\n      Home: undefined;\\n      Profile: { userId: string };\\n      NotFound: undefined;\\n    }\\n  }\\n}\\n```\\n\\nYou can read [more about it in our TypeScript docs](/docs/6.x/typescript#specifying-default-types-for-usenavigation-link-ref-etc).\\n\\n### Flipper plugin\\n\\nOur new [Flipper](https://fbflipper.com/) plugin includes similar functionality to the currently available Redux Devtools Extensions integration. You can see all navigation actions, and jump back and forth between earlier and new navigation states. In addition, it also includes a tab to test your linking configuration.\\n\\nSince the dev tools is built from scratch, we\u2019re now free to add new features to make debugging easier in future.\\n\\nOne advantage of the Flipper plugin over Redux Devtools Extension is that it doesn\u2019t need Chrome Debugger to work. Since Chrome Debugger can sometimes affect performance and even potentially change behavior, we think this is a more reliable solution.\\n\\n![React Navigation Logs](/assets/devtools/flipper-plugin-logs.png)\\n\\n![React Navigation Linking](/assets/devtools/flipper-plugin-linking.png)\\n\\nSee the [guide for setting it up](/docs/6.x/devtools#useflipper) for more details. Note that Flipper support in Expo managed apps requires a [Custom Development Client](https://docs.expo.dev/clients/introduction/) and it does not work in Expo Go at the time of writing.\\n\\n## Upgrading\\n\\nWhile React Navigation 6 doesn\'t introduce changes of the same magnitude as React Navigation 5, there are still some breaking changes. It is possible, however, to mix packages from React Navigation 5 and React Navigation 6 (with a few caveats) so that you can gradually upgrade packages.\\n\\nSee the [upgrade guide](/docs/6.x/upgrading-from-5.x) for a full list of changes and more details.\\n\\n## Sponsor us\\n\\nIf React Navigation helps you to deliver value to your customers, it\'d awesome a lot if you could sponsor us. Sponsorships will help us to move more quickly towards our goal of building the best cross-platform navigation library and continue to provide timely support for bug reports in our GitHub issues.\\n\\n\uD83D\uDC49 [Visit our GitHub Sponsors page](https://github.com/sponsors/react-navigation) \uD83D\uDC48"},{"id":"/2021/03/12/react-navigation-6.0-next","metadata":{"permalink":"/blog/2021/03/12/react-navigation-6.0-next","source":"@site/blog/2021-03-12-react-navigation-6.0-next.md","title":"On the way to React Navigation 6.0","description":"We\'re excited to announce that we finally have a prerelease version of React Navigation 6. We released React Navigation 5 more than half a year ago, and it brought a lot of new possibilities with the new dynamic API, and was met with overwhelmingly positive reaction. Since then, we\'ve been working on incremental improvements and refinements to the library and thinking about how to make it even better. This brings us to the next major version of React Navigation.","date":"2021-03-12T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.255,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"On the way to React Navigation 6.0","authors":"satya","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 6.0","permalink":"/blog/2021/08/14/react-navigation-6.0"},"nextItem":{"title":"React Navigation joins GitHub Sponsors","permalink":"/blog/2020/05/19/joining-github-sponsors"}},"content":"We\'re excited to announce that we finally have a prerelease version of React Navigation 6. We released React Navigation 5 more than half a year ago, and it brought a lot of new possibilities with the new dynamic API, and was met with overwhelmingly positive reaction. Since then, we\'ve been working on incremental improvements and refinements to the library and thinking about how to make it even better. This brings us to the next major version of React Navigation.\\n\\n\x3c!--truncate--\x3e\\n\\nWhile React Navigation 5 was complete overhaul to the API of React Navigation, React Navigation 6 keeps the same API, with some breaking changes to make things more consistent and provide more flexibility. We also tried to address some common pain points and confusions that users had.\\n\\nWe\'ll share few highlights of the release in this blog post. If you\'re looking for a detailed upgrade guide, you can find it [here](/docs/6.x/upgrading-from-5.x).\\n\\n## Highlights\\n\\n- Params are now overwritten on navigation instead of merging (with option to merge them)\\n- Modals in [stack](/docs/6.x/stack-navigator) now use the presentation style on iOS by default, and there\'s a new slide animation for modals on Android\\n- [Drawer](/docs/6.x/drawer-navigator) now uses a slide animation by default on iOS\\n- Headers are now shown by default in [drawer](/docs/6.x/drawer-navigator) and [bottom tab](/docs/6.x/bottom-tab-navigator) screens, so you don\'t need extra stack navigators\\n- We got rid of `tabBarOptions`, `drawerContentOptions` etc. and moved those to [`options` prop on screen](/docs/6.x/screen-options) to make it possible to configure them per screen\\n- [Material Top Tabs](/docs/6.x/material-top-tab-navigator) now use a `ViewPager` based implementation, which means it\'ll provide a native experience\\n- We now have a [UI elements library](/docs/6.x/elements) which contains various components we use in React Navigation\\n\\n## Try it out\\n\\nIf you\'d like to try it out, add `@^6.x` to the package, you\'re installing. For example:\\n\\n```bash npm2yarn\\nnpm install @react-navigation/native@^6.x @react-navigation/stack@^6.x\\n```\\n\\n## What\'s next?\\n\\nWe\'re planning to update our documentation to recommend [native-stack](/docs/6.x/native-stack-navigator) as the default. This will provide the best performance for people who don\'t need a lot of customization, while still having the option to use the JavaScript based implementation if they need it.\\n\\n## Sponsor us\\n\\nIf React Navigation helps you to deliver value to your customers, it\'d mean a lot if you could sponsor us. Sponsorships will help us to move more quickly towards our goal of building the best cross-platform navigation library and continue to provide timely support for bug reports in our GitHub issues.\\n\\n\uD83D\uDC49 [Visit our GitHub Sponsors page](https://github.com/sponsors/react-navigation) \uD83D\uDC48\\n\\n---\\n\\nWe hope you find this release useful. Make sure to try the release out and provide feedback on what we can improve. You can open an issue in the [GitHub rep](https://github.com/react-navigation/react-navigation) or tweet to us [@reactnavigation](https://twitter.com/reactnavigation)."},{"id":"/2020/05/19/joining-github-sponsors","metadata":{"permalink":"/blog/2020/05/19/joining-github-sponsors","source":"@site/blog/2020-05-19-joining-github-sponsors.md","title":"React Navigation joins GitHub Sponsors","description":"We joined GitHub Sponsors - https://github.com/sponsors/react-navigation!","date":"2020-05-19T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":3.315,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"React Navigation joins GitHub Sponsors","description":"We joined GitHub Sponsors - https://github.com/sponsors/react-navigation!","authors":"brent","tags":["announcement","web"]},"unlisted":false,"prevItem":{"title":"On the way to React Navigation 6.0","permalink":"/blog/2021/03/12/react-navigation-6.0-next"},"nextItem":{"title":"React Navigation on the Web","permalink":"/blog/2020/05/16/web-support"}},"content":"tl;dr: We joined GitHub Sponsors, [click here to see our sponsors page and become a sponsor](https://github.com/sponsors/react-navigation)!\\n\\n<hr />\\n\\nReact Navigation is depended on by some of the most respected engineering organizations, well-known brands, and talented startups. It\'s used by financial services apps like [Brex](https://brex.com/mobile/) and [Coinbase Pro](https://pro.coinbase.com/); educational apps like [Codecademy Go](https://www.codecademy.com/mobile-app-download) and [DataCamp](https://www.datacamp.com/mobile/); consumer apps like [Shop from Shopify](https://www.shopify.com/shop), [Bloomberg](https://www.bloombergapps.com/app/bloomberg/), [TaskRabbit](https://apps.apple.com/ca/app/taskrabbit-handyman-more/id374165361), and [Th3rdwave](https://www.th3rdwave.coffee/); entertainment apps like the [National Football League (NFL)](https://itunes.apple.com/app/nfl/id389781154) (in their main app and several others), [Cameo](https://apps.apple.com/us/app/cameo-personal-celeb-videos/id1258311581), [Tracker Network for Fortnite](https://apps.apple.com/us/app/tracker-network-for-fortnite/id1287696482), and the [Call of Duty companion app](https://www.callofduty.com/app) from Activision Blizzard. One of my personal favourite apps using React Navigation is [Readwise](https://readwise.io/), I love making my coffee with [Single Origin 2](https://singleoriginapp.com/), and managing household chores with [Sweepy](https://sweepy.app/).\\n\\nWe\'ve also seen React Navigation used in apps that help in the fight against COVID-19. Our favourites are [How We Feel](https://howwefeel.org/) by Pinterest co-founder and CEO Ben Silbermann and a team from Pinterest in collaboration with leading scientists ([article](https://news.harvard.edu/gazette/story/2020/04/how-we-feel-app-helps-track-spread-of-covid-19/)) and [COVID Symptom Study](https://covid.joinzoe.com/) by ZOE Global in association with King\'s College London ([article](https://www.nytimes.com/2020/05/11/health/coronavirus-symptoms-app.html)).\\n\\n\x3c!--truncate--\x3e\\n\\nThere are so many more apps that we could mention here, but let\'s move on. If you\'ve been following along with React Navigation, you already know what a huge improvement v5 has been for the library and for navigation in React Native in general. We haven\'t slowed down since shipping v5, some other substantial improvements we\'ve shipped recently include:\\n\\n- [First-class support for web](https://reactnavigation.org/blog/2020/05/16/web-support) \uD83C\uDF89\\n- The improvements to URL integration that made web support possible also drastically improves the experience of building deep linking in your iOS and Android apps! You can play around with route configuration directly in the browser with the [linking playground](/docs/configuring-links#playground).\\n- An alternative stack navigator implementation that uses `UINavigationController` on iOS and `Fragment` on Android. There is no beating the performance of the native stack navigator equivalents (at least for now), and so we made them available through [createNativeStackNavigator](https://github.com/software-mansion/react-native-screens/tree/master/native-stack) on [react-native-screens](https://github.com/software-mansion/react-native-screens). You don\'t get the same degree of customization with the native stacks, and there is no equivalent on web, so there are plenty of cases where you will still want to use [createStackNavigator](/docs/stack-navigator/). Your app, your choice. Mix and match if you want.\\n\\n## React Navigation Team\\n\\nThis project has only been possible because of the time and money invested by [Expo](https://expo.io) and [Software Mansion](https://swmansion.com/) to support contributors like the current lead maintainer [Satyajit Sahoo](https://github.com/satya164) and others such as [Brent](https://github.com/brentvatne), [Eric](https://github.com/ericvicenti), [Evan](https://github.com/EvanBacon), [Krzysztof](https://github.com/kmagiera), and [Wojciech](https://github.com/WoLewicki).\\n\\nMany folks from the community have also volunteered their valuable time to the project: [Michal Osadnik](https://github.com/osdnk) was instrumental in designing and building React Navigation v5, [Erivelton](https://github.com/eriveltonelias) has provided support and improved the documentation, [Vojtech](https://github.com/vonovak) maintains popular React Navigation utility libraries and chips in on the library and documentation when he has time, and [Janic](https://github.com/janicduplessis) regularly lives on the bleeding edge, testing new features and helping us improve them before they are included in stable releases and maintaining [react-native-safe-area-context](https://github.com/th3rdwave/react-native-safe-area-context), one of the building blocks for React Navigation.\\n\\n`@react-navigation/core` has reached over 300,000 downloads per week on npm, compared to 380,000+ for `react-native`. It\'s not possible to draw any meaningful conclusions from npm download stats alone, but it is humbling to see React Navigation at nearly 80% of the weekly download count of React Native. We\'ve managed this with an incredibly small team of, at most, one and a half full time engineers at any given time, and volunteers that chip in when they can.\\n\\n## Sponsorship\\n\\nTo be blunt: **if React Navigation helps you to deliver value to your customers, we would be thrilled if you could show us some love through a sponsorship.**\\n\\nSponsorships will help us to move more quickly towards our goal of building the best cross-platform navigation library and continue to provide timely support for bug reports in our GitHub issues.\\n\\n<div style={{marginTop: -30}} />\\n\\n### \uD83D\uDC49 [Visit our GitHub Sponsors page](https://github.com/sponsors/react-navigation) \uD83D\uDC48\\n\\nWe appreciate any support you can provide, but please only donate if you have the financial means to do so comfortably!"},{"id":"/2020/05/16/web-support","metadata":{"permalink":"/blog/2020/05/16/web-support","source":"@site/blog/2020-05-16-web-support.md","title":"React Navigation on the Web","description":"React Native has made cross-platform development much easier than before, and with React Native for Web, you can reuse code across Android, iOS and Web too!","date":"2020-05-16T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":5.06,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"React Navigation on the Web","authors":"satya","tags":["announcement","web"]},"unlisted":false,"prevItem":{"title":"React Navigation joins GitHub Sponsors","permalink":"/blog/2020/05/19/joining-github-sponsors"},"nextItem":{"title":"React Navigation 5.0 - A new way to navigate","permalink":"/blog/2020/02/06/react-navigation-5.0"}},"content":"React Native has made cross-platform development much easier than before, and with React Native for Web, you can reuse code across Android, iOS and Web too!\\n\\nOne major pain point of reusing code for the web app has been navigation. React Navigation is one of the most widely used navigation libraries for React Native, but it didn\u2019t support web. While you could run apps using React Navigation on the Web, a lot of things were missing, such as proper integration with URLs on the browser.\\n\\nWe have finally added preliminary web support to React Navigation. Let\'s take a look at the changes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Integration with URLs in browsers\\n\\nThe first step for web support is to have proper URL integration. This means:\\n\\n- Users should be able to navigate to a screen in the app using a URL\\n- URL in the browser\'s address bar should update as users navigate in the app\\n- Users should be able to go backwards and forwards using browser\'s back/forward buttons\\n- Buttons that navigate to other screens in the app should be links, and users should be able use standard shortcuts with them\\n\\n<video playsInline autoPlay muted loop style={{ maxWidth: \'100%\', marginBottom: 32 }}>\\n\\n  <source src=\\"/assets/blog/web-support/url-integration.mp4\\" type=\\"video/mp4\\" />\\n</video>\\n\\nIn native apps, it\'s already possible to navigate to a screen in the app using a URL via deep links. React Navigation can handle deep links if you provide a configuration in the `linking` prop of `NavigationContainer`. We now reuse the same configuration for URL integration in browsers. It also works for updating the URL in the browser when users navigates in the app. So if you have configured deep links in your app already, it\'ll work with URL integration on the web without any changes \uD83E\uDD73\\n\\nBy default, we\'ll reuse the route names as paths if you\'ve provided `linking={{ enabled: true }}` without any extra configuration. However, you can also customize how the paths and params are parsed by providing mappings under the `config` property.\\n\\nExample:\\n\\n```js\\nconst linking = {\\n  prefixes: [\'https://mychat.com\', \'mychat://\'],\\n  config: {\\n    screens: {\\n      Home: \'\',\\n      Profile: \':id/profile\',\\n      Settings: \':id/blog\',\\n    },\\n  },\\n};\\n\\nfunction App() {\\n  return (\\n    <NavigationContainer linking={linking} fallback={<SplashScreen />}>\\n      <Stack.Navigator>\\n        <Stack.Screen name=\\"Home\\" component={Home} />\\n        <Stack.Screen name=\\"Profile\\" component={Profile} />\\n        <Stack.Screen name=\\"Settings\\" component={Settings} />\\n      </Stack.Navigator>\\n    </NavigationContainer>\\n  );\\n}\\n```\\n\\nWe have a [playground](/docs/configuring-links/#playground) where you can try custom configurations and see how it\'s parsed. Give it a try, and we hope it\'ll make it easier for you to configure links in your apps.\\n\\nThere\'s a new [`<Link />` component](/docs/link) which lets you use URLs for navigation in the app.\\n\\nExample:\\n\\n```js\\n<Link to=\\"/profile/jane\\">Go to Jane\'s profile</Link>\\n```\\n\\nWhen you use this component, it renders anchor tags on the web. This means that users can use the same patterns that they are used to on the web, such as \\"Open in new tab\\", \\"Copy link address\\" etc.\\n\\nSpecial thanks to [Micha\u0142](https://github.com/osdnk) and [Wojciech](https://github.com/WoLewicki) for their extensive work on URL integration.\\n\\n## Improvements to the navigators\\n\\nURL integration isn\'t enough to have proper web support. The navigators also need to feel at home on the web. We have made several improvements to the built-in navigators so that they behave as you expect on the web.\\n\\n### Anchor tags in tabs and drawer\\n\\nThe first change is using anchor tags. When you use built-in navigators such as drawer navigator and tab navigator, they render anchor tags for the drawer and tab items respectively when you have linking configured. This means that they behave the same as normal links on the web.\\n\\n<img src=\\"/assets/blog/web-support/link-right-click.png\\" height=\\"427\\" alt=\\"Demo for Right Click on links\\" />\\n\\n### No gestures and animations\\n\\nAnother change is the removal of gestures on the web. Gestures are not commonly used on the web because they conflict with a lot of browser functionality and system gestures. For example, in Safari, you can swipe to go back to the previous page. Android has a system gesture to go back to previous pages too. Because of this, we\'ve removed gestures on the web.\\n\\nWe\'ve also disabled animations on the web by default since they are not commonly used and can be jarring, especially on larger screens. The animations in React Native Web also run entirely in JS, and tend not to be very performant on the web. So we\'ve decided to disable them by default to better overall experience.\\n\\n### Hide address bar on scroll\\n\\nPhones have small screens, so it\'s important to maximize the use of available screen size. One of the ways mobile browsers achieve it is by hiding and showing the address bar when scrolling to give more vertical space to the content.\\n\\nIt\'s especially important in case of the [stack navigator](/docs/stack-navigator) because not only we have the browser\'s address bar, but also the header at the top which is taking vertical space. Now we\'ll automatically adjust the styles of the stack navigator to get this behavior without you having to write any special code.\\n\\n<video playsInline autoPlay muted loop style={{ maxWidth: \'100%\' }}>\\n\\n  <source src=\\"/assets/blog/web-support/hide-addressbar.mp4\\" type=\\"video/mp4\\" />\\n</video>\\n\\n### Permanent drawer\\n\\nAnother way we can make maximum use of the available screen size is by making our UIs adapt to different screen sizes. For example, we may want to show a sidebar for navigation on large screens while switching to a drawer on smaller screens. You can now specify `drawerType` as `permanent` to show an always visible sidebar. See the [documentation for `drawerType`](/docs/drawer-navigator#drawertype) for example code on how to achieve it.\\n\\n<video playsInline autoPlay muted loop style={{ maxWidth: \'100%\' }}>\\n\\n  <source src=\\"/assets/blog/web-support/permanent-drawer.mp4\\" type=\\"video/mp4\\" />\\n</video>\\n\\nSpecial thanks to [Noemi](https://twitter.com/noemi_rozpara) for implementing this feature.\\n\\n## What\'s next?\\n\\nThis is just a start. We still need to figure out many things, such as SSR, handling of 404 etc. There is still a lot to do, but we\u2019re excited to announce it and looking forward to feedback and bug reports.\\n\\nTake a look at the [documentation](/docs/web-support) to give it a try and let us know what you think. You can also [check the example app](https://react-navigation-example.netlify.app/) to see a live demo of web support."},{"id":"/2020/02/06/react-navigation-5.0","metadata":{"permalink":"/blog/2020/02/06/react-navigation-5.0","source":"@site/blog/2020-02-06-react-navigation-5.0.md","title":"React Navigation 5.0 - A new way to navigate","description":"Exactly two years ago, we published the first stable version of React Navigation. Throughout this time, the library has been actively developed by adding many new features and bug fixes. The essence of React Navigation was that it was a project that was to become not only a project of individual programmers adapting it to their requirements, but a community as a whole, hence the emphasis on versatility, extensibility, and the tendency to reconsider the assumptions if there were such needs. Thanks to this, the Library has been undergoing metamorphosis of both incremental and completely reorganized shape.","date":"2020-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":6.855,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null},{"name":"Micha\u0142 Osadnik","title":"Core Team","socials":{"x":"https://x.com/mosdnk","github":"https://github.com/osdnk"},"imageURL":"https://avatars3.githubusercontent.com/u/25709300","key":"michal","page":null}],"frontMatter":{"title":"React Navigation 5.0 - A new way to navigate","authors":["satya","michal"],"tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation on the Web","permalink":"/blog/2020/05/16/web-support"},"nextItem":{"title":"React Navigation v5 + React Native Paper = \u2764\uFE0F","permalink":"/blog/2020/01/29/using-react-navigation-5-with-react-native-paper"}},"content":"Exactly two years ago, we published the first stable version of React Navigation. Throughout this time, the library has been actively developed by adding many new features and bug fixes. The essence of React Navigation was that it was a project that was to become not only a project of individual programmers adapting it to their requirements, but a community as a whole, hence the emphasis on versatility, extensibility, and the tendency to reconsider the assumptions if there were such needs. Thanks to this, the Library has been undergoing metamorphosis of both incremental and completely reorganized shape.\\n\\n\x3c!--truncate--\x3e\\n\\nThis led us to the moment when React Navigation became one of the most popular navigation solutions in React Native and we are incredibly proud of it.\\n\\nToday is the day, when we want to mark this vision and major refactoring of the project, that has taken place over the last six months, as stable. One could say that this significant change concerned the core library, and therefore the API, which has been developed and made more dynamic.\\n\\n## Highlights\\n\\n### Component based configuration\\n\\nIn previous versions of React Navigation, we used to configure the navigator statically using `createXNavigator` functions and `static navigationOptions`. In React Navigation 5, all of the configuration happens inside a component and is dynamic.\\n\\nExample:\\n\\n```js\\nfunction App() {\\n  return (\\n    <Stack.Navigator initialRouteName=\\"home\\">\\n      <Stack.Screen name=\\"settings\\" component={Settings} />\\n      <Stack.Screen\\n        name=\\"profile\\"\\n        component={Profile}\\n        options={{ title: \'John Doe\' }}\\n      />\\n    </Stack.Navigator>\\n  );\\n}\\n```\\n\\nThis means we have access to props, state and context, and can dynamically change the configuration for the navigator!\\n\\nWe want to stress that this is the most important change. This seems to be just a difference in the API. It actually required reconsidering many of the assumptions made in React Navigation during the development of previous versions. The static API, known from previous versions may seem an easier and more obvious choice. In the current version, the navigation configuration is consistent with all patterns in the React community.\\nThis made it necessary to rewrite the core of the library, which allowed us to make a number of improvements not only in this respect.\\n\\n### New hooks\\n\\nHooks are great for stateful logic and code organization. Now we have several hooks for common use cases:\\n\\n- [`useNavigation`](/docs/5.x/use-navigation)\\n- [`useRoute`](/docs/5.x/use-route)\\n- [`useNavigationState`](/docs/5.x/use-navigation-state)\\n- [`useFocusEffect`](/docs/5.x/use-focus-effect)\\n- [`useIsFocused`](/docs/5.x/use-is-focused)\\n- [`useScrollToTop`](/docs/5.x/use-scroll-to-top)\\n\\n### Update options from component\\n\\nWe\u2019ve added a new [`setOptions`](/docs/5.x/navigation-prop#setoptions) method on the `navigation` prop to make configuring screen navigation options more intuitive than its `static navigationOptions` predecessor. It lets us **easily set screen options based on props, state or context without messing with params**. Instead of using static options, we can call it anytime to configure the screen.\\n\\n```js\\nnavigation.setOptions({\\n  headerRight: () => (\\n    <DoneButton\\n      onPress={async () => {\\n        await saveNote();\\n        navigation.replace(\'Notes\');\\n      }}\\n    />\\n  ),\\n});\\n```\\n\\nIt can be used for things like adding a button in the header which needs to interact with the screen state.\\n\\n### New theming API\\n\\nIn React Navigation, we had basic theming support where you could specify whether to use a light or dark theme. It wasn\'t easy to customize the colors used by the built-in components such as header, tab bar etc. without extra code or repetition.\\n\\nNow, we have revamped the [theme system](/docs/5.x/themes) for easier customization. It is possible to provide a theme object with your desired colors for background, accent color etc. and it will automatically change the colors of all navigators without any extra code.\\n\\n```js\\nconst MyTheme = {\\n  dark: false,\\n  colors: {\\n    primary: \'rgb(255, 45, 85)\',\\n    background: \'rgb(242, 242, 242)\',\\n    card: \'rgb(255, 255, 255)\',\\n    text: \'rgb(28, 28, 30)\',\\n    border: \'rgb(199, 199, 204)\',\\n  },\\n};\\n```\\n\\n### First-class types with TypeScript\\n\\nThe new version has been written from the ground-up with TypeScript. We now get first class autocompletion and type-checking.\\n\\n![TypeScript in action](/assets/blog/announcing-5.0/typescript.gif)\\n\\nWe also have JSDoc for the built-in methods and options, so you get their description directly in your editor. See [our typescript documentation](/docs/5.x/typescript) for more details on how to use it.\\n\\n### Redux DevTools integration\\n\\nIf you use [React Native Debugger](https://github.com/jhen0409/react-native-debugger) or [Redux Devtools Extension](https://github.com/reduxjs/redux-devtools), you can see navigation actions in the devtools along with the current navigation state. It also supports time-travel debugging!\\n\\n![Redux Devtools in action](/assets/blog/announcing-5.0/redux-devtools.gif)\\n\\nYou don\'t need to use Redux in your apps for this to work and it works without any extra setup!\\n\\n### Native Stack Navigator\\n\\nTraditionally, we have written our navigators in JavaScript for greater customizability. It fits a lot of use cases, but sometimes you want the exact native feel and the performance of native navigation. Now, we have added a new native stack navigator that uses native navigation primitives for navigation using the [`react-native-screens`](https://github.com/kmagiera/react-native-screens) library. Under the hood, it just uses native components which might be obvious choice for native development and might be a good pick in the most cases.\\n\\n<img src=\\"/assets/blog/android-native-stack.gif\\" height=\\"530\\" alt=\\"Native Stack on Android\\" />\\n<img src=\\"/assets/blog/ios-native-stack.gif\\" height=\\"530\\" alt=\\"Native Stack on iOS\\" />\\n\\n### Native backends for Material top tab navigator\\n\\nSimilar to native stack, we also have [new backends](/docs/5.x/material-top-tab-navigator#pager) for Material top tab navigator based on [`react-native-viewpager`](https://github.com/react-native-community/react-native-viewpager) and [`ScrollView`](https://reactnative.dev/docs/5.x/scrollview).\\n\\n```js\\nimport ViewPagerAdapter from \'react-native-tab-view-viewpager-adapter\';\\n\\n// ...\\n\\n<Tab.Navigator pager={props => <ViewPagerAdapter {...props} />}>\\n  {...}\\n</Tab.Navigator>\\n```\\n\\nor\\n\\n```js\\nimport { ScrollPager } from \'react-native-tab-view\';\\n\\n// ...\\n\\n<Tab.Navigator pager={props => <ScrollPager {...props} />}>\\n  {...}\\n</Tab.Navigator>\\n```\\n\\n### Other improvements\\n\\nIn addition to these larger improvements, there are several smaller improvements to fit more use cases and make it easier to do certain tasks:\\n\\n- Revamped drawer navigator to make customizing the drawer sidebar content easier and more flexible.\\n- Simpler API for [`reset` action](/docs/5.x/navigation-prop#reset) where you can pass the new state directly instead of a chain of actions.\\n- More reliable [`focus` and `blur` events](/docs/5.x/navigation-lifecycle) to know when a screen\'s focus state changes.\\n- Integration with [`InteractionManager`](https://reactnative.dev/docs/5.x/interactionmanager) to delay tasks until animation is complete.\\n- Better safe area handling with [`react-native-safe-area-context`](https://github.com/th3rdwave/react-native-safe-area-context).\\n\\n## Upgrading\\n\\nThis is a big release and, while the basic concepts such as nesting are the same, the new API is mostly incompatible with the previous API. We know it can be a challenge to upgrade your code base. So we\'re going to keep supporting React Navigation 4 with bug fixes. We\'ll accept contributions and keep it compatible with the latest React Native version. The old code will now live in the [4.x branch](https://github.com/react-navigation/react-navigation/tree/4.x) on GitHub.\\n\\nWe recommend starting your new projects with the new version so you can take advantage of the new APIs and the new features.\\n\\nWe have written an [upgrade guide](/docs/5.x/upgrading-from-4.x) which will give you an overview of what\'s changed and how to adapt the old API and concepts to the new API.\\n\\n## A note for alpha users\\n\\nIf you were using React Navigation 5 when it was alpha, you might need to check the following changes when upgrading:\\n\\n- If you have added `@react-navigation/core` to your dependencies, remove it, and replace all imports from `@react-navigation/core` with `@react-navigation/native`\\n- If you were importing `NavigationNativeContainer`, change it to `NavigationContainer`, if you were using `NavigationContainer`, change it to `BaseNavigationContainer`\\n- If you had deep linking configured, the config format has changed for nesting. Check the [deep linking docs](/docs/5.x/deep-linking) for details.\\n\\n## Thanks to these wonderful people\\n\\nReact Navigation 5 wouldn\'t have been possible without these wonderful people. A lot of thanks to [Micha\u0142 Osadnik](https://github.com/osdnk) for working in this project with me from idea to fruition, [Brent Vatne](https://github.com/brentvatne) for his ideas, encouragement and funding from [Expo](https://expo.io), [Wojciech Lewicki](https://github.com/WoLewicki) and [Jakub Gonet](https://github.com/jakub-gonet) for improving the documentation, and working on deep link support, [Krzysztof Magiera](https://github.com/kmagiera) and [Software Mansion](https://github.com/software-mansion) for their awesome libraries that the core functionality depends on and contributions, [Janic Duplessis](https://github.com/janicduplessis) for [`react-native-safe-area-context`](https://github.com/th3rdwave/react-native-safe-area-context).\\n\\nAdditionally, I would like to mention how important is the community\'s influence on building this project. Without you, your support, your readiness to test and apply the next versions of the libraries, it wouldn\'t be possible at all, and despite mentioning a few people by name, at no stage do we forget that this is a community activity and will respond to its needs. We are incredibly grateful for the opportunity to work on such an unusual project, which facilitates the work of a large number of users.\\n\\nThanks again and hope you will find this release useful."},{"id":"/2020/01/29/using-react-navigation-5-with-react-native-paper","metadata":{"permalink":"/blog/2020/01/29/using-react-navigation-5-with-react-native-paper","source":"@site/blog/2020-01-29-using-react-navigation-5-with-react-native-paper.md","title":"React Navigation v5 + React Native Paper = \u2764\uFE0F","description":"This is a guest post by the React Native Paper team. If you like this guide, check out React Native Paper for more!","date":"2020-01-29T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"react-native-paper","permalink":"/blog/tags/react-native-paper"}],"readingTime":18.745,"hasTruncateMarker":true,"authors":[{"name":"Dawid Urbaniak","title":"React Native Paper Team","socials":{"x":"https://x.com/trensik","github":"https://github.com/Trancever"},"imageURL":"https://avatars0.githubusercontent.com/u/18584155","key":"dawid","page":null}],"frontMatter":{"title":"React Navigation v5 + React Native Paper = \u2764\uFE0F","authors":"dawid","tags":["tutorial","react-native-paper"]},"unlisted":false,"prevItem":{"title":"React Navigation 5.0 - A new way to navigate","permalink":"/blog/2020/02/06/react-navigation-5.0"},"nextItem":{"title":"Using React Navigation 5 with UI Kitten","permalink":"/blog/2019/11/04/using-react-navigation-5-with-ui-kitten"}},"content":"This is a guest post by the [React Native Paper](https://reactnativepaper.com/) team. If you like this guide, check out React Native Paper for more!\\n\\nIn this blog post, we\'ll show you how to build a Twitter clone app using React Navigation v5 and Paper.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nThe React Navigation v5 comes with many great improvements compared to previous version. It not only provides a cross-platform native Stack, but also the API was redesigned from the ground up to allow things that were never possible before. Thanks to the component-based API, all of the configuration is happening inside the **render method**. This means we can access **props**, **state** and **context** and can **dynamically change configuration** for the navigator.\\n\\n### What is React Native Paper?\\n\\n[React Native Paper](https://reactnativepaper.com/) is a UI component library that implements [MD Guidelines](https://material.io/design/).\\nIt allows building beautiful interfaces on Mobile and Web with high-quality cross-platform components.\\nFurthermore, Paper provides you with a full **theming support**, **accessibility**, **RTL** and it will take care of **platform adaptation**. This means you can focus on building apps with ready to use components instead of reimplementing the boring stuff.\\n\\nIn this guide, we would like to show you how to integrate React Navigation with Paper\'s components. To show all the details of the integration we\'ve decided to build a clone of Twitter. Of course, the functionalities will be very limited but the navigation part and main screens should look and feel similar.\\n\\nIn the following gif, you can see what is the final version of the app gonna looks like:\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/final-app.gif\\" height=\\"480\\" alt=\\"Final Result\\" />\\n\\n## Overview of the App\\n\\nSince original Twitter is a very complex app, we will build only a part of it. This means we will implement:\\n\\n- Drawer\\n- Stack Navigator with two screens: Screen showing bottom navigation and Details of a tweet\\n- Bottom navigation with 3 tabs: Feed, Notifications, and Messages\\n\\nI will focus this guide on a React Navigation and React Native Paper integration. It means I won\'t show you how to build all of the components necessary to create such an app, but you can always check the full implementation in the [github repo](https://github.com/Trancever/twitterClone).\\n\\nLet\'s get started!\\n\\n## Getting started\\n\\nI assume you already have an [Expo](https://expo.io/) project running locally. If not, make sure to create one. I chose Expo over plain React-Native because it includes most of the dependencies that we need so there is less work to do for us.\\n\\nLet\'s install React Native Paper, React Navigation v5 and other required dependencies.\\n\\n```bash\\nnpm install @react-navigation/native @react-navigation/stack @react-native-community/masked-view @react-navigation/drawer @react-navigation/material-bottom-tabs react-native-paper\\n```\\n\\nIn the next step we will make sure versions of these libraries are compatible.\\n\\n```bash\\nexpo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context\\n```\\n\\nAfter you run these two commands you should be ready to go. Let\'s start implementing the app!\\n\\n## React Navigation and React Native Paper initial setup\\n\\nBoth these libraries require minimal setup.\\n\\nIn case of React Native Paper, we need to wrap the component tree with a **Provider**. You can do this inside the exported component in the **App.js** file.\\n\\n```jsx\\nimport React from \'react\';\\nimport { Provider as PaperProvider } from \'react-native-paper\';\\nimport Main from \'./src/Main\';\\n\\nexport default function App() {\\n  return (\\n    <PaperProvider>\\n      <Main />\\n    </PaperProvider>\\n  );\\n}\\n```\\n\\nThe **PaperProvider** provides the theme to all the components in the framework. It also acts as a portal to components that need to be rendered at the top level. Check the full [Getting-Started](https://callstack.github.io/react-native-paper/getting-started.html) page for more information.\\n\\nReact Navigation setup looks similar. There is a component called **NavigationContainer** which manages our navigation tree and contains the navigation state. It must wrap all navigator structure. We will render this component in **App.tsx** inside a **PaperProvider**. More information can be found in the official [documentation](/docs/hello-react-navigation).\\n\\n```jsx\\nimport React from \'react\';\\nimport { Provider as PaperProvider } from \'react-native-paper\';\\nimport { NavigationContainer } from \'@react-navigation/native\';\\nimport Main from \'./src/Main\';\\n\\nexport default function App() {\\n  return (\\n    <PaperProvider>\\n      <NavigationContainer>\\n        <Main />\\n      </NavigationContainer>\\n    </PaperProvider>\\n  );\\n}\\n```\\n\\n## Drawer\\n\\nIn our Twitter clone, we want to implement a Drawer that is available from any screen in the app. This means it has to be a topmost navigator.\\n\\nIn React Navigation v5 there is a common pattern for creating navigators. After importing **createXNavigator** function from the navigator package of your choice you can use **Navigator** and **Screen** components from the value it returns.\\n\\nSo let\'s create a basic version of a Drawer:\\n\\n```jsx\\nimport React from \'react\';\\nimport { Text, View } from \'react-native\';\\nimport { createDrawerNavigator } from \'@react-navigation/drawer\';\\n\\nconst Drawer = createDrawerNavigator();\\n\\nfunction DrawerContent() {\\n  return (\\n    <View style={{ flex: 1, alignItems: \'center\', justifyContent: \'center\' }}>\\n      <Text>Drawer content</Text>\\n    </View>\\n  );\\n}\\n\\nfunction HomeScreen() {\\n  return (\\n    <View style={{ flex: 1, alignItems: \'center\', justifyContent: \'center\' }}>\\n      <Text>Home Screen</Text>\\n    </View>\\n  );\\n}\\n\\nexport const RootNavigator = () => {\\n  return (\\n    <Drawer.Navigator drawerContent={() => <DrawerContent />}>\\n      <Drawer.Screen name=\\"Home\\" component={HomeScreen} />\\n    </Drawer.Navigator>\\n  );\\n};\\n```\\n\\nThat\'s what we see on a screen:\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/simple-drawer.gif\\" height=\\"480\\" alt=\\"Simple Drawer\\" />\\n\\nWe can open a drawer with a swipe gesture, it looks very smooth. However, the UI doesn\'t look very impressive so let\'s add more content to the drawer to make it look just like in the final version.\\n\\nWe will use:\\n\\n- **_DrawerContentScrollView_** and **_DrawerItem_** from **_@react-navigation/drawer_**\\n- **_Avatar_**, **_Text_** and **_Switch_** from **_react-native-paper_**\\n\\n**DrawerContentScrollView** component makes the drawer vertically scrollable and provides support for devices with notches, so it\'s highly recommended to use it even for custom drawers.\\n\\n**Components from React Native Paper** make a clean, material UI.\\n\\n```jsx\\nimport React from \'react\';\\nimport { View, StyleSheet } from \'react-native\';\\nimport {\\n  DrawerItem,\\n  DrawerContentScrollView,\\n} from \'@react-navigation/drawer\';\\nimport {\\n  useTheme,\\n  Avatar,\\n  Title,\\n  Caption,\\n  Paragraph,\\n  Drawer,\\n  Text,\\n  TouchableRipple,\\n  Switch,\\n} from \'react-native-paper\';\\nimport { MaterialCommunityIcons } from \'@expo/vector-icons\';\\n\\nexport function DrawerContent(props) {\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      <View\\n        style={\\n          styles.drawerContent,\\n        }\\n      >\\n        <View style={styles.userInfoSection}>\\n          <Avatar.Image\\n            source={{\\n              uri:\\n                \'https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg\',\\n            }}\\n            size={50}\\n          />\\n          <Title style={styles.title}>Dawid Urbaniak</Title>\\n          <Caption style={styles.caption}>@trensik</Caption>\\n          <View style={styles.row}>\\n            <View style={styles.section}>\\n              <Paragraph style={[styles.paragraph, styles.caption]}>\\n                202\\n              </Paragraph>\\n              <Caption style={styles.caption}>Following</Caption>\\n            </View>\\n            <View style={styles.section}>\\n              <Paragraph style={[styles.paragraph, styles.caption]}>\\n                159\\n              </Paragraph>\\n              <Caption style={styles.caption}>Followers</Caption>\\n            </View>\\n          </View>\\n        </View>\\n        <Drawer.Section style={styles.drawerSection}>\\n          <DrawerItem\\n            icon={({ color, size }) => (\\n              <MaterialCommunityIcons\\n                name=\\"account-outline\\"\\n                color={color}\\n                size={size}\\n              />\\n            )}\\n            label=\\"Profile\\"\\n            onPress={() => {}}\\n          />\\n          <DrawerItem\\n            icon={({ color, size }) => (\\n              <MaterialCommunityIcons name=\\"tune\\" color={color} size={size} />\\n            )}\\n            label=\\"Preferences\\"\\n            onPress={() => {}}\\n          />\\n          <DrawerItem\\n            icon={({ color, size }) => (\\n              <MaterialCommunityIcons\\n                name=\\"bookmark-outline\\"\\n                color={color}\\n                size={size}\\n              />\\n            )}\\n            label=\\"Bookmarks\\"\\n            onPress={() => {}}\\n          />\\n        </Drawer.Section>\\n        <Drawer.Section title=\\"Preferences\\">\\n          <TouchableRipple onPress={() => {}}>\\n            <View style={styles.preference}>\\n              <Text>Dark Theme</Text>\\n              <View pointerEvents=\\"none\\">\\n                <Switch value={false} />\\n              </View>\\n            </View>\\n          </TouchableRipple>\\n          <TouchableRipple onPress={() => {}}>\\n            <View style={styles.preference}>\\n              <Text>RTL</Text>\\n              <View pointerEvents=\\"none\\">\\n                <Switch value={false} />\\n              </View>\\n            </View>\\n          </TouchableRipple>\\n        </Drawer.Section>\\n      </View>\\n    </DrawerContentScrollView>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  drawerContent: {\\n    flex: 1,\\n  },\\n  userInfoSection: {\\n    paddingLeft: 20,\\n  },\\n  title: {\\n    marginTop: 20,\\n    fontWeight: \'bold\',\\n  },\\n  caption: {\\n    fontSize: 14,\\n    lineHeight: 14,\\n  },\\n  row: {\\n    marginTop: 20,\\n    flexDirection: \'row\',\\n    alignItems: \'center\',\\n  },\\n  section: {\\n    flexDirection: \'row\',\\n    alignItems: \'center\',\\n    marginRight: 15,\\n  },\\n  paragraph: {\\n    fontWeight: \'bold\',\\n    marginRight: 3,\\n  },\\n  drawerSection: {\\n    marginTop: 15,\\n  },\\n  preference: {\\n    flexDirection: \'row\',\\n    justifyContent: \'space-between\',\\n    paddingVertical: 12,\\n    paddingHorizontal: 16,\\n  },\\n});\\n```\\n\\nThe final version of a drawer looks like this:\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/final-drawer.gif\\" height=\\"480\\" alt=\\"Drawer with components from React Native Paper\\"  />\\n\\n## Stack Navigator + Paper\'s Appbar\\n\\nStack Navigator provides a way for an app to transition between screens when each new screen is placed on top of a stack. In case of this Twitter clone, we will use it to transition from a screen displaying a feed of tweets to the screen showing details of a tweet.\\n\\nReact Navigation v5 provides two implementations of a Stack Navigator\\n\\n- Native Stack\\n- JS-based Stack\\n\\nThe main difference between them is that JS-based stack re-implements animations and gestures while the native stack navigator relies on the platform primitives for animations and gestures.\\n\\nIn this section, we will integrate React Native Paper [Appbar](https://callstack.github.io/react-native-paper/appbar-header.html) and JS-based Stack Navigator.\\n\\nAs a first step, we will create a minimal version of a Stack:\\n\\n```jsx\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Details } from \'./details\';\\n\\nexport const FeedStack = () => {\\n  return (\\n    <Stack.Navigator initialRouteName=\\"Feed\\">\\n      <Stack.Screen\\n        name=\\"Feed\\"\\n        component={Feed}\\n        options={{ headerTitle: \'Twitter\' }}\\n      />\\n      <Stack.Screen\\n        name=\\"Details\\"\\n        component={Details}\\n        options={{ headerTitle: \'Tweet\' }}\\n      />\\n    </Stack.Navigator>\\n  );\\n};\\n```\\n\\nBy default, the stack navigator is configured to have the familiar iOS and Android header. That doesn\'t suit our needs, because we want to use Paper\'s Appbar instead.\\nWe can achieve that by passing an `Appbar.Header` component as a `header` in Stack\'s `screenOptions`. We will also pass a `headerMode` prop with a value of `screen` to have a nice looking fade in/out animation.\\n\\n```jsx\\nimport React from \'react\';\\nimport { TouchableOpacity } from \'react-native\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { Appbar, Avatar } from \'react-native-paper\';\\nimport { MaterialCommunityIcons } from \'@expo/vector-icons\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Details } from \'./details\';\\n\\nconst Header = ({ scene, previous, navigation }) => {\\n  const { options } = scene.descriptor;\\n  const title =\\n    options.headerTitle !== undefined\\n      ? options.headerTitle\\n      : options.title !== undefined\\n        ? options.title\\n        : scene.route.name;\\n\\n  return (\\n    <Appbar.Header theme={{ colors: { primary: theme.colors.surface } }}>\\n      {previous ? (\\n        <Appbar.BackAction\\n          onPress={navigation.pop}\\n          color={theme.colors.primary}\\n        />\\n      ) : (\\n        <TouchableOpacity\\n          onPress={() => {\\n            navigation.openDrawer();\\n          }}\\n        >\\n          <Avatar.Image\\n            size={40}\\n            source={{\\n              uri: \'https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg\',\\n            }}\\n          />\\n        </TouchableOpacity>\\n      )}\\n      <Appbar.Content\\n        title={\\n          previous ? title : <MaterialCommunityIcons name=\\"twitter\\" size={40} />\\n        }\\n      />\\n    </Appbar.Header>\\n  );\\n};\\n\\nexport const FeedStack = () => {\\n  return (\\n    <Stack.Navigator\\n      initialRouteName=\\"FeedList\\"\\n      headerMode=\\"screen\\"\\n      screenOptions={{\\n        header: ({ scene, previous, navigation }) => (\\n          <Header scene={scene} previous={previous} navigation={navigation} />\\n        ),\\n      }}\\n    >\\n      <Stack.Screen\\n        name=\\"Feed\\"\\n        component={Feed}\\n        options={{ headerTitle: \'Twitter\' }}\\n      />\\n      <Stack.Screen\\n        name=\\"Details\\"\\n        component={Details}\\n        options={{ headerTitle: \'Tweet\' }}\\n      />\\n    </Stack.Navigator>\\n  );\\n};\\n```\\n\\nThe Function that we pass to `header` prop has access to 3 properties:\\n\\n- scene\\n- previous\\n- navigation\\n\\nThanks to the **scene** property we can access the title of topmost screen on the stack and display it in the header.\\n**Previous** property tells us if there are any other screens lower on the Stack.\\n<br />\\nFinally, **navigation** property allows navigating to different screens e.g. opening a Drawer.\\n\\nThe thing that we haven\'t covered yet and it is very important is how to actually navigate between Stack Navigator screens.\\nIn case of Tab or Drawer Navigator, we get it out of the box. We can swipe to open/close the Drawer or press a tab to change the scene. In Stack, we have to implement it by ourselves.\\n\\nReact Navigation gives us many different ways to navigate, but we will mostly focus on `push` and `pop`. You can access these two methods in **navigation** prop.\\n\\nAs the name suggests `push` method pushes the new screen on the stack and `pop` removes current screen from the stack.\\n\\nAs you can see on a snippet above, we invoke a `navigation.pop` function whenever user presses the back button in header. This means user will be allowed to come back from **Details** to the **Feed** screen.\\n\\nWe still need to implement an option to go from **Feed** to the **Details**. We can do it by invoking `navigation.push(\'Details\')` whenever user presses a Tweet.\\n\\n```jsx\\nfunction onTweetPress() {\\n  navigation.push(\'Details\');\\n}\\n```\\n\\nThe implementation of `Feed` and `Details` components is quite big and complex, that\'s why I am not gonna post it here. Please make sure to check it out on [github repo](https://github.com/Trancever/twitterClone)\\n\\nWe have covered only the basics of navigating between screens. If you want to learn more details check the official [documentation](/docs/navigating).\\n\\nNow, let\'s see what does the app looks like with Stack Navigator and Paper\'s Appbar.\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/stack.gif\\" height=\\"480\\" alt=\\"Stack Navigator with React Native Paper\'s Appbar\\" />\\n\\nWe still miss the last piece of our navigation flow - **Tab Navigator**. Let\'s move to the next section where we will take care of it.\\n\\n## Bottom Navigation\\n\\nIn this section, we will implement a Tab Navigator with 3 tabs and we will make sure this component is now a one of Stack\'s screen.\\n\\nWe will use a [Bottom Navigation](https://callstack.github.io/react-native-paper/bottom-navigation.html) component from React Native Paper that is exposed via **@react-navigation/material-bottom-tabs** package.\\n\\nLet\'s import the **createMaterialBottomTabNavigator** function first.\\n\\n```jsx\\nimport { createMaterialBottomTabNavigator } from \'@react-navigation/material-bottom-tabs\';\\n```\\n\\nThen we can get a reference to the Tab.Navigator and Tab.Screen components.\\n\\n```jsx\\nconst Tab = createMaterialBottomTabNavigator();\\n```\\n\\nNow, we are ready to build the actual Bottom Navigation. We will render a `Tab.navigator` and 3 `Tab.Screen` components as children. Each `Tab.Screen` representing a tab.\\n\\n```jsx\\nimport React from \'react\';\\nimport { createMaterialBottomTabNavigator } from \'@react-navigation/material-bottom-tabs\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Messages } from \'./messages\';\\nimport { Notifications } from \'./notifications\';\\n\\nconst Tab = createMaterialBottomTabNavigator();\\n\\nexport const BottomTabs = () => {\\n  return (\\n    <Tab.Navigator\\n      initialRouteName=\\"Feed\\"\\n      shifting={true}\\n      sceneAnimationEnabled={false}\\n    >\\n      <Tab.Screen\\n        name=\\"Feed\\"\\n        component={Feed}\\n        options={{\\n          tabBarIcon: \'home-account\',\\n        }}\\n      />\\n      <Tab.Screen\\n        name=\\"Notifications\\"\\n        component={Notifications}\\n        options={{\\n          tabBarIcon: \'bell-outline\',\\n        }}\\n      />\\n      <Tab.Screen\\n        name=\\"Messages\\"\\n        component={Messages}\\n        options={{\\n          tabBarIcon: \'message-text-outline\',\\n        }}\\n      />\\n    </Tab.Navigator>\\n  );\\n};\\n```\\n\\nWhen we check the screen of the phone now, we will see a nice looking, material bottom navigation. What\'s more, Stack Navigator integrates nicely with Tab.Navigator and we can still navigate to the tweet `Details` screen.\\n\\n<br />\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/bottom-navigation.gif\\" height=\\"480\\" alt=\\"Stack Navigator with Material Bottom Tabs\\" />\\n\\n## FAB and Portal\\n\\nAs it is stated in [Material Design Guidelines](https://material.io/components/buttons-floating-action-button/), the purpose of the FAB button is to give easy access to the main action of the application. Of course, the official Twitter app follows this pattern. Based on the type of screen, it allows creating new tweets or sending direct messages via FAB. It also smoothly animates the icon of the FAB when the user changes the tab and hides the FAB completely on specific screens.\\n\\nIn this section, we are going to implement the very same behaviour in our app. We are going to use a [FAB](https://callstack.github.io/react-native-paper/fab.html) and [Portal](https://callstack.github.io/react-native-paper/portal.html) components from React Native Paper.\\n\\n`Portal` allows rendering a component at a different place in the parent tree. It means you can use it to render content that should appear above other elements, similar to Modal.\\n\\nAs an initial step, we will render a FAB on all tabs and then we will add additional functionalities.\\n\\nLet\'s render a `FAB` and `Portal` in the same component where we render Tabs:\\n\\n```jsx\\nimport React from \'react\';\\nimport { createMaterialBottomTabNavigator } from \'@react-navigation/material-bottom-tabs\';\\nimport { useTheme, Portal, FAB } from \'react-native-paper\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Message } from \'./message\';\\nimport { Notifications } from \'./notifications\';\\n\\nconst Tab = createMaterialBottomTabNavigator();\\n\\nexport const BottomTabs = () => {\\n  return (\\n    <React.Fragment>\\n      <Tab.Navigator\\n        initialRouteName=\\"Feed\\"\\n        backBehavior=\\"initialRoute\\"\\n        shifting={true}\\n        sceneAnimationEnabled={false}\\n      >\\n        <Tab.Screen\\n          name=\\"Feed\\"\\n          component={Feed}\\n          options={{\\n            tabBarIcon: \'home-account\',\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Notifications\\"\\n          component={Notifications}\\n          options={{\\n            tabBarIcon: \'bell-outline\',\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Messages\\"\\n          component={Message}\\n          options={{\\n            tabBarIcon: \'message-text-outline\',\\n          }}\\n        />\\n      </Tab.Navigator>\\n      <Portal>\\n        <FAB\\n          icon=\\"feather\\"\\n          style={{\\n            position: \'absolute\',\\n            bottom: 100,\\n            right: 16,\\n          }}\\n        />\\n      </Portal>\\n    </React.Fragment>\\n  );\\n};\\n```\\n\\nWith just a few lines of JSX we have a nice looking FAB displayed on all tabs. Let\'s implement hiding it whenever the user goes to the tweet details screen.\\n\\nOur current navigation structure should be:\\n\\n- StackNavigator that has two screens\\n- The First screen of StackNavigator renders a TabNavigator with 3 tabs\\n- The Second screen of StckNavigator renders a Tweet details\\n\\nThis means a component that renders TabNavigator is a Stack\'s screen. Thanks to that, we can use `useIsFocused` hook provided by `@react-navigation/native` and conditionally hide `FAB`.\\n\\n```jsx\\nimport React from \'react\';\\nimport { createMaterialBottomTabNavigator } from \'@react-navigation/material-bottom-tabs\';\\nimport { useTheme, Portal, FAB } from \'react-native-paper\';\\nimport { useIsFocused } from \'@react-navigation/native\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Message } from \'./message\';\\nimport { Notifications } from \'./notifications\';\\n\\nconst Tab = createMaterialBottomTabNavigator();\\n\\nexport const BottomTabs = () => {\\n  const isFocused = useIsFocused();\\n\\n  return (\\n    <React.Fragment>\\n      <Tab.Navigator\\n        initialRouteName=\\"Feed\\"\\n        backBehavior=\\"initialRoute\\"\\n        shifting={true}\\n      >\\n        <Tab.Screen\\n          name=\\"Feed\\"\\n          component={Feed}\\n          options={{\\n            tabBarIcon: \'home-account\',\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Notifications\\"\\n          component={Notifications}\\n          options={{\\n            tabBarIcon: \'bell-outline\',\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Messages\\"\\n          component={Message}\\n          options={{\\n            tabBarIcon: \'message-text-outline\',\\n          }}\\n        />\\n      </Tab.Navigator>\\n      <Portal>\\n        <FAB\\n          visible={isFocused} // show FAB only when this screen is focused\\n          icon=\\"feather\\"\\n          style={{\\n            position: \'absolute\',\\n            bottom: safeArea.bottom + 65,\\n            right: 16,\\n          }}\\n        />\\n      </Portal>\\n    </React.Fragment>\\n  );\\n};\\n```\\n\\nIn the last step we will add ability to show different icon depending on the active tab.\\n\\nWe will take an advantage of our `BottomTabs` component being one of a Stack\'s screen. It means it has an access to the `route` object that is passed to each screen as a prop. This object contains an information about current screen which means we can access it and conditionally render proper icon. This is not a very common pattern and it can be confusing at first, so make sure to read the whole [guide](/docs/screen-options-resolution) on how to use it and what can be achieved by using it.\\n\\n```jsx\\nimport React from \'react\';\\nimport color from \'color\';\\nimport { createMaterialBottomTabNavigator } from \'@react-navigation/material-bottom-tabs\';\\nimport { Portal, FAB } from \'react-native-paper\';\\nimport { useIsFocused } from \'@react-navigation/native\';\\n\\nimport { Feed } from \'./feed\';\\nimport { Message } from \'./message\';\\nimport { Notifications } from \'./notifications\';\\n\\nconst Tab = createMaterialBottomTabNavigator();\\n\\nexport const BottomTabs = (props) => {\\n  // Get a name of current screen\\n  const routeName = getFocusedRouteNameFromRoute(route) ?? \'Feed\';\\n  const isFocused = useIsFocused();\\n\\n  let icon = \'feather\';\\n\\n  switch (routeName) {\\n    case \'Messages\':\\n      icon = \'email-plus-outline\';\\n      break;\\n    default:\\n      icon = \'feather\';\\n      break;\\n  }\\n\\n  return (\\n    <React.Fragment>\\n      <Tab.Navigator initialRouteName=\\"Feed\\" shifting={true}>\\n        <Tab.Screen\\n          name=\\"Feed\\"\\n          component={Feed}\\n          options={{\\n            tabBarIcon: \'home-account\',\\n            tabBarColor,\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Notifications\\"\\n          component={Notifications}\\n          options={{\\n            tabBarIcon: \'bell-outline\',\\n            tabBarColor,\\n          }}\\n        />\\n        <Tab.Screen\\n          name=\\"Messages\\"\\n          component={Message}\\n          options={{\\n            tabBarIcon: \'message-text-outline\',\\n            tabBarColor,\\n          }}\\n        />\\n      </Tab.Navigator>\\n      <Portal>\\n        <FAB\\n          visible={isFocused}\\n          icon={icon}\\n          style={{\\n            position: \'absolute\',\\n            bottom: 100,\\n            right: 16,\\n          }}\\n          color=\\"white\\"\\n        />\\n      </Portal>\\n    </React.Fragment>\\n  );\\n};\\n```\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/fab.gif\\" height=\\"480\\" alt=\\"React Native Paper\'s FAB with Bottom Tabs\\" />\\n\\nAs you can see on the gif, the FAB button works in the same way as in a Twitter app.\\nWhat\'s more, it even animates icon change properly even though we haven\'t implemented it. That\'s the behavior we get from React Native Paper\'s FAB out of the box.\\n\\n## Theming\\n\\nNowadays, supporting the Light/Dark theme is no longer a fancy way to stand out from other apps, but it has become a standard. Happily, both React Navigation v5 and React Native Paper supports theming and in this section I\'ll guide you through setting it up.\\n\\n### React Navigation\\n\\nReact Navigation exports two themes:\\n\\n- DefaultTheme\\n- DarkTheme\\n\\nWe can import them from `@react-navigation/native` package and pass to `NavigationContainer` to apply the theme:\\n\\n```jsx\\nimport React from \'react\';\\nimport { NavigationContainer, DarkTheme } from \'@react-navigation/native\';\\n\\nexport default function App() {\\n  return (\\n    <NavigationContainer theme={DarkTheme}>{/* content */}</NavigationContainer>\\n  );\\n}\\n```\\n\\n### React Native Paper\\n\\nReact Native Paper similarly to React Navigation also exports two themes:\\n\\n- DefaultTheme\\n- DarkTheme\\n\\nOnce we import a theme we can pass it to the Paper\'s `Provider` component:\\n\\n```jsx\\nimport * as React from \'react\';\\nimport { NavigationContainer, DarkTheme } from \'@react-navigation/native\';\\nimport {\\n  DarkTheme as PaperDarkTheme,\\n  Provider as PaperProvider,\\n} from \'react-native-paper\';\\n\\nexport default function Main() {\\n  return (\\n    <PaperProvider theme={PaperDarkTheme}>\\n      <NavigationContainer theme={DarkTheme}>\\n        {/* content */}\\n      </NavigationContainer>\\n    </PaperProvider>\\n  );\\n}\\n```\\n\\n### Combining themes\\n\\nSince both React Navigation and React Native Paper follows the same pattern for theming and structure of the theme object is very similar, we can combine them into one object:\\n\\n```jsx\\nimport * as React from \'react\';\\nimport {\\n  NavigationContainer,\\n  DarkTheme as NavigationDarkTheme,\\n} from \'@react-navigation/native\';\\nimport {\\n  DarkTheme as PaperDarkTheme,\\n  Provider as PaperProvider,\\n} from \'react-native-paper\';\\n\\nconst CombinedDarkTheme = {\\n  ...PaperDarkTheme,\\n  ...NavigationDarkTheme,\\n  colors: { ...PaperDarkTheme.colors, ...NavigationDarkTheme.colors },\\n};\\n\\nexport default function Main() {\\n  return (\\n    <PaperProvider theme={CombinedDarkTheme}>\\n      <NavigationContainer theme={CombinedDarkTheme}>\\n        {/* content */}\\n      </NavigationContainer>\\n    </PaperProvider>\\n  );\\n}\\n```\\n\\nIf code for themes merging looks complex, you can use a [deepmerge](https://www.npmjs.com/package/deepmerge) package. It will simplify the implementation significantly.\\n\\n#### Custom themes\\n\\nOf course, the built-in themes are not the only themes we can apply. Both libraries allow full customization and you can learn about it in the official documentation ([React Navigation](/docs/themes), [React Native Paper](https://callstack.github.io/react-native-paper/theming.html))\\n\\nIn the last step, I want to show you how to change the theme dynamically. We will implement a switch in a drawer that will allow users choosing light or dark theme.\\n\\nWe need to store information about the currently selected theme somewhere. The local state of the root component sounds reasonable. Also, we will conditionally pass different themes based on the state.\\n\\n```jsx\\nimport * as React from \'react\';\\nimport {\\n  NavigationContainer,\\n  DefaultTheme as NavigationDefaultTheme,\\n  DarkTheme as NavigationDarkTheme,\\n} from \'@react-navigation/native\';\\nimport {\\n  DarkTheme as PaperDarkTheme,\\n  DefaultTheme as PaperDefaultTheme,\\n  Provider as PaperProvider,\\n} from \'react-native-paper\';\\n\\nconst CombinedDefaultTheme = {\\n  ...PaperDefaultTheme,\\n  ...NavigationDefaultTheme,\\n};\\nconst CombinedDarkTheme = { ...PaperDarkTheme, ...NavigationDarkTheme };\\n\\nexport default function Main() {\\n  const [isDarkTheme, setIsDarkTheme] = React.useState(false);\\n\\n  const theme = isDarkTheme ? CombinedDarkTheme : CombinedDefaultTheme; // Use Light/Dark theme based on a state\\n\\n  function toggleTheme() {\\n    // We will pass this function to Drawer and invoke it on theme switch press\\n    setIsDarkTheme((isDark) => !isDark);\\n  }\\n\\n  return (\\n    <PaperProvider theme={theme}>\\n      <NavigationContainer theme={theme}>{/* content */}</NavigationContainer>\\n    </PaperProvider>\\n  );\\n}\\n```\\n\\nAs you remember, we already render a Switch in a Drawer, but we haven\'t implemented any logic when it is pressed. Let\'s take care of it now:\\n\\n```jsx\\nimport React from \'react\';\\nimport { View } from \'react-native\';\\nimport { DrawerContentScrollView } from \'@react-navigation/drawer\';\\nimport {\\n  useTheme,\\n  Avatar,\\n  Drawer,\\n  Text,\\n  TouchableRipple,\\n  Switch,\\n} from \'react-native-paper\';\\n\\nexport function DrawerContent(props) {\\n  const paperTheme = useTheme();\\n\\n  return (\\n    <DrawerContentScrollView {...props}>\\n      /* {...other - content} */\\n      <Drawer.Section title=\\"Preferences\\">\\n        <TouchableRipple onPress={props.toggleTheme}>\\n          <View style={styles.preference}>\\n            <Text>Dark Theme</Text>\\n            <View pointerEvents=\\"none\\">\\n              <Switch value={theme.dark} />\\n            </View>\\n          </View>\\n        </TouchableRipple>\\n      </Drawer.Section>\\n    </DrawerContentScrollView>\\n  );\\n}\\n```\\n\\nFirstly, we get a current theme using `useTheme` hook from Paper. This means we can check `dark` property on it and pass the correct value to `Switch`.\\n<br />Secondly, we pass a `toggleTheme` function to `TouchableRipple` to toggle theme whenever user presses a Switch.\\n\\nYou should be able to toggle a switch now and both `Provider` from Paper and `NativeNavigationContainer` from React Navigation will automatically apply correct colors to the components.\\n\\n<br />\\n<img src=\\"/assets/blog/using-react-navigation-5-with-paper/theming.gif\\" height=\\"480\\" alt=\\"Theming with React Navigation and React Native Paper\\" />\\n\\n## Summary\\n\\nWe all know that UI Component library like Paper can speed up the development, but integrating it with a navigation can be sometimes not very straighforward. I hope I showed you the most important aspects of this process in this guide. After reading this article, using Paper\'s BottomNavigation, Appbar, Drawer, FAB or Portal alongside with React Navigation shouldn\'t be a problem for you.\\n\\nDo you have any questions? Tweet to me [@trensik](https://twitter.com/trensik).\\n\\nAt the end I want to thank [@satya164](https://twitter.com/satya164) and the whole [Callstack](https://callstack.com/) team for their help with the article."},{"id":"/2019/11/04/using-react-navigation-5-with-ui-kitten","metadata":{"permalink":"/blog/2019/11/04/using-react-navigation-5-with-ui-kitten","source":"@site/blog/2019-11-04-using-react-navigation-5-with-ui-kitten.md","title":"Using React Navigation 5 with UI Kitten","description":"This is a guest post by the UI Kitten team. If you like this guide, checkout UI Kitten for more!","date":"2019-11-04T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"ui-kitten","permalink":"/blog/tags/ui-kitten"}],"readingTime":11.85,"hasTruncateMarker":true,"authors":[{"name":"Artur Yorsh","title":"UI Kitten Team","socials":{"x":"https://x.com/artyorsh","github":"https://github.com/artyorsh"},"imageURL":"https://pbs.twimg.com/profile_images/1668375708962357248/ntCXYm7e_400x400.jpg","key":"artur","page":null}],"frontMatter":{"title":"Using React Navigation 5 with UI Kitten","authors":"artur","tags":["tutorial","ui-kitten"]},"unlisted":false,"prevItem":{"title":"React Navigation v5 + React Native Paper = \u2764\uFE0F","permalink":"/blog/2020/01/29/using-react-navigation-5-with-react-native-paper"},"nextItem":{"title":"React Navigation meets native","permalink":"/blog/2019/10/17/react-navigation-native"}},"content":"This is a guest post by the [UI Kitten](http://akveo.github.io/react-native-ui-kitten) team. If you like this guide, checkout UI Kitten for more!\\nIn this blog post, we\'ll show a step-by-step guide on using React Navigation 5 with UI Kitten.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nThe new React Navigation comes with several significant improvements such as [improving animation performance](https://blog.expo.io/re-writing-react-navigation-stack-db6a376522b1) with [gesture-handler](https://github.com/software-mansion/react-native-gesture-handler) and [reanimated](https://github.com/software-mansion/react-native-reanimated) libraries. What\'s more, it was migrated to TypeScript for improving the quality of your code base with type checking and more. But the biggest update is migrating to component-based API.\\n\\n[Eva Design System](https://eva.design) is a customizable Design System that is easy to adapt to your brand. It provides Mobile and Web component libraries and allows businesses to quickly create beautiful unique branding themes. The React Native realization of Eva Design System includes [UI Kitten](http://akveo.github.io/react-native-ui-kitten), React Native framework for building modern cross-platform mobile applications.\\n\\nThe UI Kitten team started actively using React Navigation alpha and we\'re proud to announce the full compatibility to the new React Navigation API. In this guide, we won\'t consider how to implement all of the boilerplate stuff like auth screens. Instead, we will learn how to navigate between screens using Drawer, Bottom Tabs, Top Tabs, and Stack navigators to build a TODO-App. Furthermore, we\'ll demonstrate using React Navigation with UI Kitten components.\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/overview.gif\\" height=\\"480\\" alt=\\"React Navigation with UI Kitten Overview\\" />\\n\\n## Overview\\n\\nReact Navigation 5 is nothing else rather than simplifying navigation structure in your app.\\n\\n```js\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const AuthNavigator = (): React.ReactElement => (\\n  <Stack.Navigator headerMode=\'none\'>\\n    <Stack.Screen name=\'Sign In\' component={SignInScreen}/>\\n    <Stack.Screen name=\'Sign Up\' component={SignUpScreen}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\nTo create a navigator, you import `createXNavigator` function from the navigator package of your choice and use `Navigator` and `Screen` components from the value it returns.\\n\\nUnlike the previous React Navigation versions, all the screens used inside a navigator are passed as child elements with wrapping it to a `Screen` component. If you need to set up additional navigator configuration like configuration of the header, you can simply pass corresponding props directly to the `Navigator` component.\\n\\n## Getting started\\n\\nClone the project from GitHub. It contains all the required source code for the initial setup.\\n\\n```bash\\ngit clone https://github.com/artyorsh/react-navigation-ex-demo\\n```\\n\\n### Step 1. Authentication flow\\n\\nAssuming that your app users will need to authorize before getting to the home screen, we will need to create both Authentication and Home navigators. Then we\'re going to combine it with simple stack navigation and pick the initial screen depending on the user authorization status.\\n\\nOpen\xa0[./src/navigation/auth.navigator.tsx`](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/auth.navigator.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { AppRoute } from \'./app-routes\';\\nimport { SignInScreen, SignUpScreen, ResetPasswordScreen } from \'../scenes/auth\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const AuthNavigator = (): React.ReactElement => (\\n  <Stack.Navigator headerMode=\'none\'>\\n    <Stack.Screen name={AppRoute.SIGN_IN} component={SignInScreen}/>\\n    <Stack.Screen name={AppRoute.SIGN_UP} component={SignUpScreen}/>\\n    <Stack.Screen name={AppRoute.RESET_PASSWORD} component={ResetPasswordScreen}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\nIn this example, we\'re using a `createStackNavigator` function to create simple stack navigation between Sign In, Sign Up and Reset Password screens. Under `Stack Navigator` we mean the default navigation behavior between screens: with slide-from-right animation on iOS, and slide-in-top on Android.\\n\\nIn [./src/navigation/app.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/app.navigator.tsx) file and replace the placeholder screen with Auth Navigator. This will make authentication screens to be the starter point of your app.\\n\\n```js\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { AuthNavigator } from \'./auth.navigator\';\\nimport { AppRoute } from \'./app-routes\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const AppNavigator = (): React.ReactElement => (\\n  <Stack.Navigator headerMode=\'none\'>\\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/stack-navigator.gif\\" height=\\"420\\" alt=\\"UI Kitten with Stack Navigator\\" />\\n\\n### Step 2. Top tabs\\n\\nSay, our app has both in-progress and finished tasks. So, you should separate them to avoid a mess. Here you can make it with two tabs on the home screen. To do this, we need to have three screens: two for tabs and one master screen for navigation management between tabs. Unlike the Stack Navigator component, the Top Tabs `Navigator` has a special prop for the component to control navigation between tabs\u200A-\u200A`tabBar`. We will use it to configure the tab bar with UI Kitten components.\\n\\nOpen\xa0[./src/navigation/todo.navigator.tsx`](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/todo.navigator.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { createMaterialTopTabNavigator } from \'@react-navigation/material-top-tabs\';\\nimport { AppRoute } from \'./app-routes\';\\nimport { TodoTabBar, TodoInProgressScreen, TodoDoneScreen } from \'../scenes/todo\';\\nimport { DoneAllIcon, GridIcon } from \'../assets/icons\';\\n\\nconst TopTab = createMaterialTopTabNavigator();\\n\\nexport const TodoNavigator = (): React.ReactElement => (\\n  <TopTab.Navigator tabBar={props => <TodoTabBar {...props} />}>\\n    <TopTab.Screen\\n      name={AppRoute.TODO_IN_PROGRESS}\\n      component={TodoInProgressScreen}\\n      options={{ title: \'IN PROGRESS\', tabBarIcon: GridIcon }}\\n    />\\n    <TopTab.Screen\\n      name={AppRoute.TODO_DONE}\\n      component={TodoDoneScreen}\\n      options={{ title: \'DONE\', tabBarIcon: DoneAllIcon }}\\n    />\\n  </TopTab.Navigator>\\n);\\n```\\n\\nThe code above will enable you to navigate with gestures between `In Progress` screen and `Done` screen, but not set up the Tab Bar. Open\xa0[./src/scenes/todo/todo-tab-bar.component.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/scenes/todo/todo-tab-bar.component.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { TabBar, Tab, Divider, TabElement } from \'@ui-kitten/components\';\\nimport { SafeAreaLayout, SaveAreaInset, SafeAreaLayoutElement } from \'../../components/safe-area-layout.component\';\\nimport { Toolbar } from \'../../components/toolbar.component\';\\n\\nexport const TodoTabBar = (props): SafeAreaLayoutElement => {\\n\\n  const onTabSelect = (index: number): void => {\\n    const selectedTabRoute: string = props.state.routeNames[index];\\n    props.navigation.navigate(selectedTabRoute);\\n  };\\n\\n  const createNavigationTabForRoute = (route): TabElement => {\\n    const { options } = props.descriptors[route.key];\\n    return (\\n      <Tab\\n        key={route.key}\\n        title={options.title}\\n        icon={options.tabBarIcon}\\n      />\\n    );\\n  };\\n\\n  return (\\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\\n      <Toolbar title=\'React Navigation Ex \uD83D\uDC31\'/>\\n      <TabBar selectedIndex={props.state.index} onSelect={onTabSelect}>\\n        {props.state.routes.map(createNavigationTabForRoute)}\\n      </TabBar>\\n      <Divider/>\\n    </SafeAreaLayout>\\n  );\\n};\\n```\\n\\nWith the code above we render `TabBar` component with two tabs inside: one per each screen inside `TodoNavigator`. Then, we use the React Navigation state to pass `selectedIndex` and `onSelect` props to navigate between screens. So, when the user taps one of the tabs, the `TabBar` component calls `onTabSelect` function and this is the place where we need to navigate to the corresponding route.\\n\\nFinally, open [app.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/app.navigator.tsx) file and add the `TodoNavigator` as a Home screen. Now you\'re able to navigate the home screen with todo tabs after sign in.\\n\\n```js\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { AuthNavigator } from \'./auth.navigator\';\\nimport { TodoNavigator } from \'./todo.navigator\';\\nimport { AppRoute } from \'./app-routes\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const AppNavigator = (props): React.ReactElement => (\\n  <Stack.Navigator {...props} headerMode=\'none\'>\\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\\n    <Stack.Screen name={AppRoute.HOME} component={TodoNavigator}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/material-top-tab-navigator.gif\\" height=\\"480\\" alt=\\"UI Kitten with Material Top Tabs\\" />\\n\\n### Step 3. Bottom tabs\\n\\nSometimes you may want your app to contain tabs at the bottom. Here is the main semantic difference regarding the tabs at the top: while they should represent the content of the same type, the bottom tabs could be used to show any content of your application. This is where we\'re going to use `createBottomTabNavigator` and `BottomNavigation`.\\n\\nLet\'s start by creating another navigator for the second tab. The first one will be used for Todo screens. Open\xa0[./src/navigation/profile.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/profile.navigator.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { AppRoute } from \'./app-routes\';\\nimport { ProfileScreen } from \'../scenes/profile\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const ProfileNavigator = (): React.ReactElement => (\\n  <Stack.Navigator headerMode=\'none\'>\\n    <Stack.Screen name={AppRoute.PROFILE} component={ProfileScreen}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\nThis will add a simple stack navigator, just like we did it for authentication flow.\\n\\nNow we need to somehow connect `TodoNavigator` with `ProfileNavigator`\xa0. The implementation is as simple as creating a navigator for top tabs. Thanks to React Navigation, we have totally the same API for this. Open\xa0[./src/navigation/home.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/home.navigator.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { createBottomTabNavigator } from \'@react-navigation/bottom-tabs\';\\nimport { TodoNavigator } from \'./todo.navigator\';\\nimport { ProfileNavigator } from \'./profile.navigator\';\\nimport { AppRoute } from \'./app-routes\';\\nimport { HomeTabBar } from \'../scenes/home\';\\nimport { LayoutIcon, PersonIcon } from \'../assets/icons\';\\n\\nconst BottomTab = createBottomTabNavigator();\\n\\nexport const HomeNavigator = (): React.ReactElement => (\\n  <BottomTab.Navigator tabBar={props => <HomeTabBar {...props} />}>\\n    <BottomTab.Screen\\n      name={AppRoute.TODO}\\n      component={TodoNavigator}\\n      options={{ title: \'TODO\', tabBarIcon: LayoutIcon }}\\n    />\\n    <BottomTab.Screen\\n      name={AppRoute.PROFILE}\\n      component={ProfileNavigator}\\n      options={{ title: \'PROFILE\', tabBarIcon: PersonIcon }}\\n    />\\n  </BottomTab.Navigator>\\n);\\n```\\n\\nJust like in the case with tabs at the top, we also need to make a custom `tabBar`. Open\xa0[./src/scenes/home/home-tab-bar.component.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/scenes/home/home-tab-bar.component.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { BottomNavigation, BottomNavigationTab, Divider, BottomNavigationTabElement } from \'@ui-kitten/components\';\\nimport { SafeAreaLayout, SafeAreaLayoutElement, SaveAreaInset } from \'../../components/safe-area-layout.component\';\\n\\nexport const HomeTabBar = (props): SafeAreaLayoutElement => {\\n\\n  const onSelect = (index: number): void => {\\n    const selectedTabRoute: string = props.state.routeNames[index];\\n    props.navigation.navigate(selectedTabRoute);\\n  };\\n\\n  const createNavigationTabForRoute = (route): BottomNavigationTabElement => {\\n    const { options } = props.descriptors[route.key];\\n    return (\\n      <BottomNavigationTab\\n        key={route.key}\\n        title={options.title}\\n        icon={options.tabBarIcon}\\n      />\\n    );\\n  };\\n\\n  return (\\n    <SafeAreaLayout insets={SaveAreaInset.BOTTOM}>\\n      <Divider/>\\n      <BottomNavigation\\n        appearance=\'noIndicator\'\\n        selectedIndex={props.state.index}\\n        onSelect={onSelect}>\\n        {props.state.routes.map(createNavigationTabForRoute)}\\n      </BottomNavigation>\\n    </SafeAreaLayout>\\n  );\\n};\\n```\\n\\nUsing the code above we render `BottomNavigation` component with two tabs inside: one per each screen inside `HomeNavigator`. We use the React Navigation state to pass `selectedIndex` and `onSelect` props to navigate between screens. So, when the user taps one of the tabs, the `BottomNavigation` component calls `onSelect` function. Well, this is the place where we need to navigate to the corresponding route.\\n\\nThen, open [app.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/app.navigator.tsx) file and replace the `TodoNavigator` with `HomeNavigator`:\\n\\n```js\\nimport React from \'react\';\\nimport { createStackNavigator } from \'@react-navigation/stack\';\\nimport { AuthNavigator } from \'./auth.navigator\';\\nimport { HomeNavigator } from \'./home.navigator\';\\nimport { AppRoute } from \'./app-routes\';\\n\\nconst Stack = createStackNavigator();\\n\\nexport const AppNavigator = (props): React.ReactElement => (\\n  <Stack.Navigator {...props} headerMode=\'none\'>\\n    <Stack.Screen name={AppRoute.AUTH} component={AuthNavigator}/>\\n    <Stack.Screen name={AppRoute.HOME} component={HomeNavigator}/>\\n  </Stack.Navigator>\\n);\\n```\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/bottom-tab-navigator.gif\\" height=\\"480\\" alt=\\"UI Kitten with Bottom Tabs\\" />\\n\\n### Step 4. Drawer menu\\n\\nAt the final stage of this guide, we will describe how to create the drawer navigation. While the top and bottom tabs can be used to present the main product features, a drawer menu can be also used to direct a user to legal information about it, or simply contain quick actions like a logout.\\n\\nUsually, the drawer menu is available in app on the home screen, so let\'s add it to `HomeNavigator`. Open\xa0[./src/navigation/home.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/home.navigator.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { createDrawerNavigator } from \'@react-navigation/drawer\';\\nimport { createBottomTabNavigator } from \'@react-navigation/bottom-tabs\';\\nimport { TodoNavigator } from \'./todo.navigator\';\\nimport { ProfileNavigator } from \'./profile.navigator\';\\nimport { AppRoute } from \'./app-routes\';\\nimport { HomeTabBar, HomeDrawer, AboutScreen } from \'../scenes/home\';\\nimport { HomeIcon, InfoIcon, LayoutIcon, PersonIcon } from \'../assets/icons\';\\n\\nconst Drawer = createDrawerNavigator();\\nconst BottomTab = createBottomTabNavigator();\\n\\nconst HomeBottomNavigator = (): React.ReactElement => (\\n  <BottomTab.Navigator tabBar={props => <HomeTabBar {...props} />}>\\n    <BottomTab.Screen\\n      name={AppRoute.TODO}\\n      component={TodoNavigator}\\n      options={{ title: \'TODO\', tabBarIcon: LayoutIcon }}\\n    />\\n    <BottomTab.Screen\\n      name={AppRoute.PROFILE}\\n      component={ProfileNavigator}\\n      options={{ title: \'PROFILE\', tabBarIcon: PersonIcon }}\\n    />\\n  </BottomTab.Navigator>\\n);\\n\\nexport const HomeNavigator = (): React.ReactElement => (\\n  <Drawer.Navigator drawerContent={props => <HomeDrawer {...props} />}>\\n    <Drawer.Screen\\n      name={AppRoute.HOME}\\n      component={HomeBottomNavigator}\\n      options={{ title: \'Home\', drawerIcon: HomeIcon }}\\n    />\\n    <Drawer.Screen\\n      name={AppRoute.ABOUT}\\n      component={AboutScreen}\\n      options={{ title: \'About\', drawerIcon: InfoIcon }}\\n    />\\n  </Drawer.Navigator>\\n);\\n```\\n\\nIn this example, we\'ve implemented a Drawer Navigator with `createDrawerNavigator` and used it to display on the Home screen. We have also added `AboutScreen` to demonstrate navigation directly from the Drawer menu.\\n\\nJust like Top/Bottom tab navigators, the drawer navigator also has a special property for declaring custom drawer view. Use a `drawerContent` property to pass the custom view to the navigator. Open\xa0[./src/scenes/home/home-drawer.component.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/scenes/home/home-drawer.component.tsx) file and add the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { Drawer, DrawerItem, DrawerElement DrawerItemElement } from \'@ui-kitten/components\';\\nimport { SafeAreaLayout, SaveAreaInset } from \'../../components/safe-area-layout.component\';\\n\\nexport const HomeDrawer = (props): DrawerElement => {\\n\\n  const onItemSelect = (index: IndexPath): void => {\\n    const selectedTabRoute: string = props.state.routeNames[index.row];\\n    props.navigation.navigate(selectedTabRoute);\\n    props.navigation.closeDrawer();\\n  };\\n\\n  const createDrawerItemForRoute = (route, index: number): DrawerItemElement => {\\n    const { options } = props.descriptors[route.key];\\n    return (\\n      <DrawerItem\\n        key={index}\\n        title={route.name}\\n        accessoryLeft={options.drawerIcon}\\n      />\\n    );\\n  };\\n\\n  return (\\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\\n      <Drawer\\n        data={props.state.routes.map(createNavigationItemForRoute)}\\n        onSelect={onMenuItemSelect}\\n      />\\n    </SafeAreaLayout>\\n  );\\n};\\n```\\n\\nDue to the use of this code, we render `Drawer` component with two actions inside: one for navigating to legal information screen and one for performing a user logout. Then, we pass `data` prop to display our actions and `onSelect` prop to handle it. So, when the user taps the action, the `Drawer` component calls `onMenuItemSelect` function and this is the place where we need to handle it.`\\n\\nThe next thing to do is to modify the Todo tab bar by adding a menu icon to open a drawer. Open\xa0[./src/scenes/todo/todo-tab-bar.component.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/scenes/todo/todo-tab-bar.component.tsx) file and paste the following code:\\n\\n```js\\nimport React from \'react\';\\nimport { TabBar, Tab, Divider, TabElement } from \'@ui-kitten/components\';\\nimport { SafeAreaLayout, SaveAreaInset, SafeAreaLayoutElement } from \'../../components/safe-area-layout.component\';\\nimport { Toolbar } from \'../../components/toolbar.component\';\\nimport { MenuIcon } from \'../../assets/icons\';\\n\\nexport const TodoTabBar = (props): SafeAreaLayoutElement => {\\n\\n  const onTabSelect = (index: number): void => {\\n    const selectedTabRoute: string = props.state.routeNames[index];\\n    props.navigation.navigate(selectedTabRoute);\\n  };\\n\\n  const createNavigationTabForRoute = (route): TabElement => {\\n    const { options } = props.descriptors[route.key];\\n    return (\\n      <Tab\\n        key={route.key}\\n        title={options.title}\\n        icon={options.tabBarIcon}\\n      />\\n    );\\n  };\\n\\n  return (\\n    <SafeAreaLayout insets={SaveAreaInset.TOP}>\\n      <Toolbar\\n        title=\'React Navigation Ex \uD83D\uDC31\'\\n        backIcon={MenuIcon}\\n        onBackPress={props.navigation.toggleDrawer}\\n      />\\n      <TabBar selectedIndex={props.state.index} onSelect={onTabSelect}>\\n        {props.state.routes.map(createNavigationTabForRoute)}\\n      </TabBar>\\n      <Divider/>\\n    </SafeAreaLayout>\\n  );\\n};\\n```\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/drawer-navigator.gif\\" height=\\"420\\" alt=\\"UI Kitten with Drawer\\" />\\n\\n### TypeScript\\n\\nThe new React Navigation has great TypeScript support and exports type definitions for navigators and custom navigation components. Sometimes you may want to type-check the params you\'re passing when navigating between routes. You also may want to make autocomplete work when working with navigation props.\\n\\nLet\'s add some type definitions for Auth screens. For this purpose, open\xa0[./src/navigation/auth.navigator.tsx](https://github.com/artyorsh/react-navigation-ex-demo/blob/complete-exmaples/src/navigation/auth.navigator.tsx) and paste the following code:\\n\\n```js\\nimport { RouteProp } from \'@react-navigation/core\';\\nimport { StackNavigationProp } from \'@react-navigation/stack\';\\nimport { AppRoute } from \'./app-routes\';\\n\\ntype AuthNavigatorParams = {\\n  [AppRoute.SIGN_IN]: undefined;\\n  [AppRoute.SIGN_UP]: undefined;\\n  [AppRoute.RESET_PASSWORD]: undefined;\\n}\\n\\nexport interface SignInScreenProps {\\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.SIGN_IN>;\\n  route: RouteProp<AuthNavigatorParams, AppRoute.SIGN_IN>;\\n}\\n\\nexport interface SignUpScreenProps {\\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.SIGN_UP>;\\n  route: RouteProp<AuthNavigatorParams, AppRoute.SIGN_UP>;\\n}\\n\\nexport interface ResetPasswordScreenProps {\\n  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.RESET_PASSWORD>;\\n  route: RouteProp<AuthNavigatorParams, AppRoute.RESET_PASSWORD>;\\n}\\n```\\n\\nNow you can modify props of Auth screens props by adding types to make your autocomplete and IntelliSense work. For more complex examples, consider reading [type-checking](/docs/typescript) doc or reviewing [complete demo application sources](https://github.com/artyorsh/react-navigation-ex-demo/tree/complete-exmaples).\\n\\n<img src=\\"/assets/blog/using-react-navigation-5-with-ui-kitten/typescript.gif\\" alt=\\"UI Kitten & TypeScript\\" />\\n\\n### Useful links\\n\\nBy the links below, you can find a lot of useful information about UI Kitten and React Navigation 5. The demo application may contain more complex examples. Also, by referring to the app built by the React Navigation team, you can find plenty of useful examples too.\\n\\n- [Demo App by UI Kitten team](https://github.com/artyorsh/react-navigation-ex-demo/tree/complete-examples)\\n- [Demo App by React Navigation team](https://github.com/react-navigation/react-navigation/tree/main/example)\\n- [React Navigation 5 Highlights](https://blog.expo.io/announcing-react-navigation-5-0-bd9e5d45569e)\\n- [UI Kitten Documentation](https://akveo.github.io/react-native-ui-kitten/)"},{"id":"/2019/10/17/react-navigation-native","metadata":{"permalink":"/blog/2019/10/17/react-navigation-native","source":"@site/blog/2019-10-17-react-navigation-native.md","title":"React Navigation meets native","description":"React Navigation steps firmly into the next level and we\u2019re very excited to announce to you something great happening in React Navigation codebase.","date":"2019-10-17T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.48,"hasTruncateMarker":true,"authors":[{"name":"Micha\u0142 Osadnik","title":"Core Team","socials":{"x":"https://x.com/mosdnk","github":"https://github.com/osdnk"},"imageURL":"https://avatars3.githubusercontent.com/u/25709300","key":"michal","page":null}],"frontMatter":{"title":"React Navigation meets native","authors":"michal","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Using React Navigation 5 with UI Kitten","permalink":"/blog/2019/11/04/using-react-navigation-5-with-ui-kitten"},"nextItem":{"title":"React Navigation 4.0","permalink":"/blog/2019/09/16/react-navigation-4.0"}},"content":"React Navigation steps firmly into the next level and we\u2019re very excited to announce to you something great happening in React Navigation codebase.\\n\\n\x3c!--truncate--\x3e\\n\\n## Make it custom\\n\\nFrom the very beginning of React Navigation we have been following the important motto to make navigation experience customizable in every detail. We, front-end engineers, mobile developers and User Experience lovers, have a deep need to make decisions about each layout component.\\n\\nGuided by this idea we (well, not necessarily \u201Cwe\u201D because I haven\u2019t even written a single line of code this time \uD83D\uDE04) made architectural decisions, which might appear controversial for developers with the native background.\\n\\nWe have decided to write React Navigation only in JavaScript replicating native animations and interactions. This is the main decision making our solution very different from other React Native navigation libraries (like [React Native Navigation](https://wix.github.io/react-native-navigation) by Wix or [The Navigation Router](https://grahammendick.github.io/navigation/) by Graham Mendick).\\n\\nBut\u2026 why? What\u2019s the purpose of reinventing the wheel?\\n\\nFirstly, because JavaScript implementation can be more customizable. It\u2019s easy to maintain and develop new features. Additionally, being independent of native code makes our codebase more reliable.\\n\\nFurthermore, it\u2019s easy not only for maintainers but also for developers using our library. No need for native setup makes it super simple to start developing and integrating with the existing (e.g. brownfield) app. Eventually, a very wide range of customizations makes it a great solution for developers with very high UX requirements.\\n\\nThe above reasons have made React Navigation navigation super popular among a number of developers but\u2026\\n\\nAfter years of growing development, we need to admit that we\u2019re not always able to deliver an exactly native-like experience, especially when it comes to stack navigation. We also see a ton of users that use just a few ways of customization React Navigation offers\u2026\\n\\n## **Native reveal**\\n\\n\u2026so, we have decided to export native stack (*FragmentTransaction*on Android and *UINavigationController*on iOS) in order to deliver an even better experience.\\n\\nThanks to the great work of Krzysztof Magiera for [React Native Screens](https://github.com/kmagiera/react-native-screens) library now we can use truly native components instead of JS replicas.\\n\\n<img src=\\"/assets/blog/android-native-stack.gif\\" height=\\"530\\" alt=\\"Native Stack on Android\\" />\\n<img src=\\"/assets/blog/ios-native-stack.gif\\" height=\\"530\\" alt=\\"Native Stack on iOS\\" />\\n\\nWe believe you will find it useful in your projects and strongly encourage you to get acquainted with our [documentation](https://github.com/kmagiera/react-native-screens/native-stack). Things that I\u2019m the most excited about are iOS header animations!\\n\\nPlease, note that we don\u2019t intend this component to be a drop-off replacement for the currently existing stack. There are many benefits of using JavaScript-based stack. Moreover, the range of customization of the native stack is very limited and probably won\u2019t get broader due to the limitations of native API.\\n\\nNative Stack is available in the new 5.0 alpha API and with [Satyajit](https://github.com/satya164)\u2019s help, I have managed to release the first version of the [library](https://www.npmjs.com/package/@react-navigation/native-stack) a few days ago. It\u2019s in alpha so don\u2019t expect everything to be perfect, but\u2026 don\u2019t hesitate to submit a [PR](https://github.com/react-navigation/react-navigation/pulls) and help us grow React Navigation!"},{"id":"/2019/09/16/react-navigation-4.0","metadata":{"permalink":"/blog/2019/09/16/react-navigation-4.0","source":"@site/blog/2019-09-16-react-navigation-4.0.md","title":"React Navigation 4.0","description":"The documentation is now live at reactnavigation.org, and v3 lives here.","date":"2019-09-16T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.285,"hasTruncateMarker":true,"authors":[{"name":"Satyajit Sahoo","url":"https://satya164.page","title":"Core Team","socials":{"x":"https://x.com/satya164","github":"https://github.com/satya164"},"imageURL":"https://avatars2.githubusercontent.com/u/1174278","key":"satya","page":null}],"frontMatter":{"title":"React Navigation 4.0","authors":"satya","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation meets native","permalink":"/blog/2019/10/17/react-navigation-native"},"nextItem":{"title":"React Navigation 3.0","permalink":"/blog/2018/11/17/react-navigation-3.0"}},"content":"The documentation is now live at [reactnavigation.org](https://reactnavigation.org), and v3 lives [here](/docs/3.x/getting-started).\\n\\nIn this release, we have removed the navigators from the react-navigation package. The navigators have lived in separate packages for quite a while and you could already use those packages manually, but we still bundled them in the react-navigation package. This made it difficult for us to release significant updates to navigators, because we had to then do a major version release of react-navigation too. By separating the navigator packages there is more freedom to update and improve navigators without any impact on folks that don\'t use them.\\n\\n\x3c!--truncate--\x3e\\n\\nFor example, you will find when you install the latest versions of the drawer and tab navigators that the animations are more performant because they use react-native-reanimated to smoothly animate gestures. These have been available in react-navigation-drawer and react-navigation-tabs for several months now but we delayed updating them in react-navigation itself because we did not want to force every user to update.\\n\\nWith this version, you now install the navigators from their respective packages, which means that you can independently update them.\\n\\nThe navigators live at:\\n\\n- `createStackNavigator` - [`react-navigation-stack`](https://github.com/react-navigation/stack)\\n- `createBottomTabNavigator`, `createMaterialTopTabNavigator` - [`react-navigation-tabs`](https://github.com/react-navigation/tabs)\\n- `createDrawerNavigator` - [`react-navigation-drawer`](https://github.com/react-navigation/drawer)\\n\\nFor upgrade instructions, please check the [release notes](https://github.com/react-navigation/react-navigation/releases/tag/v4.0.0).\\n\\nIf you\'re using TypeScript, navigator specific types were also removed from the main package. We\'ve mentioned the replacement types in the release notes. But if you are still having problems, please open an issue and let us know.\\n\\n---\\n\\nThanks for reading, please post any issues you encounter to [react-navigation/issues](https://github.com/react-navigation/react-navigation/issues)!"},{"id":"/2018/11/17/react-navigation-3.0","metadata":{"permalink":"/blog/2018/11/17/react-navigation-3.0","source":"@site/blog/2018-11-17-react-navigation-3.0.md","title":"React Navigation 3.0","description":"The documentation is now live at reactnavigation.org, and v2 lives here.","date":"2018-11-17T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":8.355,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"React Navigation 3.0","authors":"brent","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 4.0","permalink":"/blog/2019/09/16/react-navigation-4.0"},"nextItem":{"title":"3.0 release candidate","permalink":"/blog/2018/11/01/react-navigation-3.0-rc"}},"content":"The documentation is now live at [reactnavigation.org](https://reactnavigation.org), and v2 lives [here](/docs/2.x/getting-started).\\n\\nThis is the first release where React Navigation depends on a native module outside of React Native core: it now depends on react-native-gesture-handler. This library provides an excellent set of primitives for leveraging the operating systems\u2019 native gesture APIs and has enabled us to fix a variety of issues with stack and drawer navigators. React Navigation also depends on react-native-screens, but you don\u2019t need to install the native module if you prefer not to use it (we have a blog post coming soon that will explain what react-native-screens is and why you may want to use it, or you can watch [this talk](https://www.youtube.com/watch?v=Z0Jl1KCWiag) by the author of the library).\\n\\n\x3c!--truncate--\x3e\\n\\nWe didn\u2019t get around to every feature that we wanted to land for this release, but we also didn\u2019t want to hold it up further because we expect that you will want to start using it right away - the release includes performance improvements, bugfixes, ergonomics improvements, some handy new features, and a re-organizing of the internals to improve support for web as a target of React Navigation.\\n\\nLet\u2019s get started with react-navigation 3.0.\\n\\n## Installation\\n\\nFirst, install the library using your favorite package manager: `yarn add react-navigation@^3.0.0`\\n\\nNext, install react-native-gesture-handler. If you\u2019re using Expo you don\u2019t need to do anything here, it\u2019s included in the SDK. Otherwise, follow [these installation instructions](https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#installation).\\n\\nOptionally, you can install react-native-screens. If you\u2019re using Expo you don\u2019t need to do anything here, it\u2019s included in SDK 30 and higher. Otherwise, follow the instructions in the README on [`react-native-screens`](https://github.com/software-mansion/react-native-screens).\\n\\n> **Warning**: if you have manually installed any navigators in your project, for example react-navigation-material-bottom-tabs, you will need to update those to a version that is compatible with 3.0.0. In the case of react-navigation-material-bottom-tabs, 1.0.0 is compatible.\\n\\n## Breaking changes\\n\\nWhen you first run your app after updating it won\u2019t work because react-navigation@^3 requires you to add an app container to the root navigator. Once you get that in place, you may notice that your navigation options aren\u2019t being applied as you expect - this is due to navigationOptions in navigator configuration being renamed to defaultNavigationOptions. If you use a drawer, you may notice that it feels quicker, but if you depend on inactive screens being unmounted you\u2019ll be surprised. More details on these changes and how to update your app to work just as well (probably better) than before below.\\n\\n### Explicit app container required for the root navigator\\n\\nIn the past, any navigator could act as the navigation container at the top-level of your app because they were all wrapped in \u201Cnavigation containers\u201D. The navigation container, now known as an app container, is a higher-order-component that maintains the navigation state of your app and handles interacting with the outside world to turn linking events into navigation actions and so on.\\n\\n```js\\nimport {\\n  createStackNavigator,\\n  createAppContainer\\n} from \'react-navigation\';\\nconst MainNavigator = createStackNavigator({...});\\nconst App = createAppContainer(MainNavigator);\\n```\\n\\nThis should be an easy change - import `createAppContainer` in the root of your app and use it to wrap the root navigator.\\n\\n> **Warning**: if you have any custom navigators, you may have used `createNavigationContainer`, you can remove this now because it\u2019s only used at the root of the app and provided by the user.\\n\\n### Renamed navigationOptions in navigator configuration\\n\\nWhen configuring navigators it\u2019s often useful to pass in default navigation options for the screens inside of that navigator. For example in a stack you might want to set a background color and tint color for each screen. Previously, you would write something like this:\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    navigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n  }\\n);\\n```\\n\\nAs of this release, `navigationOptions` in navigator configuration like this has been renamed to `defaultNavigationOptions`.\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    defaultNavigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n  }\\n);\\n```\\n\\nSometimes you need to configure the `navigationOptions` for a navigator itself. Typically you\u2019d do something like this:\\n\\n```js\\nHome.navigationOptions = { tabBarLabel: \'Home!\' };\\n```\\n\\nAs of this release, you can use `navigationOptions` in the navigator config for this instead.\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    defaultNavigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n    navigationOptions: {\\n      tabBarLabel: \'Home!\',\\n    },\\n  }\\n);\\n\\nconst Tabs = createBottomTabNavigator({ Home });\\n```\\n\\n[See this example on Snack](https://snack.expo.io/@notbrent/belligerent-pizza).\\n\\nWe\u2019re sorry to make you go hunt through your code and rename a handful of strings, the hope is that this change makes the code more readable and more intuitive to new users in the future.\\n\\n### Drawer now keeps inactive tabs in memory by default\\n\\nPreviously when using the drawer navigator screens would unmount when inactive, and when you switch back to them you\u2019d need to re-render the entire thing. In tabs these stay in memory as you would expect, so once you switch to the screen once it\u2019s faster to go back there again and you don\u2019t lose your place in a scroll view or anything. Drawer now behaves the same way, but you can go back to the old behavior if you like by passing in `unmountInactiveRoutes: true` in the drawer navigation configuration.\\n\\n### Default stack background color is now white\\n\\nYou can customize this by using `cardStyle`:\\n\\n```js\\ncreateStackNavigator(routes, { cardStyle: { backgroundColor: \'#ccc\' } });\\n```\\n\\n## New features\\n\\n- react-navigation now exports `ScrollView`, `FlatList`, and `SectionList` that will scroll to top when tapping on the active tab as you would expect from native tab bars.\\n- Drawer supports two more types in addition to the default \u2018front\u2019 behavior that you expect from typical Android drawers: back and slide.\\n- You can now provide default params inside of route definitions:\\n\\n```js\\nconst Store = createStackNavigator({\\n  Playstation: { screen: ProductScreen, params: { product: \'Playstation\' } },\\n  Xbox: { screen: ProductScreen, params: { product: \'Xbox\' } },\\n});\\n```\\n\\n- Basic support for hooks in `react-navigation-hooks` (although this isn\'t too useful yet without a stable react-native build that supports hooks, you can play with it on the web!).\\n- `headerBackgroundTransitionPreset: \'toggle\' | \'fade\' | \'translate\'` lets you choose how to transition your custom `headerBackground` components between screens.\\n- Add options to opt in/out of the stack card overlay and shadow that are visible during transitions: `cardShadowEnabled` defaults to `true` and `cardOverlayEnabled` defaults to `false`.\\n- Export `StackGestureContext` and `DrawerGestureContext` from react-navigation-stack and react-navigation-drawer, so you can use the ref from the corresponding gestures with other gesture handlers (eg: [GestureInteraction.js](https://github.com/react-navigation/react-navigation-drawer/blob/bf4bdba7f6a4fbc12192f5d5ba2285f6280431b7/example/src/GestureInteraction.js)).\\n- Tab navigators support `tabBarOnLongPress` configuration option, which defaults to the same as the tab press event.\\n\\n## Assorted fixes & improvements\\n\\n- Stack transition performance improved greatly by removing the shadow from the entire card and rendering it only on the slice where it is needed. The card opacity is also no longer directly animated but instead an overlay is put on top to create a similar effect but with better performance.\\n- Fix long-standing issues with stack that led to quietly re-mounting screens when navigating quickly in certain patterns: [react-navigation/issues/4155](https://github.com/react-navigation/react-navigation/issues/4155)\\n- Support inverted gesture in modals.\\n- Stack card gesture uses react-native-gesture-handler and native driver so the gesture runs on the UI thread (except when the gesture ends, then it calls back to JS).\\n- Fix a variety of issues with drawer navigator, including issues around nesting ([react-navigation/issues/4154](https://github.com/react-navigation/react-navigation/issues/4154)) and bugs with firing open / close (eg: [react-navigation/react-navigation/issues/5146](https://github.com/react-navigation/react-navigation/issues/5146)).\\n- Fix accessibility voiceover for tabs and stack back button.\\n\\n## Ecosystem and web support\\n\\nReact Navigation 3.0 brings some important changes to the React Navigation ecosystem: the project now lives across a number of repositories and packages, we have an exciting new transitioner on the way, and the core finally has first-class support for web apps on the client and server!\\n\\n### Independent Projects\\n\\nReact Navigation has always been a set of loosely-coupled navigation components: Stack, Tabs, Drawer, etc. But until now they have always lived in the main navigation repo, which has been difficult to maintain. People often struggle to use different versions of these components, or they want to fork them for their own app.\\n\\nIn v3, all of our main packages and repos are separated. There are the following core packages in our new NPM org:\\n\\n- `@react-navigation/core` - The primitives and utilities that define our patterns, plus several routers\\n- `@react-navigation/native` - Container and support for navigators on React Native apps. `createAppContainer` from the main `react-navigation` package actually comes from this package.\\n- `@react-navigation/web` - Web browser app container, and utilities for server rendering\\n\\nIn addition, we have published our community-maintained components as standalone repos and packages:\\n\\n- `react-navigation-stack`\\n- `react-navigation-tabs`\\n- `react-navigation-drawer`\\n- `react-navigation-transitioner`\\n- `react-navigation-hooks`\\n\\nTo keep the experience as simple as possible the `react-navigation` package will continue to be supported, and will contain most of the above components as it did before.\\n\\n### Web Support\\n\\nNow that the core of React Navigation can be used outside of React Native, we can provide first-class web support to anyone using React.js on the web, including those who do not want to use `react-native-web`.\\n\\nHere is an example web app which demonstrates the new `createBrowserApp` container and the built-in `Link` component:\\n\\n```jsx\\nimport { createSwitchNavigator } from \\"@react-navigation/core\\";\\nimport { createBrowserApp, Link } from \\"@react-navigation/web\\";\\n\\nclass Home extends React.Component {\\n  static path = \\"\\";\\n  static navigationOptions = {\\n    title: \\"Home\\",\\n  };\\n  render () {\\n    return (\\n      <div>\\n        <h2>Home Screen</h2>\\n        <Link toRoute=\\"Profile\\" params={{ name: \\"Brent\\", view: \\"photos\\" }}>\\n          Brent\'s photos\\n        </Link>\\n      </div>\\n    );\\n  }\\n}\\nclass Profile extends React.Component {\\n  static path = \\"/profile/:name\\";\\n  ...\\n}\\n\\nconst AppNavigator = createSwitchNavigator({\\n  Home,\\n  Profile,\\n});\\n\\nconst App = createBrowserApp(AppNavigator);\\n\\nexport default App;\\n```\\n\\nThe above `Link` tag will render to:\\n`<a href=\\"/profile/Brent?view=photos\\">Brent\'s Photos</a>`\\n\\nSee a simple web app with Create React App [here](https://github.com/react-navigation/example-web). Or take a look at [this razzle app](https://github.com/react-navigation/web-server-example) for a more complicated example including server rendering.\\n\\n---\\n\\nThanks for reading, please post any issues you encounter to [react-navigation/issues](https://github.com/react-navigation/react-navigation/issues)!"},{"id":"/2018/11/01/react-navigation-3.0-rc","metadata":{"permalink":"/blog/2018/11/01/react-navigation-3.0-rc","source":"@site/blog/2018-11-01-react-navigation-3.0-rc.md","title":"3.0 release candidate","description":"We are excited to announce the release candidate of version 3.0 today!","date":"2018-11-01T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":8,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"3.0 release candidate","authors":"brent","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 3.0","permalink":"/blog/2018/11/17/react-navigation-3.0"},"nextItem":{"title":"React Navigation 2.0","permalink":"/blog/2018/05/07/react-navigation-2.0"}},"content":"We are excited to announce the release candidate of version 3.0 today!\\n\\nThis is the first release where React Navigation depends on a native module outside of React Native core: it now depends on react-native-gesture-handler. This library provides an excellent set of primitives for leveraging the operating systems\u2019 native gesture APIs and has enabled us to fix a variety of issues with stack and drawer navigators. React Navigation also depends on react-native-screens, but you don\u2019t need to install the native module if you prefer not to use it (we have a blog post coming soon that will explain what react-native-screens is and why you may want to use it, or you can watch [this talk](https://www.youtube.com/watch?v=Z0Jl1KCWiag) by the author of the library).\\n\\n\x3c!--truncate--\x3e\\n\\nWe didn\u2019t get around to every feature that we wanted to land for this release, but we also didn\u2019t want to hold it up further because we expect that you will want to start using it right away - the release includes performance improvements, bugfixes, ergonomics improvements, some handy new features, and a re-organizing of the internals to improve support for web as a target of React Navigation.\\n\\nLet\u2019s get started with react-navigation 3.0.\\n\\n## Installation\\n\\nFirst, install the library using your favorite package manager: `yarn add react-navigation@^3.0.0-rc.0`\\n\\nNext, install react-native-gesture-handler. If you\u2019re using Expo you don\u2019t need to do anything here, it\u2019s included in the SDK. Otherwise: `yarn add react-native-gesture-handler && react-native link`\\n\\nOptionally, you can install react-native-screens. If you\u2019re using Expo you don\u2019t need to do anything here, it\u2019s included in SDK 30 and higher. Otherwise, follow the instructions in the README on [`react-native-screens`](https://github.com/software-mansion/react-native-screens).\\n\\n> **Warning**: if you have manually installed any navigators in your project, for example react-navigation-material-bottom-tabs, you will need to update those to a version that is compatible with 3.0.0. In the case of react-navigation-material-bottom-tabs, 1.0.0-alpha.2 is compatible.\\n\\n## Breaking changes\\n\\nWhen you first run your app after updating it won\u2019t work because react-navigation@^3 requires you to add an app container to the root navigator. Once you get that in place, you may notice that your navigation options aren\u2019t being applied as you expect - this is due to navigationOptions in navigator configuration being renamed to defaultNavigationOptions. If you use a drawer, you may notice that it feels quicker, but if you depend on inactive screens being unmounted you\u2019ll be surprised. More details on these changes and how to update your app to work just as well (probably better) than before below.\\n\\n### Explicit app container required for the root navigator\\n\\nIn the past, any navigator could act as the navigation container at the top-level of your app because they were all wrapped in \u201Cnavigation containers\u201D. The navigation container, now known as an app container, is a higher-order-component that maintains the navigation state of your app and handles interacting with the outside world to turn linking events into navigation actions and so on.\\n\\n```js\\nimport {\\n  createStackNavigator,\\n  createAppContainer\\n} from \'react-navigation\';\\nconst MainNavigator = createStackNavigator({...});\\nconst App = createAppContainer(MainNavigator);\\n```\\n\\nThis should be an easy change - import `createAppContainer` in the root of your app and use it to wrap the root navigator.\\n\\n> **Warning**: if you have any custom navigators, you may have used `createNavigationContainer`, you can remove this now because it\u2019s only used at the root of the app and provided by the user.\\n\\n### Renamed navigationOptions in navigator configuration\\n\\nWhen configuring navigators it\u2019s often useful to pass in default navigation options for the screens inside of that navigator. For example in a stack you might want to set a background color and tint color for each screen. Previously, you would write something like this:\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    navigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n  }\\n);\\n```\\n\\nAs of this release, `navigationOptions` in navigator configuration like this has been renamed to `defaultNavigationOptions`.\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    defaultNavigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n  }\\n);\\n```\\n\\nSometimes you need to configure the `navigationOptions` for a navigator itself. Typically you\u2019d do something like this:\\n\\n```js\\nHome.navigationOptions = { tabBarLabel: \'Home!\' };\\n```\\n\\nAs of this release, you can use `navigationOptions` in the navigator config for this instead.\\n\\n```js\\nconst Home = createStackNavigator(\\n  {\\n    Feed: ExampleScreen,\\n    Profile: ExampleScreen,\\n  },\\n  {\\n    defaultNavigationOptions: {\\n      headerTintColor: \'#fff\',\\n      headerStyle: {\\n        backgroundColor: \'#000\',\\n      },\\n    },\\n    navigationOptions: {\\n      tabBarLabel: \'Home!\',\\n    },\\n  }\\n);\\n\\nconst Tabs = createBottomTabNavigator({ Home });\\n```\\n\\n[See this example on Snack](https://snack.expo.io/@notbrent/belligerent-pizza).\\n\\nWe\u2019re sorry to make you go hunt through your code and rename a handful of strings, the hope is that this change makes the code more readable and more intuitive to new users in the future.\\n\\n### Drawer now keeps inactive tabs in memory by default\\n\\nPreviously when using the drawer navigator screens would unmount when inactive, and when you switch back to them you\u2019d need to re-render the entire thing. In tabs these stay in memory as you would expect, so once you switch to the screen once it\u2019s faster to go back there again and you don\u2019t lose your place in a scroll view or anything. Drawer now behaves the same way, but you can go back to the old behavior if you like by passing in `unmountInactiveRoutes: true` in the drawer navigation configuration.\\n\\n## New features\\n\\n- react-navigation now exports `ScrollView`, `FlatList`, and `SectionList` that will scroll to top when tapping on the active tab as you would expect from native tab bars.\\n- Drawer supports two more types in addition to the default \u2018front\u2019 behavior that you expect from typical Android drawers: back and slide.\\n- You can now provide default params inside of route definitions:\\n\\n```js\\nconst Store = createStackNavigator({\\n  Playstation: { screen: ProductScreen, params: { product: \'Playstation\' } },\\n  Xbox: { screen: ProductScreen, params: { product: \'Xbox\' } },\\n});\\n```\\n\\n- Basic support for hooks in `react-navigation-hooks`\\n- `headerBackgroundTransitionPreset: \'toggle\' | \'fade\' | \'translate\'` lets you choose how to transition your custom `headerBackground` components between screens.\\n- Add options to opt in/out of the stack card overlay and shadow that are visible during transitions: `cardShadowEnabled` defaults to `true` and `cardOverlayEnabled` defaults to `false`.\\n- Export `StackGestureContext` and `DrawerGestureContext` from react-navigation-stack and react-navigation-drawer, so you can use the ref from the corresponding gestures with other gesture handlers (eg: [GestureInteraction.js](https://github.com/react-navigation/react-navigation-drawer/blob/bf4bdba7f6a4fbc12192f5d5ba2285f6280431b7/example/src/GestureInteraction.js)).\\n\\n## Assorted fixes & improvements\\n\\n- Stack transition performance improved greatly by removing the shadow from the entire card and rendering it only on the slice where it is needed. The card opacity is also no longer directly animated but instead an overlay is put on top to create a similar effect but with better performance.\\n- Fix long-standing issues with stack that led to quietly re-mounting screens when navigating quickly in certain patterns: [react-navigation/issues/415](https://github.com/react-navigation/react-navigation/issues/4155)\\n- Support inverted gesture in modals.\\n- Stack card gesture uses react-native-gesture-handler and native driver so the gesture runs on the UI thread (except when the gesture ends, then it calls back to JS).\\n- Fix a variety of issues with drawer navigator, including issues around nesting ([react-navigation/issues/4154](https://github.com/react-navigation/react-navigation/issues/4154)) and bugs with firing open / close (eg: [react-navigation/issues/5146](https://github.com/react-navigation/react-navigation/issues/5146)).\\n\\n## Ecosystem and web support\\n\\nReact Navigation 3.0 brings some important changes to the React Navigation ecosystem: the project now lives across a number of repositories and packages, we have an exciting new transitioner on the way, and the core finally has first-class support for web apps on the client and server!\\n\\n### Independent Projects\\n\\nReact Navigation has always been a set of loosely-coupled navigation components: Stack, Tabs, Drawer, etc. But until now they have always lived in the main navigation repo, which has been difficult to maintain. People often struggle to use different versions of these components, or they want to fork them for their own app.\\n\\nIn v3, all of our main packages and repos are separated. There are the following core packages in our new NPM org:\\n\\n- `@react-navigation/core` - The primitives and utilities that define our patterns, plus several routers\\n- `@react-navigation/native` - Container and support for navigators on React Native apps. `createAppContainer` from the main `react-navigation` package actually comes from this package.\\n- `@react-navigation/web` - Web browser app container, and utilities for server rendering\\n\\nIn addition, we have published our community-maintained components as standalone repos and packages:\\n\\n- `react-navigation-stack`\\n- `react-navigation-tabs`\\n- `react-navigation-drawer`\\n- `react-navigation-transitioner`\\n- `react-navigation-hooks`\\n\\nTo keep the experience as simple as possible the `react-navigation` package will continue to be supported, and will contain most of the above components as it did before.\\n\\n### Web Support\\n\\nNow that the core of React Navigation can be used outside of React Native, we can provide first-class web support to anyone using React.js on the web, including those who do not want to use `react-native-web`.\\n\\nHere is an example web app which demonstrates the new `createBrowserApp` container and the built-in `Link` component:\\n\\n```js\\nimport { createSwitchNavigator } from \\"@react-navigation/core\\";\\nimport { createBrowserApp, Link } from \\"@react-navigation/web\\";\\n\\nclass Home extends React.Component {\\n  static path = \\"\\";\\n  static navigationOptions = {\\n    title: \\"Home\\",\\n  };\\n  render () {\\n    return (\\n      <div>\\n        <h2>Home Screen</h2>\\n        <Link toRoute=\\"Profile\\" params={{ name: \\"Brent\\", view: \\"photos\\" }}>\\n          Brent\'s photos\\n        </Link>\\n      </div>\\n    );\\n  }\\n}\\nclass Profile extends React.Component {\\n  static path = \\"/profile/:name\\";\\n  ...\\n}\\n\\nconst AppNavigator = createSwitchNavigator({\\n  Home,\\n  Profile,\\n});\\n\\nconst App = createBrowserApp(AppNavigator);\\n\\nexport default App;\\n```\\n\\nThe above `Link` tag will render to:\\n`<a href=``\\"``/profile/Brent?view=photos``\\"``>Brent\'s Photos</a>`\\n\\nSee a simple web app with Create React App [here](https://github.com/react-navigation/example-web). Or take a look at [this razzle app](https://github.com/react-navigation/web-server-example) for a more complicated example including server rendering.\\n\\n---\\n\\nThanks for reading, please post any issues you encounter to [react-navigation/issues](https://github.com/react-navigation/react-navigation/issues)!"},{"id":"/2018/05/07/react-navigation-2.0","metadata":{"permalink":"/blog/2018/05/07/react-navigation-2.0","source":"@site/blog/2018-05-07-react-navigation-2.0.md","title":"React Navigation 2.0","description":"The documentation is now live at reactnavigation.org, and v1 lives here.","date":"2018-05-07T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":6.09,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"React Navigation 2.0","authors":"brent","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"3.0 release candidate","permalink":"/blog/2018/11/01/react-navigation-3.0-rc"},"nextItem":{"title":"2.0 release candidate","permalink":"/blog/2018/04/06/react-navigation-2.0-rc"}},"content":"The documentation is now live at [reactnavigation.org](https://reactnavigation.org), and v1 lives [here](/docs/1.x/getting-started).\\n\\n\x3c!--truncate--\x3e\\n\\n## Significant breaking changes\\n\\nThe following changes are considered \u201Csignificant\u201D because they can\u2019t be fixed by search and replace or something that is similarly mechanical.\\n\\n### `navigate(routeName)` in StackNavigator is \u201Cless pushy\u201D\\n\\nIn 1.x, `navigate(routeName)` and `push(routeName)` were very similar: every time you called `navigate(routeName)` it would push a new route to the stack. Now `navigate(routeName)` will first try to find an existing instance of the route and jump to that if it exists, otherwise it will push the route to the stack.\\n\\nTo update your app for this change you may need to change `navigate` to `push` in places where you would like to push a new route every time. Alternatively, you could consider using a `key`: `navigate({routeName: \u2018MyRoute\u2019, key: data.uniqueId, params: data})`. [Read more about navigation with keys](/docs/2.x/navigation-key).\\n\\nRead more about this in [RFC 4](https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md) and [commit 7a978b1](https://github.com/react-navigation/react-navigation/commit/7a978b1087ff3acc7dd71267bd900d15c932d7cc).\\n\\n### `push` now propagates between routers like `navigate`\\n\\nPreviously, `push` only applied to the deepest active stack router. This meant that if you had Stack A > Stack B and Stack B fired `push(\u2018MyRoute\u2019)`, even if Stack B does not have a route with the name `\u2019MyRoute\u2019` and Stack A does, the screen would not be pushed. We made this change to accommodate for the \u201Cless pushy\u201D navigate behavior.\\n\\nWhen updating your app, you may want to double check where you use `push` to ensure that this doesn\u2019t impact the expected behavior of your app.\\n\\nRead about this in [RFC 4](https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md#drawbacks) and [pull 3617](https://github.com/react-navigation/react-navigation/pull/3617).\\n\\n### Shallow navigation options\\n\\nA common source of confusion for developers working with React Navigation has been around `navigationOptions` resolution. For example, if you have a stack navigator with a header, and a drawer inside of that stack, then in some circumstances the title of the stack would change every time you change screens in the drawer. This is because the stack navigator would crawl into child navigators and pull `navigationOptions` off of the deepest active screen. As of 2.0, this no longer happens: navigators will only look at their direct children for `navigationOptions`.\\n\\nRead more about the justification for this in [RFC 5](https://github.com/react-navigation/rfcs/blob/master/text/0005-shallow-navigation-options.md). Also see the new documentation page [Navigation options resolution](/docs/2.x/navigation-options-resolution) to learn more.\\n\\n### New API for creating navigators\\n\\nIt is now easier to create and maintain custom navigators. The new `createNavigator` API fully decouples the navigation view from the router. Information about each screen is available on a single \\"descriptor\\", including the pre-computed child navigation prop, allowing you to focus on custom navigation views.\\n\\nCustom navigators can now provide actions helpers for their screens. For example, the new drawer navigator now allows `props.navigation.openDrawer()` within its screen components.\\n\\nThis does not impact most users - you won\'t need to make any changes for this unless you use custom navigators in your app. Read more about the changes in [RFC 2](https://github.com/react-navigation/rfcs/blob/master/text/0002-navigator-view-api.md). Also read the [custom navigators documentation](/docs/2.x/custom-navigators). You can also watch the [\\"Creating a navigator\\" section in this talk](https://youtu.be/wJJZ9Od8MjM?t=1215) to learn more.\\n\\n## Trivial breaking changes\\n\\nThe following changes are considered \u201Ctrivial\u201D because you will only need make straightforward and mechanical changes to update your app for them.\\n\\n### Drawer routes have been replaced with actions\\n\\nRather than opening a drawer with `navigation.navigate(\u2018DrawerOpen\u2019)`, you can now call `navigation.openDrawer()`. Other methods are `closeDrawer()` and `toggleDrawer()`. See [pull 3618](https://github.com/react-navigation/react-navigation/pull/3618).\\n\\n### Navigation actions API overhaul\\n\\nIn practice, this change is unlikely to impact your app at all except for one case that is mentioned below.\\n\\nIn 1.x, functions on the `navigation` were not contextual - they would be the same regardless of whether your screen was inside of a drawer, a stack, a tab navigator, etc. In 2.0 the functions that are available to you on the `navigation` prop depend on the navigators that it corresponds to. If your screen is inside of both a stack and a drawer navigator, you will have helpers for both -- `push` and `openDrawer`, for example.\\n\\nGiven that we only exposed generic helpers (`navigate`, `goBack`) and helpers specific to the stack in 1.x, this would only impact you if you attempted to use the stack helpers from outside of a stack. For example, if you had a tab navigator with a stack in tab A and just a plain screen in tab B, then tried to `push` a route from the screen in tab B, `push` would not be available. Keep this in mind when you update your app if it follows this type of structure.\\n\\nOne of the big improvements you get from this is that you can now add your own helpers to the `navigation` prop! Read more in [RFC 6](https://github.com/react-navigation/rfcs/blob/master/text/0006-action-creators.md) and in [pull 3392](https://github.com/react-navigation/react-navigation/pull/3392).\\n\\n### NavigationActions no longer have `toString()` implementations ([related](https://github.com/react-navigation/react-navigation/issues/4072))\\n\\nThis change was intended to simplify the implementation of actions. We may go back on this, however, and apologize in advance if this thrasing causes you trouble.\\n\\n### NavigationActions split up according to router\\n\\nIf you are using `NavigationActions.push` or other stack-specific actions, you\u2019ll need to import `StackActions` and use `StackActions.push` instead.\\n\\n## Deprecations\\n\\n### XNavigator(...) is now createXNavigator(...)\\n\\n`StackNavigator`, `TabNavigator` and `DrawerNavigator` are now deprecated in favour of `createStackNavigator`, `createTabNavigator`, and `createDrawerNavigator`, which are functionally identical but more clearly communicate that they are functions and that they return a component. The `XNavigator` style will removed in 3.0.\\n\\n### Tab navigator split into separate components\\n\\nPreviously, `TabNavigator` would render a navigation bar on the top of the screen on Android and the bottom on iOS. We\u2019ve now pulled these navigators apart, so you can use `createBottomTabNavigator`and `createMaterialTopTabNavigator` explicitly depending on what you need. You can use `createTabNavigator` to have the same behavior as before, but it will be removed in 3.0.\\n\\nIt is worth noting additionally that `createBottomTabNavigator` is different from the bottom tab navigator that is available through `TabNavigator` in that it does not support `animationEnabled` or `swipeEnabled` properties.\\n\\n## Enhancements\\n\\n- dangerouslyGetParent and dismiss helpers on navigation prop ([3669](https://github.com/react-navigation/react-navigation/pull/3669))\\n- State persistence - automatically save state and reload it when the app restarts ([3716](https://github.com/react-navigation/react-navigation/pull/3716))\\n- Smoothly transition header visibility in Stack ([3821](https://github.com/react-navigation/react-navigation/pull/3821))\\n- Add initialRouteKey for StackRouter ([3540](https://github.com/react-navigation/react-navigation/pull/3540))\\n- Make StackNavigator keyboard aware -- it hides automatically when you start to swipe back, and refocuses if you cancel the swipe back gesture ([3951](https://github.com/react-navigation/react-navigation/pull/3951))\\n- Allow modification of SafeAreaView props in header ([3496](https://github.com/react-navigation/react-navigation/pull/3496))\\n- Add `createMaterialBottomTabNavigator` for a material design style tab bar. (see [react-navigation-tabs](https://github.com/react-navigation/react-navigation-tabs)).\\n- Use findIndex instead of map/indexOf in StateUtils ([commit](https://github.com/react-navigation/react-navigation/commit/47fe858d4ec339d2b1f4b96f3a5444aed8f6f900)\\n- Warn when users have multiple stateful navigation containers ([commit](https://github.com/react-navigation/react-navigation/commit/68a2a106f370003dc1d46385fd8b5992be189ee2))\\n- Remove almost all uses of React 16 deprecated lifecycle methods ([commit](https://github.com/react-navigation/react-navigation/commit/3f837c895e823de4d528b55fd70ee7ba167480d8))\\n- Add `activeLabelStyle` and `inactiveLabelStyle` for `DrawerItem` ([commit](https://github.com/react-navigation/react-navigation/commit/7c488c8d4974028f85a4c5171d27209fa099170f))\\n\\n## Bugfixes\\n\\n- Avoid unnecessary navigation completion dispatches ([3902](https://github.com/react-navigation/react-navigation/pull/3902))\\n- Use Header.HEIGHT instead of measuring to avoid flicker ([3940](https://github.com/react-navigation/react-navigation/pull/3940))\\n- Implement paths on `SwitchRouter` ([commit](https://github.com/react-navigation/react-navigation/commit/5e4512f3ebef587bf90e4ec4d660708b72a0a865)).\\n- `SwitchRouter` now returns `null` on idempotent navigation ([commit](https://github.com/react-navigation/react-navigation/commit/577d99c1658ef85c061c82d55bf349c38e161e97)).\\n\\n## Final notes\\n\\nThe breaking changes and deprecations in this release resolve a lot of issues that users have encountered that have been perceived as bugs but were technically expected behavior. We think that we\u2019ve drastically improved library ergonomics for new users and experienced users alike, let us know [on Twitter](https://twitter.com/reactnavigation) what you think.\\n\\nWe\u2019ve [started to plan for 3.0](https://github.com/react-navigation/react-navigation/issues/3686). Please get involved by [posting your feature requests to Canny](https://react-navigation.canny.io/feature-requests), [opening a RFC](https://github.com/react-navigation/rfcs/issues), or letting us know about bugs with a well-formulated [issue](https://github.com/react-navigation/react-navigation/issues/new)!"},{"id":"/2018/04/06/react-navigation-2.0-rc","metadata":{"permalink":"/blog/2018/04/06/react-navigation-2.0-rc","source":"@site/blog/2018-04-06-react-navigation-2.0-rc.md","title":"2.0 release candidate","description":"Exactly two months after the release of React Navigation 1.0, we are close to another major version release. We\u2019d like to invite developers that use the library to give the release candidate a try in your app and let us know if you encounter any issues.","date":"2018-04-06T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.885,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"2.0 release candidate","authors":"brent","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"React Navigation 2.0","permalink":"/blog/2018/05/07/react-navigation-2.0"},"nextItem":{"title":"React Navigation 1.0 (goodbye, beta!)","permalink":"/blog/2018/02/06/react-navigation-1.0"}},"content":"Exactly two months after the release of React Navigation 1.0, we are close to another major version release. We\u2019d like to invite developers that use the library to give the release candidate a try in your app and let us know if you encounter any issues.\\n\\n\x3c!--truncate--\x3e\\n\\n```bash\\nyarn add react-navigation@^2.0.0-rc.1\\n```\\n\\nThe documentation for 2.0 is available at [reactnavigation.org](https://reactnavigation.org)\\n\\nWe\u2019re bumping the major version because some of the changes in this release are backwards incompatible. That said, this should be a fairly easy upgrade. We are improving React Navigation incrementally because we don\'t want to leave developers feeling stranded in an old version. If you use React Navigation in a conventional way and don\'t have any custom navigators, I can\'t imagine this update would take you more than an hour.\\n\\nThis blog post is not a comprehensive changelog - that will come with the 2.0 proper release; the following is a list of the breaking changes, suggestions for how you can update your app to accommodate them, notice of deprecations, and some of my favourite new features.\\n\\n## Breaking changes\\n\\n### `navigate(routeName)` in StackNavigator is \u201Cless pushy\u201D\\n\\nIn 1.x, `navigate(routeName)` and `push(routeName)` were very similar: every time you called `navigate(routeName)` it would push a new route to the stack, regardless. Now `navigate(routeName)` will first try to find an existing instance of the route and jump to that if it exists, otherwise it will push the route to the stack.\\n\\nTo update your app for this change you may need to change `navigate` to `push` in places where you would like to push a new route every time. Alternatively, you could consider using a `key`: `navigate({routeName: \u2018MyRoute\u2019, key: data.uniqueId, params: data})`. [Read more about navigation with keys](/docs/2.x/navigation-key).\\n\\nRead more about this in [RFC 4](https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md).\\n\\n### `push` now propagates between routers like `navigate`\\n\\nPreviously, `push` only applied to the deepest active stack router. This meant that if you had Stack A > Stack B and Stack B fired `push(\u2018MyRoute\u2019)`, even if Stack B does not have a route with the name `\u2019MyRoute\u2019` and Stack A does, the screen would not be pushed. We made this change to accommodate for the \u201Cless pushy\u201D navigate behavior.\\n\\nWhen updating your app, you may want to double check where you use `push`to ensure that this doesn\u2019t impact the expected behavior of your app.\\n\\n### Shallow navigation options\\n\\nA common source of confusion for developers working with React Navigation has been around `navigationOptions` resolution. For example, if you have a stack navigator with a header, and a drawer inside of that stack, then in some circumstances the title of the stack would change every time you change screens in the drawer. This is because the stack navigator would crawl into child navigators and pull `navigationOptions` off of the deepest active screen. As of 2.0, this no longer happens: navigators will only look at their direct children for `navigationOptions`. Read more about this in [RFC 5](https://github.com/react-navigation/rfcs/blob/master/text/0005-shallow-navigation-options.md).\\n\\n### New API for creating navigators\\n\\nThis does not impact most users, but if you have any custom navigators in your app, read on. Read more about the changes in [RFC 2](https://github.com/react-navigation/rfcs/blob/master/text/0002-navigator-view-api.md). Also read the [custom navigators documentation](/docs/2.x/custom-navigators).\\n\\n### Drawer routes have been replaced with actions\\n\\nRather than opening a drawer with `navigation.navigate(\u2018DrawerOpen\u2019)`, you can now call `navigation.openDrawer()`. Other methods are `closeDrawer()` and `toggleDrawer()`.\\n\\n### Navigation actions API overhaul\\n\\nIn 1.x, functions on the `navigation` were not contextual - they would be the same regardless of whether your screen was inside of a drawer, a stack, a tab navigator, etc. In 2.0 the functions that are available to you on the `navigation` prop depend on the navigators that it corresponds to. If your screen is inside of both a stack and a drawer navigator, you will have helpers for both -- `push` and `openDrawer`, for example.\\n\\nGiven that we only exposed generic helpers (`navigate`, `goBack`) and helpers specific to the stack in 1.x, this would only impact you if you attempted to use the stack helpers from outside of a stack. For example, if you had a tab navigator with a stack in tab A and just a plain screen in tab B, then tried to `push` a route from the screen in tab B, `push` would not be available. Keep this in mind when you update your app if it follows this type of structure.\\n\\nOne of the big improvements you get from this is that you can now add your own helpers to the `navigation` prop! Read more in [RFC 6](https://github.com/react-navigation/rfcs/blob/master/text/0006-action-creators.md).\\n\\n## Deprecations\\n\\nThe following APIs are deprecated and will be removed in 3.0.\\n\\n### XNavigator is now named createXNavigator\\n\\n```js\\nimport { createStackNavigator } from \u2018react-navigation\u2019;\\ncreateStackNavigator({routeName: Screen});\\n```\\n\\nThis change was made to improve the ease of learning and understanding the library. The navigator constructors are functions that return components (HOCs), and that was not previously very well communicated by the name.\\n\\n### `TabNavigator` has been split up into more focused navigators\\n\\n`TabNavigator` (now `createTabNavigator` as per above) was a frequent source of confusion for users because it would use a bottom tab bar on iOS and a top tab bar on Android by default. Additionally, some of the configuration properties applied to the bottom tab bar, and others to the top tab bar. The equivalent components are now: `createBottomTabNavigator` and `createMaterialTopTabNavigator`. We\u2019ve also introduced a new type of tab navigator, `createMaterialBottomTabNavigator` - a material design styled bottom tab bar based navigator from [react-native-paper](https://github.com/callstack/react-native-paper). Thank you [satya164](http://github.com/satya164) for your great work on this!\\n\\n## New feature highlights\\n\\n- State persistence - automatically save state and reload it when the app restarts. See [state persistence docs](/docs/state-persistence)\\n- Transitions between screens in stack with headers and without headers now animates as expected on iOS. [#3821](https://github.com/react-navigation/react-navigation/pull/3821). Thanks [skevy](https://github.com/skevy)!\\n- As mentioned above, `createMaterialBottomNavigator` is a new navigator type that provides the material design bottom tab bar pattern."},{"id":"/2018/02/06/react-navigation-1.0","metadata":{"permalink":"/blog/2018/02/06/react-navigation-1.0","source":"@site/blog/2018-02-06-react-navigation-1.0.md","title":"React Navigation 1.0 (goodbye, beta!)","description":"As of today, React Navigation version 1.0 has been released! To see a list of recent improvements leading up to the release, refer to the \u201CRenewed Path to React Navigation V1.0\u201D issue. Thank you to everybody who has filed high-quality bug reports, submitted pull requests, and helped out fellow developers while we were in beta!","date":"2018-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.645,"hasTruncateMarker":true,"authors":[{"name":"Brent Vatne","url":"https://bsky.app/profile/notbrent.bsky.social","title":"Core Team","socials":{"x":"https://x.com/notbrent","github":"https://github.com/brentvatne"},"imageURL":"https://avatars0.githubusercontent.com/u/90494","key":"brent","page":null}],"frontMatter":{"title":"React Navigation 1.0 (goodbye, beta!)","authors":"brent","tags":["release","announcement"]},"unlisted":false,"prevItem":{"title":"2.0 release candidate","permalink":"/blog/2018/04/06/react-navigation-2.0-rc"}},"content":"As of today, React Navigation version 1.0 has been released! To see a list of recent improvements leading up to the release, refer to the \u201C[Renewed Path to React Navigation V1.0](https://github.com/react-navigation/react-navigation/issues/2585)\u201D issue. Thank you to everybody who has filed high-quality bug reports, submitted pull requests, and helped out fellow developers while we were in beta!\\n\\n\x3c!--truncate--\x3e\\n\\nThis release isn\u2019t meant to be interpreted as a signal that React Navigation is \u201Cfinished\\" &mdash; work is already underway on a number of significant changes to the API that aim to make React Navigation easier to use and more powerful. These changes will be run through our [new RFC process](https://github.com/react-navigation/rfcs). For example, the [Navigator View API RFC](https://github.com/react-navigation/rfcs/blob/master/text/0002-navigator-view-api.md) outlines a plan to decouple views from the router in order to make it easier for other navigation APIs, such as [react-native-router-flux](https://github.com/aksonov/react-native-router-flux) and [react-router-native](https://github.com/ReactTraining/react-router/tree/master/packages/react-router-native), to build on top of the same navigation views. We\u2019re also very excited about a plan (no RFC is open yet, but keep an eye out for it) to use [react-native-gesture-handler](https://github.com/software-mansion/react-native-gesture-handler) to run navigation gestures (sliding a drawer open, or swiping back on a stack, for example) on the UI thread using the Animated native driver.\\n\\nLast week we released an updated version of our [documentation website](/docs/1.x/getting-started), built using [Docusaurus](https://docusaurus.io/). We hope that the new documentation will help newcomers get onboarded with the fundamentals of React Navigation, and serve as an ongoing resource to handle specific use cases as you come across them (under the \u201CHow do I do..?\u201D section). [Contributions to the documentation are very welcome](https://github.com/react-navigation/react-navigation.github.io).\\n\\n[Give React Navigation 1.0 a try](/docs/1.x/getting-started), [post a feature request](https://react-navigation.canny.io/feature-requests) if you think something is missing, [open a RFC](https://github.com/react-navigation/rfcs) if you have an idea of how to implement it, [file a detailed bug report](https://github.com/react-navigation/react-navigation/issues) when you encounter problems (or [open a pull request](https://github.com/react-navigation/react-navigation/pulls) if you know how to fix them)! Updating your existing installation should be easy if you have tracked releases over recent months &mdash; [read the brief release notes](https://github.com/react-navigation/react-navigation/releases/tag/1.0.0) for more information."}]}}')}}]);