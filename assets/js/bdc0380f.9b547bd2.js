"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["55315"],{35836:function(e,n,t){t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>r,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>s});var a=JSON.parse('{"id":"navigating","title":"Moving between screens","description":"In the previous section, we defined a stack navigator with two routes (Home and Details), but we didn\'t learn how to let a user navigate from Home to Details (although we did learn how to change the initial route in our code, but forcing our users to clone our repository and change the route in our code in order to see another screen is arguably among the worst user experiences one could imagine).","source":"@site/versioned_docs/version-7.x/navigating.md","sourceDirName":".","slug":"/navigating","permalink":"/docs/navigating","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/navigating.md","tags":[],"version":"7.x","frontMatter":{"id":"navigating","title":"Moving between screens","sidebar_label":"Moving between screens"},"sidebar":"docs","previous":{"title":"Hello React Navigation","permalink":"/docs/hello-react-navigation"},"next":{"title":"Passing parameters to routes","permalink":"/docs/params"}}'),i=t("85893"),o=t("50065");let s={id:"navigating",title:"Moving between screens",sidebar_label:"Moving between screens"},r=void 0,c={},l=[{value:"Navigating to a new screen",id:"navigating-to-a-new-screen",level:2},{value:"Navigate to a screen multiple times",id:"navigate-to-a-screen-multiple-times",level:2},{value:"Going back",id:"going-back",level:2},{value:"Summary",id:"summary",level:2}];function d(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In the previous section, we defined a stack navigator with two routes (",(0,i.jsx)(n.code,{children:"Home"})," and ",(0,i.jsx)(n.code,{children:"Details"}),"), but we didn't learn how to let a user navigate from ",(0,i.jsx)(n.code,{children:"Home"})," to ",(0,i.jsx)(n.code,{children:"Details"})," (although we did learn how to change the ",(0,i.jsx)(n.em,{children:"initial"})," route in our code, but forcing our users to clone our repository and change the route in our code in order to see another screen is arguably among the worst user experiences one could imagine)."]}),"\n",(0,i.jsx)(n.p,{children:"If this was a web browser, we'd be able to write something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<a href="details.html">Go to Details</a>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Another way to write this would be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<a\n  onClick={() => {\n    window.location.href = 'details.html';\n  }}\n>\n  Go to Details\n</a>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We'll do something similar to the latter, but rather than using a ",(0,i.jsx)(n.code,{children:"window.location"})," global, we'll use the ",(0,i.jsx)(n.code,{children:"navigation"})," object that's accessible in our screen components."]}),"\n",(0,i.jsx)(n.h2,{id:"navigating-to-a-new-screen",children:"Navigating to a new screen"}),"\n",(0,i.jsx)(n.pre,{"data-name":"Navigating to a new screen","data-snack":"true",children:(0,i.jsx)(n.code,{className:"language-js",metastring:'name="Navigating to a new screen" snack',children:"// codeblock-focus-start\nimport * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  // highlight-next-line\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      // highlight-start\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n      // highlight-end\n    </View>\n  );\n}\n\n// ... other code from the previous section\n// codeblock-focus-end\n\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})}),"\n",(0,i.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,i.jsx)("source",{src:"/assets/navigators/stack/simple-details.mp4"})}),"\n",(0,i.jsx)(n.p,{children:"Let's break this down:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"navigation"})," - the ",(0,i.jsx)(n.code,{children:"navigation"})," object is returned from the ",(0,i.jsx)(n.a,{href:"/docs/use-navigation",children:(0,i.jsx)(n.code,{children:"useNavigation"})})," hook (more about this later in ",(0,i.jsx)(n.a,{href:"/docs/navigation-object",children:'"The navigation object in depth"'}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"navigate('Details')"})," - we call the ",(0,i.jsx)(n.code,{children:"navigate"})," function (on the ",(0,i.jsx)(n.code,{children:"navigation"})," object \u2014 naming is hard!) with the name of the route that we'd like to move the user to."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If we call ",(0,i.jsx)(n.code,{children:"navigation.navigate"})," with a route name that we haven't defined in a navigator, it'll print an error in development builds and nothing will happen in production builds. Said another way, we can only navigate to routes that have been defined on our navigator \u2014 we cannot navigate to an arbitrary component."]})}),"\n",(0,i.jsxs)(n.p,{children:["So we now have a stack with two routes: 1) the ",(0,i.jsx)(n.code,{children:"Home"})," route 2) the ",(0,i.jsx)(n.code,{children:"Details"})," route. What would happen if we navigated to the ",(0,i.jsx)(n.code,{children:"Details"})," route again, from the ",(0,i.jsx)(n.code,{children:"Details"})," screen?"]}),"\n",(0,i.jsx)(n.h2,{id:"navigate-to-a-screen-multiple-times",children:"Navigate to a screen multiple times"}),"\n",(0,i.jsx)(n.pre,{"data-name":"Navigate to a screen multiple times","data-snack":"true",children:(0,i.jsx)(n.code,{className:"language-js",metastring:'name="Navigate to a screen multiple times" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      // highlight-start\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details... again\n      </Button>\n      // highlight-end\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you run this code, you'll notice that when you tap \"Go to Details... again\", it doesn't do anything! This is because we are already on the Details route. The ",(0,i.jsx)(n.code,{children:"navigate"}),' function roughly means "go to this screen", and if you are already on that screen then it makes sense that it would do nothing.']}),"\n",(0,i.jsxs)(n.p,{children:["Let's suppose that we actually ",(0,i.jsx)(n.em,{children:"want"})," to add another details screen. This is pretty common in cases where you pass in some unique data to each route (more on that later when we talk about ",(0,i.jsx)(n.code,{children:"params"}),"!). To do this, we can change ",(0,i.jsx)(n.code,{children:"navigate"})," to ",(0,i.jsx)(n.code,{children:"push"}),". This allows us to express the intent to add another route regardless of the existing navigation history."]}),"\n",(0,i.jsx)(n.pre,{"data-name":"Navigate to a screen multiple times","data-snack":"true",children:(0,i.jsx)(n.code,{className:"language-js",metastring:'name="Navigate to a screen multiple times" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.push('Details')}>\n        Go to Details... again\n      </Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})}),"\n",(0,i.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,i.jsx)("source",{src:"/assets/navigators/stack/stack-push.mp4"})}),"\n",(0,i.jsxs)(n.p,{children:["Each time you call ",(0,i.jsx)(n.code,{children:"push"})," we add a new route to the navigation stack. When you call ",(0,i.jsx)(n.code,{children:"navigate"})," it only pushes a new route if you're not already on that route."]}),"\n",(0,i.jsx)(n.h2,{id:"going-back",children:"Going back"}),"\n",(0,i.jsx)(n.p,{children:"The header provided by the native stack navigator will automatically include a back button when it is possible to go back from the active screen (if there is only one screen in the navigation stack, there is nothing that you can go back to, and so there is no back button)."}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes you'll want to be able to programmatically trigger this behavior, and for that, you can use ",(0,i.jsx)(n.code,{children:"navigation.goBack()"}),"."]}),"\n",(0,i.jsx)(n.pre,{"data-name":"Going back","data-snack":"true",children:(0,i.jsx)(n.code,{className:"language-js",metastring:'name="Going back" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button onPress={() => navigation.push('Details')}>\n        Go to Details... again\n      </Button>\n      // highlight-start\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      // highlight-end\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})}),"\n",(0,i.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,i.jsx)("source",{src:"/assets/navigators/stack/back-home.mp4"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["On Android, React Navigation hooks in to the hardware back button and fires the ",(0,i.jsx)(n.code,{children:"goBack()"})," function for you when the user presses it, so it behaves as the user would expect."]})}),"\n",(0,i.jsxs)(n.p,{children:["Another common requirement is to be able to go back ",(0,i.jsx)(n.em,{children:"multiple"})," screens -- for example, if you are several screens deep in a stack and want to dismiss all of them to go back to the first screen. In this case, we know that we want to go back to ",(0,i.jsx)(n.code,{children:"Home"})," so we can use ",(0,i.jsx)(n.code,{children:"popTo('Home')"}),". Another alternative would be ",(0,i.jsx)(n.code,{children:"navigation.popToTop()"}),", which goes back to the first screen in the stack."]}),"\n",(0,i.jsx)(n.pre,{"data-name":"Going back to specific screen","data-snack":"true",children:(0,i.jsx)(n.code,{className:"language-js",metastring:'name="Going back to specific screen" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n      <Button onPress={() => navigation.navigate('Details')}>\n        Go to Details\n      </Button>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nfunction DetailsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n      <Button onPress={() => navigation.push('Details')}>\n        Go to Details... again\n      </Button>\n      <Button onPress={() => navigation.goBack()}>Go back</Button>\n      // highlight-start\n      <Button onPress={() => navigation.popTo('Home')}>Go to Home</Button>\n      <Button onPress={() => navigation.popToTop()}>\n        Go back to first screen in stack\n      </Button>\n      // highlight-end\n    </View>\n  );\n}\n// codeblock-focus-end\n\nconst RootStack = createNativeStackNavigator({\n  initialRouteName: 'Home',\n  screens: {\n    Home: HomeScreen,\n    Details: DetailsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(RootStack);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})}),"\n",(0,i.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,i.jsx)("source",{src:"/assets/navigators/stack/pop-to-top.mp4"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/navigation-object#navigate",children:(0,i.jsx)(n.code,{children:"navigation.navigate('RouteName')"})})," pushes a new route to the native stack navigator if you're not already on that route."]}),"\n",(0,i.jsxs)(n.li,{children:["We can call ",(0,i.jsx)(n.a,{href:"/docs/stack-actions#push",children:(0,i.jsx)(n.code,{children:"navigation.push('RouteName')"})})," as many times as we like and it will continue pushing routes."]}),"\n",(0,i.jsxs)(n.li,{children:["The header bar will automatically show a back button, but you can programmatically go back by calling ",(0,i.jsx)(n.a,{href:"/docs/navigation-object#goback",children:(0,i.jsx)(n.code,{children:"navigation.goBack()"})}),". On Android, the hardware back button just works as expected."]}),"\n",(0,i.jsxs)(n.li,{children:["You can go back to an existing screen in the stack with ",(0,i.jsx)(n.a,{href:"/docs/stack-actions#popto",children:(0,i.jsx)(n.code,{children:"navigation.popTo('RouteName')"})}),", and you can go back to the first screen in the stack with ",(0,i.jsx)(n.a,{href:"/docs/stack-actions#poptotop",children:(0,i.jsx)(n.code,{children:"navigation.popToTop()"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/navigation-object",children:(0,i.jsx)(n.code,{children:"navigation"})})," object is available to all screen components with the ",(0,i.jsx)(n.a,{href:"/docs/use-navigation",children:(0,i.jsx)(n.code,{children:"useNavigation"})})," hook."]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var a=t(67294);let i={},o=a.createContext(i);function s(e){let n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);