"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["58201"],{99764:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"2.x","label":"2.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-2.x","isLast":false,"docsSidebars":{"version-2.x-docs":[{"type":"category","label":"Fundamentals","items":[{"type":"link","label":"Getting started","href":"/docs/2.x/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Hello React Navigation","href":"/docs/2.x/hello-react-navigation","docId":"hello-react-navigation","unlisted":false},{"type":"link","label":"Supported React Native versions","href":"/docs/2.x/supported-react-native-versions","docId":"supported-react-native-versions","unlisted":false},{"type":"link","label":"Moving between screens","href":"/docs/2.x/navigating","docId":"navigating","unlisted":false},{"type":"link","label":"Navigation lifecycle","href":"/docs/2.x/navigation-lifecycle","docId":"navigation-lifecycle","unlisted":false},{"type":"link","label":"Passing parameters to routes","href":"/docs/2.x/params","docId":"params","unlisted":false},{"type":"link","label":"Configuring the header bar","href":"/docs/2.x/headers","docId":"headers","unlisted":false},{"type":"link","label":"Header buttons","href":"/docs/2.x/header-buttons","docId":"header-buttons","unlisted":false},{"type":"link","label":"Opening a full-screen modal","href":"/docs/2.x/modal","docId":"modal","unlisted":false},{"type":"link","label":"Next steps","href":"/docs/2.x/next-steps","docId":"next-steps","unlisted":false},{"type":"link","label":"Glossary of terms","href":"/docs/2.x/glossary-of-terms","docId":"glossary-of-terms","unlisted":false},{"type":"link","label":"Common mistakes","href":"/docs/2.x/common-mistakes","docId":"common-mistakes","unlisted":false},{"type":"link","label":"Optimize memory usage and performance","href":"/docs/2.x/react-native-screens","docId":"react-native-screens","unlisted":false},{"type":"link","label":"Limitations","href":"/docs/2.x/limitations","docId":"limitations","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Assorted guides","items":[{"type":"link","label":"Tab navigation","href":"/docs/2.x/tab-based-navigation","docId":"tab-based-navigation","unlisted":false},{"type":"link","label":"Drawer navigation","href":"/docs/2.x/drawer-based-navigation","docId":"drawer-based-navigation","unlisted":false},{"type":"link","label":"Authentication flows","href":"/docs/2.x/auth-flow","docId":"auth-flow","unlisted":false},{"type":"link","label":"iPhone X support","href":"/docs/2.x/handling-iphonex","docId":"handling-iphonex","unlisted":false},{"type":"link","label":"Different status bar configuration based on route","href":"/docs/2.x/status-bar","docId":"status-bar","unlisted":false},{"type":"link","label":"Navigation options resolution","href":"/docs/2.x/navigation-options-resolution","docId":"navigation-options-resolution","unlisted":false},{"type":"link","label":"Custom Android back button behavior","href":"/docs/2.x/custom-android-back-button-handling","docId":"custom-android-back-button-handling","unlisted":false},{"type":"link","label":"Access the navigation prop from any component","href":"/docs/2.x/connecting-navigation-prop","docId":"connecting-navigation-prop","unlisted":false},{"type":"link","label":"Navigating without the navigation prop","href":"/docs/2.x/navigating-without-navigation-prop","docId":"navigating-without-navigation-prop","unlisted":false},{"type":"link","label":"Using the navigation key","href":"/docs/2.x/navigation-key","docId":"navigation-key","unlisted":false},{"type":"link","label":"Deep linking","href":"/docs/2.x/deep-linking","docId":"deep-linking","unlisted":false},{"type":"link","label":"Screen tracking","href":"/docs/2.x/screen-tracking","docId":"screen-tracking","unlisted":false},{"type":"link","label":"State persistence","href":"/docs/2.x/state-persistence","docId":"state-persistence","unlisted":false},{"type":"link","label":"App containers","href":"/docs/2.x/app-containers","docId":"app-containers","unlisted":false},{"type":"link","label":"Redux integration","href":"/docs/2.x/redux-integration","docId":"redux-integration","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Build your own Navigator","items":[{"type":"link","label":"Overview","href":"/docs/2.x/custom-navigator-overview","docId":"custom-navigator-overview","unlisted":false},{"type":"link","label":"Routers","href":"/docs/2.x/routers","docId":"routers","unlisted":false},{"type":"link","label":"Custom navigators","href":"/docs/2.x/custom-navigators","docId":"custom-navigators","unlisted":false},{"type":"link","label":"Custom routers","href":"/docs/2.x/custom-routers","docId":"custom-routers","unlisted":false},{"type":"link","label":"Navigation views","href":"/docs/2.x/navigation-views","docId":"navigation-views","unlisted":false},{"type":"link","label":"Transitioner","href":"/docs/2.x/transitioner","docId":"transitioner","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Related resources","items":[{"type":"link","label":"Community Navigators and Libraries","href":"/docs/2.x/community-libraries-and-navigators","docId":"community-libraries-and-navigators","unlisted":false},{"type":"link","label":"More Resources","href":"/docs/2.x/more-resources","docId":"more-resources","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Meta","items":[{"type":"link","label":"Pitch & anti-pitch","href":"/docs/2.x/pitch","docId":"pitch","unlisted":false},{"type":"link","label":"Alternative libraries","href":"/docs/2.x/alternatives","docId":"alternatives","unlisted":false},{"type":"link","label":"Contributing","href":"/docs/2.x/contributing","docId":"contributing","unlisted":false}],"collapsed":false,"collapsible":true}],"version-2.x-api":[{"type":"category","label":"API reference","items":[{"type":"link","label":"Overview","href":"/docs/2.x/api-reference","docId":"api-reference","unlisted":false},{"type":"link","label":"Navigation prop","href":"/docs/2.x/navigation-prop","docId":"navigation-prop","unlisted":false},{"type":"link","label":"NavigationActions","href":"/docs/2.x/navigation-actions","docId":"navigation-actions","unlisted":false},{"type":"link","label":"StackActions","href":"/docs/2.x/stack-actions","docId":"stack-actions","unlisted":false},{"type":"link","label":"DrawerActions","href":"/docs/2.x/drawer-actions","docId":"drawer-actions","unlisted":false},{"type":"link","label":"createStackNavigator","href":"/docs/2.x/stack-navigator","docId":"stack-navigator","unlisted":false},{"type":"link","label":"createSwitchNavigator","href":"/docs/2.x/switch-navigator","docId":"switch-navigator","unlisted":false},{"type":"link","label":"createDrawerNavigator","href":"/docs/2.x/drawer-navigator","docId":"drawer-navigator","unlisted":false},{"type":"link","label":"createTabNavigator","href":"/docs/2.x/tab-navigator","docId":"tab-navigator","unlisted":false},{"type":"link","label":"createBottomTabNavigator","href":"/docs/2.x/bottom-tab-navigator","docId":"bottom-tab-navigator","unlisted":false},{"type":"link","label":"createMaterialBottomTabNavigator","href":"/docs/2.x/material-bottom-tab-navigator","docId":"material-bottom-tab-navigator","unlisted":false},{"type":"link","label":"createMaterialTopTabNavigator","href":"/docs/2.x/material-top-tab-navigator","docId":"material-top-tab-navigator","unlisted":false},{"type":"link","label":"withNavigation","href":"/docs/2.x/with-navigation","docId":"with-navigation","unlisted":false},{"type":"link","label":"withNavigationFocus","href":"/docs/2.x/with-navigation-focus","docId":"with-navigation-focus","unlisted":false},{"type":"link","label":"NavigationEvents","href":"/docs/2.x/navigation-events","docId":"navigation-events","unlisted":false}],"collapsed":false,"collapsible":true}]},"docs":{"alternatives":{"id":"alternatives","title":"Alternative libraries","description":"React Navigation isn\'t your only option for routing and navigation in React Native. If the pitch & anti-pitch or the API design leave you wanting to explore other options, here are a few to consider.","sidebar":"version-2.x-docs"},"api-reference":{"id":"api-reference","title":"API Reference","description":"This section of the documentation describes the public API of React Navigation. It always refers to the latest version of the library.","sidebar":"version-2.x-api"},"app-containers":{"id":"app-containers","title":"App containers","description":"Containers are responsible for managing your app state and linking your top-level navigator to the app environment. On Android, the app container uses the Linking API to handle the back button. The container can also be configured to persist your navigation state. On web, you\'d use different containers than React Native.","sidebar":"version-2.x-docs"},"auth-flow":{"id":"auth-flow","title":"Authentication flows","description":"Most apps require that a user authenticate in some way to have access to data associated with a user or other private content. Typically the flow will look like this:","sidebar":"version-2.x-docs"},"bottom-tab-navigator":{"id":"bottom-tab-navigator","title":"createBottomTabNavigator","description":"A simple tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused.","sidebar":"version-2.x-api"},"common-mistakes":{"id":"common-mistakes","title":"Common mistakes","description":"This section attempts to outline issues that users frequently encounter when first getting accustomed to using React Navigation and serves as a reference in some cases for error messages.","sidebar":"version-2.x-docs"},"community-libraries-and-navigators":{"id":"community-libraries-and-navigators","title":"Community-developed Navigators and Libraries","description":"Fluid Transitions","sidebar":"version-2.x-docs"},"connecting-navigation-prop":{"id":"connecting-navigation-prop","title":"Access the navigation prop from any component","description":"withNavigation is a higher order component which passes the navigation prop into a wrapped Component. It\'s useful when you cannot pass the navigation prop into the component directly, or don\'t want to pass it in case of a deeply nested child.","sidebar":"version-2.x-docs"},"contributing":{"id":"contributing","title":"React Navigation contributor guide","description":"Want to help improve React Navigation? Your help would be greatly appreciated!","sidebar":"version-2.x-docs"},"custom-android-back-button-handling":{"id":"custom-android-back-button-handling","title":"Custom Android back button behavior","description":"By default, when user presses the Android hardware back button, react-navigation will pop a screen or exit the app if there are no screens to pop. This is a sensible default behavior, but there are situations when you might want to implement custom handling.","sidebar":"version-2.x-docs"},"custom-navigator-overview":{"id":"custom-navigator-overview","title":"Overview","description":"Navigators allow you to define your application\'s navigation structure. Navigators also render common elements such as headers and tab bars which you can configure.","sidebar":"version-2.x-docs"},"custom-navigators":{"id":"custom-navigators","title":"Custom navigators","description":"A navigator is any React component that has a router on it, to define the navigation behavior. Each navigator is given a navigation prop, which allows the parent to control the navigation state.","sidebar":"version-2.x-docs"},"custom-routers":{"id":"custom-routers","title":"Custom routers","description":"You can make your own router by building an object with the following functions:","sidebar":"version-2.x-docs"},"deep-linking":{"id":"deep-linking","title":"Deep linking","description":"In this guide we will set up our app to handle external URIs. Let\'s suppose that we want a URI like example://chat/Eric to open our app and link straight into a chat screen for some user named \\"Eric\\".","sidebar":"version-2.x-docs"},"drawer-actions":{"id":"drawer-actions","title":"DrawerActions reference","description":"DrawerActions is an object containing methods for generating actions specific to drawer-based navigators. Its methods expand upon the actions available in NavigationActions.","sidebar":"version-2.x-api"},"drawer-based-navigation":{"id":"drawer-based-navigation","title":"Drawer navigation","description":"&rarr; Run this code","sidebar":"version-2.x-docs"},"drawer-navigator":{"id":"drawer-navigator","title":"createDrawerNavigator","description":"RouteConfigs","sidebar":"version-2.x-api"},"getting-started":{"id":"getting-started","title":"Getting started","description":"React Navigation is born from the React Native community\'s need for an extensible yet easy-to-use navigation solution written entirely in JavaScript (so you can read and understand all of the source), on top of powerful native primitives.","sidebar":"version-2.x-docs"},"glossary-of-terms":{"id":"glossary-of-terms","title":"Glossary of terms","description":"This is a new section of the documentation and it\'s missing a lot of terms! Please submit a pull request or an issue with a term that you think should be explained here.","sidebar":"version-2.x-docs"},"handling-iphonex":{"id":"handling-iphonex","title":"iPhone X support","description":"By default, React Navigation aids in ensuring your application displays correctly on the iPhoneX. It does so by using SafeAreaView inside of UI elements that may interact with the sensor cluster (\\"the notch\\") or the home activity indicator.","sidebar":"version-2.x-docs"},"header-buttons":{"id":"header-buttons","title":"Header buttons","description":"Now that we know how to customize the look of our headers, let\'s make them sentient! Actually perhaps that\'s ambitious, let\'s just make them able to respond to our touches in very well defined ways.","sidebar":"version-2.x-docs"},"headers":{"id":"headers","title":"Configuring the header bar","description":"By now you\'re probably tired of seeing a blank grey bar on the top of your screen &mdash; you\'re ready for some flair. So let\'s jump in to configuring the header bar.","sidebar":"version-2.x-docs"},"hello-react-navigation":{"id":"hello-react-navigation","title":"Hello React Navigation","description":"In a web browser, you can link to different pages using an anchor (``) tag. When the user clicks on a link, the URL is pushed to the browser history stack. When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page. React Native doesn\'t have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.","sidebar":"version-2.x-docs"},"limitations":{"id":"limitations","title":"Limitations","description":"As a potential user of the library, it\'s important to know what you can and cannot do with it. Armed with this knowledge, you may choose to adopt a different library instead. We discuss the high level design decisions in the pitch & anti-pitch section, and here we will cover some of the use cases that are either not supported or are so difficult to do that they may as well be impossible. If any of the following limitations are dealbreakers for your app, React Navigation might not be for you.","sidebar":"version-2.x-docs"},"material-bottom-tab-navigator":{"id":"material-bottom-tab-navigator","title":"createMaterialBottomTabNavigator","description":"A material-design themed tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused.","sidebar":"version-2.x-api"},"material-top-tab-navigator":{"id":"material-top-tab-navigator","title":"createMaterialTopTabNavigator","description":"A material-design themed tab bar on the top of the screen that lets you switch between different routes by tapping the route or swiping horizontally. Transitions are animated by default. Screen components for each route are mounted immediately.","sidebar":"version-2.x-api"},"modal":{"id":"modal","title":"Opening a full-screen modal","description":"Dictionary.com provides no satisfactory definition of modal as it relates to user interfaces, but semantic UI describes it as follows:","sidebar":"version-2.x-docs"},"more-resources":{"id":"more-resources","title":"More Resources","description":"- Mobile Navigation at React Alicante [watch here].","sidebar":"version-2.x-docs"},"navigating":{"id":"navigating","title":"Moving between screens","description":"In the previous section, \\"Hello React Navigation\\", we defined a stack navigator with two routes (Home and Details), but we didn\'t learn how to let a user navigate from Home to Details (although we did learn how to change the initial route in our code, but forcing our users to clone our repository and change the route in our code in order to see another screen is arguably among the worst user experiences one could imagine).","sidebar":"version-2.x-docs"},"navigating-without-navigation-prop":{"id":"navigating-without-navigation-prop","title":"Navigating without the navigation prop","description":"Calling functions such as navigate or popToTop on the navigation prop is not the only way to navigate around your app. As an alternative, you can dispatch navigation actions on your top-level navigator, provided you aren\'t passing your own navigation prop as you would with a redux integration. The presented approach is useful in situations when you want to trigger a navigation action from places where you do not have access to the navigation prop, or if you\'re looking for an alternative to using the navigation prop.","sidebar":"version-2.x-docs"},"navigation-actions":{"id":"navigation-actions","title":"NavigationActions reference","description":"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.","sidebar":"version-2.x-api"},"navigation-context":{"id":"navigation-context","title":"NavigationContext","description":"NavigationContext provides the navigation object (similar to the navigation prop). In fact, withNavigation uses this context to inject the navigation prop to your wrapped component. The hook counterpart is essentially an useContext with this context as well."},"navigation-events":{"id":"navigation-events","title":"NavigationEvents reference","description":"NavigationEvents is a React component providing a declarative API to subscribe to navigation events. It will subscribe to navigation events on mount, and unsubscribe on unmount.","sidebar":"version-2.x-api"},"navigation-key":{"id":"navigation-key","title":"Using the navigation key","description":"The key parameter comes up repeatedly across different navigation functions. Let\'s take a look at a summary of its use cases:","sidebar":"version-2.x-docs"},"navigation-lifecycle":{"id":"navigation-lifecycle","title":"Navigation lifecycle","description":"In the previous section, we worked with a stack navigator that has two screens (Home and Details) and learned how to use this.props.navigation.navigate(\'RouteName\') to navigate between the routes.","sidebar":"version-2.x-docs"},"navigation-options-resolution":{"id":"navigation-options-resolution","title":"Navigation options resolution","description":"Each screen can configure various aspects about how it gets presented in the navigator that renders it. In the Configuring the header bar section of the fundamentals documentation we explain the basics of how this works.","sidebar":"version-2.x-docs"},"navigation-prop":{"id":"navigation-prop","title":"Navigation prop reference","description":"Each screen component in your app is provided with the navigation prop automatically. The prop contains various convenience functions that dispatch navigation actions on the route\'s router. It looks like this:","sidebar":"version-2.x-api"},"navigation-views":{"id":"navigation-views","title":"Navigation views","description":"Navigation views are presentation components that take a router and a navigation prop, and can display several screens, as specified by the navigation.state.","sidebar":"version-2.x-docs"},"next-steps":{"id":"next-steps","title":"Next steps","description":"You are now familiar with how to create a stack navigator, configure it on your screen components, navigate between routes, and display full-screen modals. Stack navigator and its related APIs will be the most frequently used tools in your React Navigation toolbelt, but there are problems that they don\'t solve. For example, you can\'t build tab-based navigation using a stack navigator &mdash; for that, you need to use a TabNavigator.","sidebar":"version-2.x-docs"},"params":{"id":"params","title":"Passing parameters to routes","description":"Remember when I said \\"more on that later when we talk about params!\\"? Well, the time has come.","sidebar":"version-2.x-docs"},"pitch":{"id":"pitch","title":"Pitch & anti-pitch","description":"It\'s useful when considering whether or not to use a project to understand the tradeoffs that the developers of the project made when building it. What problems does it explicitly try to solve for you, and which ones does it ignore? What are the current limitations of the project and common problems that people encounter? These are the kinds of questions that we believe you should have answers to when making an important technology decision for your project, and so we have documented answers to these questions as best we can here, in the form of a \\"pitch\\" (why you should use it) and \\"anti-pitch\\" (why you should not use it). Please submit a pull request if you believe we have omitted important information!","sidebar":"version-2.x-docs"},"react-native-screens":{"id":"react-native-screens","title":"Optimize memory usage and performance","description":"Prior to react-navigation@2.14.0, all screens are essentially regular native View in each platform, which will increase memory usage and make the render tree deep in a heavy-stacked application. This is one of the reason your app is slowing down comparing to native navigation solution.","sidebar":"version-2.x-docs"},"redux-integration":{"id":"redux-integration","title":"Redux integration","description":"Warning: in the next major version of React Navigation, to be released in Fall 2018, we will no longer provide any information about how to integrate with Redux and it may cease to work. Issues related to Redux that are posted on the React Navigation issue tracker will be immediately closed. Redux integration may continue to work but it will not be tested against or considered when making any design decisions for the library.","sidebar":"version-2.x-docs"},"routers":{"id":"routers","title":"Routers","description":"Routers define a component\'s navigation state, and they allow the developer to define paths and actions that can be handled.","sidebar":"version-2.x-docs"},"screen-tracking":{"id":"screen-tracking","title":"Screen tracking","description":"This example shows how to do screen tracking and send to Google Analytics. The approach can be adapted to any other analytics SDK.","sidebar":"version-2.x-docs"},"stack-actions":{"id":"stack-actions","title":"StackActions reference","description":"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in NavigationActions.","sidebar":"version-2.x-api"},"stack-navigator":{"id":"stack-navigator","title":"createStackNavigator","description":"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.","sidebar":"version-2.x-api"},"state-persistence":{"id":"state-persistence","title":"State persistence","description":"You may want to save the user\'s location in the app, so that they are immediately returned to the same location after the app is restarted.","sidebar":"version-2.x-docs"},"status-bar":{"id":"status-bar","title":"Different status bar configuration based on route","description":"If you don\'t have a navigation header, or your navigation header changes color based on the route, you\'ll want to ensure that the correct color is used for the content.","sidebar":"version-2.x-docs"},"supported-react-native-versions":{"id":"supported-react-native-versions","title":"Supported React Native versions","description":"Currently at the time of writing, react-navigation@2.x will work on most of the previous react-native versions, until the lean core effort finally removes AsyncStorage out of react-native.","sidebar":"version-2.x-docs"},"switch-navigator":{"id":"switch-navigator","title":"createSwitchNavigator","description":"The purpose of SwitchNavigator is to only ever show one screen at a time. By default, it does not handle back actions and it resets routes to their default state when you switch away.","sidebar":"version-2.x-api"},"tab-based-navigation":{"id":"tab-based-navigation","title":"Tab navigation","description":"Possibly the most common style of navigation in mobile apps is tab-based navigation. This can be tabs on the bottom of the screen or on the top below the header (or even instead of a header).","sidebar":"version-2.x-docs"},"tab-navigator":{"id":"tab-navigator","title":"createTabNavigator","description":"Note: createTabNavigator is deprecated. Please use createBottomTabNavigator and/or createMaterialTopTabNavigator instead.","sidebar":"version-2.x-api"},"transitioner":{"id":"transitioner","title":"Transitioner","description":"Transitioner is a React component that helps manage transitions for complex animated components. It manages the timing of animations and keeps track of various screens as they enter and leave, but it doesn\'t know what anything looks like, because rendering is entirely deferred to the developer.","sidebar":"version-2.x-docs"},"with-navigation":{"id":"with-navigation","title":"withNavigation","description":"withNavigation is a higher order component which passes the navigation prop into a wrapped component. It\'s useful when you cannot pass the navigation prop into the component directly, or don\'t want to pass it in case of a deeply nested child.","sidebar":"version-2.x-api"},"with-navigation-focus":{"id":"with-navigation-focus","title":"withNavigationFocus","description":"withNavigationFocus is a higher order component which passes the isFocused prop into a wrapped component. It\'s useful if you need to use the focus state in the render function of your screen component or another component rendered somewhere inside of a screen.","sidebar":"version-2.x-api"}}}}')}}]);